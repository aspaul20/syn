-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.2
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ==============================================================

library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity Conv1DMac_new403_Mgi_rom is 
    generic(
             DWIDTH     : integer := 4; 
             AWIDTH     : integer := 12; 
             MEM_SIZE    : integer := 4096
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of Conv1DMac_new403_Mgi_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 to 896=> "0000", 897 => "0010", 898 to 902=> "0000", 903 => "1111", 904 to 907=> "0000", 
    908 => "0001", 909 to 912=> "0000", 913 => "0011", 914 => "0010", 915 => "1110", 
    916 to 917=> "0000", 918 => "0001", 919 => "0010", 920 to 921=> "0000", 922 => "0001", 
    923 to 925=> "0000", 926 => "1111", 927 to 928=> "0000", 929 => "0010", 930 => "0000", 
    931 => "1110", 932 => "0000", 933 => "1110", 934 => "1101", 935 to 937=> "0000", 
    938 => "1110", 939 => "0010", 940 => "0001", 941 => "1101", 942 to 949=> "0000", 
    950 => "0010", 951 => "0000", 952 => "1111", 953 => "0000", 954 => "0001", 
    955 => "1111", 956 => "0011", 957 to 961=> "0000", 962 => "1111", 963 to 967=> "0000", 
    968 => "1110", 969 => "1111", 970 to 972=> "0000", 973 => "0010", 974 to 975=> "0000", 
    976 => "0010", 977 to 978=> "0000", 979 => "0011", 980 => "0000", 981 => "0001", 
    982 to 983=> "0000", 984 => "0001", 985 to 987=> "0000", 988 => "0011", 989 to 990=> "0000", 
    991 => "0001", 992 => "1111", 993 to 994=> "0000", 995 => "0011", 996 to 997=> "0000", 
    998 => "0010", 999 => "0000", 1000 => "0011", 1001 to 1005=> "0000", 1006 => "1111", 
    1007 to 1013=> "0000", 1014 => "1111", 1015 => "1110", 1016 => "0000", 1017 => "1111", 
    1018 to 1019=> "0000", 1020 => "1111", 1021 to 2304=> "0000", 2305 => "0001", 2306 to 2310=> "0000", 
    2311 => "1111", 2312 to 2315=> "0000", 2316 => "0001", 2317 to 2320=> "0000", 2321 => "0011", 
    2322 => "0010", 2323 => "1110", 2324 to 2325=> "0000", 2326 => "0001", 2327 => "0010", 
    2328 to 2329=> "0000", 2330 => "0001", 2331 to 2333=> "0000", 2334 => "1111", 2335 to 2336=> "0000", 
    2337 => "0010", 2338 => "0000", 2339 => "1110", 2340 => "0000", 2341 => "1110", 
    2342 => "1101", 2343 to 2345=> "0000", 2346 => "1110", 2347 => "0010", 2348 => "0001", 
    2349 => "1101", 2350 to 2357=> "0000", 2358 => "0001", 2359 => "0000", 2360 => "1111", 
    2361 => "0000", 2362 => "0001", 2363 => "1111", 2364 => "0011", 2365 to 2369=> "0000", 
    2370 => "1111", 2371 to 2375=> "0000", 2376 => "1110", 2377 => "1111", 2378 to 2380=> "0000", 
    2381 => "0010", 2382 to 2383=> "0000", 2384 => "0010", 2385 to 2386=> "0000", 2387 => "0011", 
    2388 => "0000", 2389 => "0001", 2390 to 2391=> "0000", 2392 => "0001", 2393 to 2395=> "0000", 
    2396 => "0011", 2397 to 2398=> "0000", 2399 => "0001", 2400 => "1111", 2401 to 2402=> "0000", 
    2403 => "0011", 2404 to 2405=> "0000", 2406 => "0010", 2407 => "0000", 2408 => "0011", 
    2409 to 2421=> "0000", 2422 => "1111", 2423 => "1110", 2424 => "0000", 2425 => "1111", 
    2426 to 2427=> "0000", 2428 => "1111", 2429 to 2944=> "0000", 2945 => "0010", 2946 to 2950=> "0000", 
    2951 => "1111", 2952 to 2955=> "0000", 2956 => "0001", 2957 to 2960=> "0000", 2961 => "0011", 
    2962 => "0010", 2963 => "1110", 2964 to 2965=> "0000", 2966 => "0001", 2967 => "0010", 
    2968 to 2969=> "0000", 2970 => "0001", 2971 to 2973=> "0000", 2974 => "1111", 2975 to 2976=> "0000", 
    2977 => "0010", 2978 => "0000", 2979 => "1110", 2980 => "0000", 2981 => "1110", 
    2982 => "1101", 2983 to 2985=> "0000", 2986 => "1110", 2987 => "0010", 2988 => "0001", 
    2989 => "1101", 2990 to 2997=> "0000", 2998 => "0010", 2999 => "0000", 3000 => "1111", 
    3001 => "0000", 3002 => "0001", 3003 => "1111", 3004 => "0011", 3005 to 3009=> "0000", 
    3010 => "1111", 3011 to 3015=> "0000", 3016 => "1110", 3017 => "1111", 3018 to 3020=> "0000", 
    3021 => "0010", 3022 to 3023=> "0000", 3024 => "0010", 3025 => "0000", 3026 => "1111", 
    3027 => "0011", 3028 => "0000", 3029 => "0001", 3030 to 3031=> "0000", 3032 => "0001", 
    3033 to 3035=> "0000", 3036 => "0011", 3037 to 3038=> "0000", 3039 => "0001", 3040 => "1111", 
    3041 to 3042=> "0000", 3043 => "0011", 3044 to 3045=> "0000", 3046 => "0010", 3047 => "0000", 
    3048 => "0011", 3049 to 3053=> "0000", 3054 => "1111", 3055 to 3061=> "0000", 3062 => "1111", 
    3063 => "1110", 3064 => "0000", 3065 => "1111", 3066 to 3067=> "0000", 3068 => "1111", 
    3069 => "0000", 3070 => "1111", 3071 => "0000", 3072 => "1110", 3073 => "0011", 
    3074 => "1110", 3075 to 3078=> "0000", 3079 => "1110", 3080 => "0011", 3081 => "0000", 
    3082 => "1111", 3083 => "0001", 3084 => "1011", 3085 => "1100", 3086 to 3087=> "0000", 
    3088 => "0001", 3089 to 3090=> "0000", 3091 => "0010", 3092 to 3093=> "0000", 3094 => "1111", 
    3095 => "1110", 3096 to 3097=> "0000", 3098 => "0011", 3099 to 3101=> "0000", 3102 => "0010", 
    3103 => "0000", 3104 => "0001", 3105 => "0011", 3106 => "1101", 3107 => "0001", 
    3108 => "0000", 3109 => "0001", 3110 => "1101", 3111 to 3113=> "0000", 3114 => "1111", 
    3115 => "1101", 3116 => "0010", 3117 => "1110", 3118 to 3120=> "0000", 3121 => "0001", 
    3122 to 3124=> "0000", 3125 => "1111", 3126 => "0001", 3127 => "0000", 3128 => "1011", 
    3129 => "0000", 3130 => "0111", 3131 to 3132=> "0010", 3133 to 3137=> "0000", 3138 => "0010", 
    3139 to 3143=> "0000", 3144 => "0001", 3145 => "1111", 3146 to 3149=> "0000", 3150 => "1111", 
    3151 => "0000", 3152 => "1101", 3153 to 3154=> "0000", 3155 => "1111", 3156 => "0000", 
    3157 => "1101", 3158 to 3159=> "0000", 3160 => "0010", 3161 => "0000", 3162 => "0001", 
    3163 => "0000", 3164 => "1110", 3165 to 3166=> "0000", 3167 => "1111", 3168 to 3170=> "0000", 
    3171 => "0010", 3172 => "0000", 3173 => "1100", 3174 => "0000", 3175 => "0010", 
    3176 => "1101", 3177 to 3179=> "0000", 3180 => "0010", 3181 to 3189=> "0000", 3190 => "0010", 
    3191 => "1101", 3192 => "0000", 3193 => "1111", 3194 to 3195=> "0000", 3196 => "1111", 
    3197 => "0000", 3198 => "0101", 3199 to 3839=> "0000", 3840 => "1111", 3841 => "0010", 
    3842 to 3846=> "0000", 3847 => "1111", 3848 to 3851=> "0000", 3852 => "0001", 3853 to 3856=> "0000", 
    3857 to 3858=> "0011", 3859 => "1110", 3860 to 3861=> "0000", 3862 => "0001", 3863 => "0010", 
    3864 to 3865=> "0000", 3866 => "0001", 3867 to 3869=> "0000", 3870 => "1111", 3871 to 3872=> "0000", 
    3873 => "0010", 3874 => "0000", 3875 => "1110", 3876 => "0000", 3877 => "1110", 
    3878 => "1101", 3879 to 3881=> "0000", 3882 => "1110", 3883 => "0010", 3884 => "0001", 
    3885 => "1101", 3886 to 3893=> "0000", 3894 => "0010", 3895 => "0000", 3896 => "1111", 
    3897 => "0000", 3898 => "0001", 3899 => "1111", 3900 => "0011", 3901 to 3905=> "0000", 
    3906 => "1111", 3907 to 3911=> "0000", 3912 => "1110", 3913 => "1111", 3914 to 3916=> "0000", 
    3917 => "0010", 3918 to 3919=> "0000", 3920 => "0010", 3921 to 3922=> "0000", 3923 => "0011", 
    3924 => "0000", 3925 => "0001", 3926 to 3927=> "0000", 3928 => "0001", 3929 to 3931=> "0000", 
    3932 => "0011", 3933 to 3934=> "0000", 3935 => "0001", 3936 => "1111", 3937 to 3938=> "0000", 
    3939 => "0011", 3940 to 3941=> "0000", 3942 => "0011", 3943 => "0000", 3944 => "0011", 
    3945 to 3957=> "0000", 3958 => "1111", 3959 => "1110", 3960 => "0000", 3961 => "1111", 
    3962 to 3963=> "0000", 3964 => "1111", 3965 to 4095=> "0000" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;


Library IEEE;
use IEEE.std_logic_1164.all;

entity Conv1DMac_new403_Mgi is
    generic (
        DataWidth : INTEGER := 4;
        AddressRange : INTEGER := 4096;
        AddressWidth : INTEGER := 12);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of Conv1DMac_new403_Mgi is
    component Conv1DMac_new403_Mgi_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    Conv1DMac_new403_Mgi_rom_U :  component Conv1DMac_new403_Mgi_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


