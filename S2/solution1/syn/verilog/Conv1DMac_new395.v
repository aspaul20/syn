// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module Conv1DMac_new395 (
        ap_clk,
        ap_rst,
        ap_start,
        start_full_n,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        start_out,
        start_write,
        in_V_V_dout,
        in_V_V_empty_n,
        in_V_V_read,
        out_V_V_din,
        out_V_V_full_n,
        out_V_V_write
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_pp0_stage0 = 3'd2;
parameter    ap_ST_fsm_state7 = 3'd4;

input   ap_clk;
input   ap_rst;
input   ap_start;
input   start_full_n;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output   start_out;
output   start_write;
input  [7:0] in_V_V_dout;
input   in_V_V_empty_n;
output   in_V_V_read;
output  [31:0] out_V_V_din;
input   out_V_V_full_n;
output   out_V_V_write;

reg ap_done;
reg ap_idle;
reg start_write;
reg in_V_V_read;
reg out_V_V_write;

reg    real_start;
reg    start_once_reg;
reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    internal_ap_ready;
wire   [11:0] weights6_m_weights_V_address0;
reg    weights6_m_weights_V_ce0;
wire   [5:0] weights6_m_weights_V_q0;
wire   [11:0] weights6_m_weights_V_1_address0;
reg    weights6_m_weights_V_1_ce0;
wire   [6:0] weights6_m_weights_V_1_q0;
wire   [11:0] weights6_m_weights_V_2_address0;
reg    weights6_m_weights_V_2_ce0;
wire   [6:0] weights6_m_weights_V_2_q0;
wire   [11:0] weights6_m_weights_V_3_address0;
reg    weights6_m_weights_V_3_ce0;
wire   [6:0] weights6_m_weights_V_3_q0;
reg    in_V_V_blk_n;
reg    ap_enable_reg_pp0_iter2;
wire    ap_block_pp0_stage0;
reg   [0:0] exitcond_flatten5_reg_1189;
reg   [0:0] exitcond_flatten5_reg_1189_pp0_iter1_reg;
reg    out_V_V_blk_n;
reg    ap_enable_reg_pp0_iter4;
reg   [0:0] tmp_82_reg_1216;
reg   [0:0] tmp_82_reg_1216_pp0_iter3_reg;
reg   [23:0] indvar_flatten5_reg_217;
reg   [13:0] indvar_flatten_reg_228;
reg   [5:0] nm_reg_239;
reg   [7:0] sf_reg_250;
wire   [0:0] exitcond_flatten5_fu_293_p2;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_block_state2_pp0_stage0_iter0;
wire    ap_block_state3_pp0_stage0_iter1;
reg    ap_block_state4_pp0_stage0_iter2;
wire    ap_block_state5_pp0_stage0_iter3;
reg    ap_block_state6_pp0_stage0_iter4;
reg    ap_block_pp0_stage0_11001;
wire   [23:0] indvar_flatten_next5_fu_299_p2;
reg    ap_enable_reg_pp0_iter0;
wire   [4:0] nm_t_mid2_fu_393_p3;
reg   [4:0] nm_t_mid2_reg_1198;
reg   [4:0] nm_t_mid2_reg_1198_pp0_iter1_reg;
reg   [4:0] nm_t_mid2_reg_1198_pp0_iter2_reg;
wire   [5:0] nm_mid2_fu_401_p3;
wire   [11:0] tmp_68_fu_413_p2;
reg   [11:0] tmp_68_reg_1211;
wire   [0:0] tmp_82_fu_419_p2;
reg   [0:0] tmp_82_reg_1216_pp0_iter1_reg;
reg   [0:0] tmp_82_reg_1216_pp0_iter2_reg;
wire   [7:0] sf_1_fu_425_p2;
wire   [13:0] indvar_flatten_next_fu_437_p3;
reg   [6:0] tmp_s_reg_1250;
reg   [0:0] tmp_341_reg_1255;
wire   [0:0] tmp_74_fu_524_p2;
reg   [0:0] tmp_74_reg_1260;
reg   [7:0] tmp_90_reg_1265;
reg   [0:0] tmp_344_reg_1270;
wire   [0:0] tmp_203_1_fu_594_p2;
reg   [0:0] tmp_203_1_reg_1275;
reg   [7:0] tmp_91_reg_1280;
reg   [0:0] tmp_347_reg_1285;
wire   [0:0] tmp_203_2_fu_664_p2;
reg   [0:0] tmp_203_2_reg_1290;
reg   [7:0] tmp_92_reg_1295;
reg   [0:0] tmp_350_reg_1300;
wire   [0:0] tmp_203_3_fu_734_p2;
reg   [0:0] tmp_203_3_reg_1305;
wire   [7:0] p_Val2_7_fu_921_p2;
reg   [7:0] p_Val2_7_reg_1310;
wire   [7:0] p_Val2_20_1_fu_996_p2;
reg   [7:0] p_Val2_20_1_reg_1315;
wire   [7:0] p_Val2_20_2_fu_1071_p2;
reg   [7:0] p_Val2_20_2_reg_1320;
wire   [7:0] p_Val2_20_3_fu_1146_p2;
reg   [7:0] p_Val2_20_3_reg_1325;
reg    ap_block_state1;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state2;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter3;
wire   [63:0] tmp_69_fu_445_p1;
reg    ap_block_pp0_stage0_01001;
reg   [7:0] macRegisters_0_V_3_fu_136;
wire   [7:0] macRegisters_0_V_fu_769_p2;
reg   [7:0] macRegisters_1_V_3_fu_140;
wire   [7:0] macRegisters_1_V_fu_789_p2;
reg   [7:0] macRegisters_2_V_3_fu_144;
wire   [7:0] macRegisters_2_V_fu_808_p2;
reg   [7:0] macRegisters_3_V_3_fu_148;
wire   [7:0] macRegisters_3_V_fu_827_p2;
wire   [4:0] tmp_fu_281_p1;
wire   [0:0] exitcond_flatten_fu_305_p2;
wire   [11:0] tmp_65_fu_285_p3;
wire   [0:0] tmp_291_fu_341_p2;
wire   [0:0] not_exitcond_flatten_fu_335_p2;
wire   [5:0] nm_mid_fu_311_p3;
wire   [0:0] tmp_66_mid_fu_347_p2;
wire   [0:0] tmp_274_fu_359_p2;
wire   [5:0] nm_1_fu_353_p2;
wire   [4:0] tmp_339_fu_373_p1;
wire   [11:0] tmp_65_mid1_fu_377_p3;
wire   [11:0] tmp_65_mid_fu_319_p3;
wire   [4:0] nm_t_mid_fu_327_p3;
wire   [7:0] sf_mid2_fu_365_p3;
wire   [11:0] sf_cast1_fu_409_p1;
wire   [11:0] tmp_65_mid2_fu_385_p3;
wire   [13:0] indvar_flatten_op_fu_431_p2;
wire  signed [7:0] p_08_cast4_fu_452_p0;
wire  signed [7:0] p_08_cast4_cast_fu_456_p0;
wire  signed [5:0] p_Val2_s_fu_464_p0;
wire  signed [7:0] p_Val2_s_fu_464_p1;
wire   [13:0] p_Val2_s_fu_464_p2;
wire   [0:0] tmp_342_fu_496_p1;
wire   [0:0] tmp_340_fu_470_p3;
wire   [4:0] tmp_72_fu_506_p4;
wire   [0:0] tmp_71_fu_500_p2;
wire   [5:0] tmp_73_fu_516_p3;
wire  signed [6:0] p_Val2_1_fu_534_p0;
wire  signed [7:0] p_Val2_1_fu_534_p1;
wire  signed [14:0] p_08_cast4_fu_452_p1;
wire   [14:0] p_Val2_1_fu_534_p2;
wire   [0:0] tmp_345_fu_566_p1;
wire   [0:0] tmp_343_fu_540_p3;
wire   [4:0] tmp_78_fu_576_p4;
wire   [0:0] tmp_77_fu_570_p2;
wire   [5:0] tmp_79_fu_586_p3;
wire  signed [6:0] p_Val2_2_fu_604_p0;
wire  signed [7:0] p_Val2_2_fu_604_p1;
wire   [14:0] p_Val2_2_fu_604_p2;
wire   [0:0] tmp_348_fu_636_p1;
wire   [0:0] tmp_346_fu_610_p3;
wire   [4:0] tmp_83_fu_646_p4;
wire   [0:0] tmp_81_fu_640_p2;
wire   [5:0] tmp_84_fu_656_p3;
wire  signed [6:0] p_Val2_3_fu_674_p0;
wire  signed [7:0] p_Val2_3_fu_674_p1;
wire   [14:0] p_Val2_3_fu_674_p2;
wire   [0:0] tmp_351_fu_706_p1;
wire   [0:0] tmp_349_fu_680_p3;
wire   [4:0] tmp_87_fu_716_p4;
wire   [0:0] tmp_86_fu_710_p2;
wire   [5:0] tmp_88_fu_726_p3;
wire   [0:0] qb_assign_1_fu_755_p2;
wire   [7:0] tmp_75_fu_759_p1;
wire  signed [7:0] tmp_89_fu_752_p1;
wire   [7:0] tmp1_fu_763_p2;
wire   [0:0] qb_assign_1_1_fu_775_p2;
wire   [7:0] tmp_204_1_fu_779_p1;
wire   [7:0] tmp2_fu_783_p2;
wire   [0:0] qb_assign_1_2_fu_794_p2;
wire   [7:0] tmp_204_2_fu_798_p1;
wire   [7:0] tmp3_fu_802_p2;
wire   [0:0] qb_assign_1_3_fu_813_p2;
wire   [7:0] tmp_204_3_fu_817_p1;
wire   [7:0] tmp4_fu_821_p2;
wire   [7:0] tmp_93_fu_852_p34;
wire   [7:0] tmp_94_fu_927_p34;
wire   [7:0] tmp_95_fu_1002_p34;
wire   [7:0] tmp_96_fu_1077_p34;
wire    ap_CS_fsm_state7;
reg   [2:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;

// power-on initialization
initial begin
#0 start_once_reg = 1'b0;
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 3'd1;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
end

Conv1DMac_new395_udo #(
    .DataWidth( 6 ),
    .AddressRange( 4096 ),
    .AddressWidth( 12 ))
weights6_m_weights_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(weights6_m_weights_V_address0),
    .ce0(weights6_m_weights_V_ce0),
    .q0(weights6_m_weights_V_q0)
);

Conv1DMac_new395_vdy #(
    .DataWidth( 7 ),
    .AddressRange( 4096 ),
    .AddressWidth( 12 ))
weights6_m_weights_V_1_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(weights6_m_weights_V_1_address0),
    .ce0(weights6_m_weights_V_1_ce0),
    .q0(weights6_m_weights_V_1_q0)
);

Conv1DMac_new395_wdI #(
    .DataWidth( 7 ),
    .AddressRange( 4096 ),
    .AddressWidth( 12 ))
weights6_m_weights_V_2_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(weights6_m_weights_V_2_address0),
    .ce0(weights6_m_weights_V_2_ce0),
    .q0(weights6_m_weights_V_2_q0)
);

Conv1DMac_new395_xdS #(
    .DataWidth( 7 ),
    .AddressRange( 4096 ),
    .AddressWidth( 12 ))
weights6_m_weights_V_3_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(weights6_m_weights_V_3_address0),
    .ce0(weights6_m_weights_V_3_ce0),
    .q0(weights6_m_weights_V_3_q0)
);

computeS2_mux_325yd2 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 8 ),
    .din3_WIDTH( 8 ),
    .din4_WIDTH( 8 ),
    .din5_WIDTH( 8 ),
    .din6_WIDTH( 8 ),
    .din7_WIDTH( 8 ),
    .din8_WIDTH( 8 ),
    .din9_WIDTH( 8 ),
    .din10_WIDTH( 8 ),
    .din11_WIDTH( 8 ),
    .din12_WIDTH( 8 ),
    .din13_WIDTH( 8 ),
    .din14_WIDTH( 8 ),
    .din15_WIDTH( 8 ),
    .din16_WIDTH( 8 ),
    .din17_WIDTH( 8 ),
    .din18_WIDTH( 8 ),
    .din19_WIDTH( 8 ),
    .din20_WIDTH( 8 ),
    .din21_WIDTH( 8 ),
    .din22_WIDTH( 8 ),
    .din23_WIDTH( 8 ),
    .din24_WIDTH( 8 ),
    .din25_WIDTH( 8 ),
    .din26_WIDTH( 8 ),
    .din27_WIDTH( 8 ),
    .din28_WIDTH( 8 ),
    .din29_WIDTH( 8 ),
    .din30_WIDTH( 8 ),
    .din31_WIDTH( 8 ),
    .din32_WIDTH( 5 ),
    .dout_WIDTH( 8 ))
computeS2_mux_325yd2_U29(
    .din0(8'd0),
    .din1(8'd0),
    .din2(8'd254),
    .din3(8'd0),
    .din4(8'd0),
    .din5(8'd1),
    .din6(8'd255),
    .din7(8'd0),
    .din8(8'd0),
    .din9(8'd255),
    .din10(8'd0),
    .din11(8'd0),
    .din12(8'd255),
    .din13(8'd0),
    .din14(8'd0),
    .din15(8'd255),
    .din16(8'd0),
    .din17(8'd0),
    .din18(8'd0),
    .din19(8'd0),
    .din20(8'd0),
    .din21(8'd0),
    .din22(8'd1),
    .din23(8'd0),
    .din24(8'd0),
    .din25(8'd255),
    .din26(8'd0),
    .din27(8'd0),
    .din28(8'd0),
    .din29(8'd0),
    .din30(8'd255),
    .din31(8'd0),
    .din32(nm_t_mid2_reg_1198_pp0_iter2_reg),
    .dout(tmp_93_fu_852_p34)
);

computeS2_mux_325yd2 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 8 ),
    .din3_WIDTH( 8 ),
    .din4_WIDTH( 8 ),
    .din5_WIDTH( 8 ),
    .din6_WIDTH( 8 ),
    .din7_WIDTH( 8 ),
    .din8_WIDTH( 8 ),
    .din9_WIDTH( 8 ),
    .din10_WIDTH( 8 ),
    .din11_WIDTH( 8 ),
    .din12_WIDTH( 8 ),
    .din13_WIDTH( 8 ),
    .din14_WIDTH( 8 ),
    .din15_WIDTH( 8 ),
    .din16_WIDTH( 8 ),
    .din17_WIDTH( 8 ),
    .din18_WIDTH( 8 ),
    .din19_WIDTH( 8 ),
    .din20_WIDTH( 8 ),
    .din21_WIDTH( 8 ),
    .din22_WIDTH( 8 ),
    .din23_WIDTH( 8 ),
    .din24_WIDTH( 8 ),
    .din25_WIDTH( 8 ),
    .din26_WIDTH( 8 ),
    .din27_WIDTH( 8 ),
    .din28_WIDTH( 8 ),
    .din29_WIDTH( 8 ),
    .din30_WIDTH( 8 ),
    .din31_WIDTH( 8 ),
    .din32_WIDTH( 5 ),
    .dout_WIDTH( 8 ))
computeS2_mux_325yd2_U30(
    .din0(8'd0),
    .din1(8'd1),
    .din2(8'd254),
    .din3(8'd255),
    .din4(8'd254),
    .din5(8'd0),
    .din6(8'd0),
    .din7(8'd0),
    .din8(8'd0),
    .din9(8'd0),
    .din10(8'd0),
    .din11(8'd255),
    .din12(8'd0),
    .din13(8'd0),
    .din14(8'd255),
    .din15(8'd0),
    .din16(8'd0),
    .din17(8'd255),
    .din18(8'd255),
    .din19(8'd255),
    .din20(8'd255),
    .din21(8'd255),
    .din22(8'd254),
    .din23(8'd0),
    .din24(8'd0),
    .din25(8'd255),
    .din26(8'd254),
    .din27(8'd0),
    .din28(8'd0),
    .din29(8'd0),
    .din30(8'd0),
    .din31(8'd0),
    .din32(nm_t_mid2_reg_1198_pp0_iter2_reg),
    .dout(tmp_94_fu_927_p34)
);

computeS2_mux_325yd2 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 8 ),
    .din3_WIDTH( 8 ),
    .din4_WIDTH( 8 ),
    .din5_WIDTH( 8 ),
    .din6_WIDTH( 8 ),
    .din7_WIDTH( 8 ),
    .din8_WIDTH( 8 ),
    .din9_WIDTH( 8 ),
    .din10_WIDTH( 8 ),
    .din11_WIDTH( 8 ),
    .din12_WIDTH( 8 ),
    .din13_WIDTH( 8 ),
    .din14_WIDTH( 8 ),
    .din15_WIDTH( 8 ),
    .din16_WIDTH( 8 ),
    .din17_WIDTH( 8 ),
    .din18_WIDTH( 8 ),
    .din19_WIDTH( 8 ),
    .din20_WIDTH( 8 ),
    .din21_WIDTH( 8 ),
    .din22_WIDTH( 8 ),
    .din23_WIDTH( 8 ),
    .din24_WIDTH( 8 ),
    .din25_WIDTH( 8 ),
    .din26_WIDTH( 8 ),
    .din27_WIDTH( 8 ),
    .din28_WIDTH( 8 ),
    .din29_WIDTH( 8 ),
    .din30_WIDTH( 8 ),
    .din31_WIDTH( 8 ),
    .din32_WIDTH( 5 ),
    .dout_WIDTH( 8 ))
computeS2_mux_325yd2_U31(
    .din0(8'd0),
    .din1(8'd0),
    .din2(8'd0),
    .din3(8'd0),
    .din4(8'd255),
    .din5(8'd0),
    .din6(8'd0),
    .din7(8'd0),
    .din8(8'd255),
    .din9(8'd0),
    .din10(8'd0),
    .din11(8'd0),
    .din12(8'd0),
    .din13(8'd0),
    .din14(8'd0),
    .din15(8'd255),
    .din16(8'd0),
    .din17(8'd0),
    .din18(8'd254),
    .din19(8'd0),
    .din20(8'd0),
    .din21(8'd0),
    .din22(8'd0),
    .din23(8'd255),
    .din24(8'd0),
    .din25(8'd0),
    .din26(8'd0),
    .din27(8'd0),
    .din28(8'd0),
    .din29(8'd0),
    .din30(8'd0),
    .din31(8'd0),
    .din32(nm_t_mid2_reg_1198_pp0_iter2_reg),
    .dout(tmp_95_fu_1002_p34)
);

computeS2_mux_325yd2 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 8 ),
    .din3_WIDTH( 8 ),
    .din4_WIDTH( 8 ),
    .din5_WIDTH( 8 ),
    .din6_WIDTH( 8 ),
    .din7_WIDTH( 8 ),
    .din8_WIDTH( 8 ),
    .din9_WIDTH( 8 ),
    .din10_WIDTH( 8 ),
    .din11_WIDTH( 8 ),
    .din12_WIDTH( 8 ),
    .din13_WIDTH( 8 ),
    .din14_WIDTH( 8 ),
    .din15_WIDTH( 8 ),
    .din16_WIDTH( 8 ),
    .din17_WIDTH( 8 ),
    .din18_WIDTH( 8 ),
    .din19_WIDTH( 8 ),
    .din20_WIDTH( 8 ),
    .din21_WIDTH( 8 ),
    .din22_WIDTH( 8 ),
    .din23_WIDTH( 8 ),
    .din24_WIDTH( 8 ),
    .din25_WIDTH( 8 ),
    .din26_WIDTH( 8 ),
    .din27_WIDTH( 8 ),
    .din28_WIDTH( 8 ),
    .din29_WIDTH( 8 ),
    .din30_WIDTH( 8 ),
    .din31_WIDTH( 8 ),
    .din32_WIDTH( 5 ),
    .dout_WIDTH( 8 ))
computeS2_mux_325yd2_U32(
    .din0(8'd0),
    .din1(8'd0),
    .din2(8'd0),
    .din3(8'd0),
    .din4(8'd0),
    .din5(8'd254),
    .din6(8'd0),
    .din7(8'd255),
    .din8(8'd1),
    .din9(8'd255),
    .din10(8'd255),
    .din11(8'd0),
    .din12(8'd0),
    .din13(8'd0),
    .din14(8'd0),
    .din15(8'd0),
    .din16(8'd0),
    .din17(8'd0),
    .din18(8'd0),
    .din19(8'd255),
    .din20(8'd0),
    .din21(8'd0),
    .din22(8'd255),
    .din23(8'd0),
    .din24(8'd0),
    .din25(8'd0),
    .din26(8'd255),
    .din27(8'd255),
    .din28(8'd0),
    .din29(8'd0),
    .din30(8'd0),
    .din31(8'd0),
    .din32(nm_t_mid2_reg_1198_pp0_iter2_reg),
    .dout(tmp_96_fu_1077_p34)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state7)) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state2) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state2)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state2);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter4 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((internal_ap_ready == 1'b0) & (real_start == 1'b1))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_flatten5_fu_293_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        indvar_flatten5_reg_217 <= indvar_flatten_next5_fu_299_p2;
    end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        indvar_flatten5_reg_217 <= 24'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_flatten5_fu_293_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        indvar_flatten_reg_228 <= indvar_flatten_next_fu_437_p3;
    end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        indvar_flatten_reg_228 <= 14'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_82_reg_1216_pp0_iter2_reg == 1'd0) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        macRegisters_0_V_3_fu_136 <= macRegisters_0_V_fu_769_p2;
    end else if (((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1)) | ((tmp_82_reg_1216_pp0_iter2_reg == 1'd1) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001)))) begin
        macRegisters_0_V_3_fu_136 <= 8'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_82_reg_1216_pp0_iter2_reg == 1'd0) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        macRegisters_1_V_3_fu_140 <= macRegisters_1_V_fu_789_p2;
    end else if (((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1)) | ((tmp_82_reg_1216_pp0_iter2_reg == 1'd1) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001)))) begin
        macRegisters_1_V_3_fu_140 <= 8'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_82_reg_1216_pp0_iter2_reg == 1'd0) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        macRegisters_2_V_3_fu_144 <= macRegisters_2_V_fu_808_p2;
    end else if (((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1)) | ((tmp_82_reg_1216_pp0_iter2_reg == 1'd1) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001)))) begin
        macRegisters_2_V_3_fu_144 <= 8'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_82_reg_1216_pp0_iter2_reg == 1'd0) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        macRegisters_3_V_3_fu_148 <= macRegisters_3_V_fu_827_p2;
    end else if (((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1)) | ((tmp_82_reg_1216_pp0_iter2_reg == 1'd1) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001)))) begin
        macRegisters_3_V_3_fu_148 <= 8'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_flatten5_fu_293_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        nm_reg_239 <= nm_mid2_fu_401_p3;
    end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        nm_reg_239 <= 6'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_flatten5_fu_293_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        sf_reg_250 <= sf_1_fu_425_p2;
    end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        sf_reg_250 <= 8'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        exitcond_flatten5_reg_1189 <= exitcond_flatten5_fu_293_p2;
        exitcond_flatten5_reg_1189_pp0_iter1_reg <= exitcond_flatten5_reg_1189;
        nm_t_mid2_reg_1198_pp0_iter1_reg <= nm_t_mid2_reg_1198;
        tmp_82_reg_1216_pp0_iter1_reg <= tmp_82_reg_1216;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_flatten5_fu_293_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        nm_t_mid2_reg_1198 <= nm_t_mid2_fu_393_p3;
        tmp_68_reg_1211 <= tmp_68_fu_413_p2;
        tmp_82_reg_1216 <= tmp_82_fu_419_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        nm_t_mid2_reg_1198_pp0_iter2_reg <= nm_t_mid2_reg_1198_pp0_iter1_reg;
        tmp_82_reg_1216_pp0_iter2_reg <= tmp_82_reg_1216_pp0_iter1_reg;
        tmp_82_reg_1216_pp0_iter3_reg <= tmp_82_reg_1216_pp0_iter2_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_82_reg_1216_pp0_iter2_reg == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        p_Val2_20_1_reg_1315 <= p_Val2_20_1_fu_996_p2;
        p_Val2_20_2_reg_1320 <= p_Val2_20_2_fu_1071_p2;
        p_Val2_20_3_reg_1325 <= p_Val2_20_3_fu_1146_p2;
        p_Val2_7_reg_1310 <= p_Val2_7_fu_921_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_flatten5_reg_1189_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        tmp_203_1_reg_1275 <= tmp_203_1_fu_594_p2;
        tmp_203_2_reg_1290 <= tmp_203_2_fu_664_p2;
        tmp_203_3_reg_1305 <= tmp_203_3_fu_734_p2;
        tmp_341_reg_1255 <= p_Val2_s_fu_464_p2[32'd6];
        tmp_344_reg_1270 <= p_Val2_1_fu_534_p2[32'd6];
        tmp_347_reg_1285 <= p_Val2_2_fu_604_p2[32'd6];
        tmp_350_reg_1300 <= p_Val2_3_fu_674_p2[32'd6];
        tmp_74_reg_1260 <= tmp_74_fu_524_p2;
        tmp_90_reg_1265 <= {{p_Val2_1_fu_534_p2[14:7]}};
        tmp_91_reg_1280 <= {{p_Val2_2_fu_604_p2[14:7]}};
        tmp_92_reg_1295 <= {{p_Val2_3_fu_674_p2[14:7]}};
        tmp_s_reg_1250 <= {{p_Val2_s_fu_464_p2[13:7]}};
    end
end

always @ (*) begin
    if ((exitcond_flatten5_fu_293_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((real_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond_flatten5_reg_1189_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        in_V_V_blk_n = in_V_V_empty_n;
    end else begin
        in_V_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((exitcond_flatten5_reg_1189_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        in_V_V_read = 1'b1;
    end else begin
        in_V_V_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        internal_ap_ready = 1'b1;
    end else begin
        internal_ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_82_reg_1216_pp0_iter3_reg == 1'd1) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        out_V_V_blk_n = out_V_V_full_n;
    end else begin
        out_V_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((tmp_82_reg_1216_pp0_iter3_reg == 1'd1) & (ap_enable_reg_pp0_iter4 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        out_V_V_write = 1'b1;
    end else begin
        out_V_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (start_full_n == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (real_start == 1'b1))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        weights6_m_weights_V_1_ce0 = 1'b1;
    end else begin
        weights6_m_weights_V_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        weights6_m_weights_V_2_ce0 = 1'b1;
    end else begin
        weights6_m_weights_V_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        weights6_m_weights_V_3_ce0 = 1'b1;
    end else begin
        weights6_m_weights_V_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        weights6_m_weights_V_ce0 = 1'b1;
    end else begin
        weights6_m_weights_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((exitcond_flatten5_fu_293_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1)) & ~((ap_enable_reg_pp0_iter3 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter4 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((ap_enable_reg_pp0_iter3 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter4 == 1'b1)) | ((exitcond_flatten5_fu_293_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd2];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = (((tmp_82_reg_1216_pp0_iter3_reg == 1'd1) & (out_V_V_full_n == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b1)) | ((exitcond_flatten5_reg_1189_pp0_iter1_reg == 1'd0) & (in_V_V_empty_n == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((tmp_82_reg_1216_pp0_iter3_reg == 1'd1) & (out_V_V_full_n == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b1)) | ((exitcond_flatten5_reg_1189_pp0_iter1_reg == 1'd0) & (in_V_V_empty_n == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((tmp_82_reg_1216_pp0_iter3_reg == 1'd1) & (out_V_V_full_n == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b1)) | ((exitcond_flatten5_reg_1189_pp0_iter1_reg == 1'd0) & (in_V_V_empty_n == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1)));
end

always @ (*) begin
    ap_block_state1 = ((real_start == 1'b0) | (ap_done_reg == 1'b1));
end

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state4_pp0_stage0_iter2 = ((exitcond_flatten5_reg_1189_pp0_iter1_reg == 1'd0) & (in_V_V_empty_n == 1'b0));
end

assign ap_block_state5_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state6_pp0_stage0_iter4 = ((tmp_82_reg_1216_pp0_iter3_reg == 1'd1) & (out_V_V_full_n == 1'b0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_ready = internal_ap_ready;

assign exitcond_flatten5_fu_293_p2 = ((indvar_flatten5_reg_217 == 24'd8388608) ? 1'b1 : 1'b0);

assign exitcond_flatten_fu_305_p2 = ((indvar_flatten_reg_228 == 14'd4096) ? 1'b1 : 1'b0);

assign indvar_flatten_next5_fu_299_p2 = (24'd1 + indvar_flatten5_reg_217);

assign indvar_flatten_next_fu_437_p3 = ((exitcond_flatten_fu_305_p2[0:0] === 1'b1) ? 14'd1 : indvar_flatten_op_fu_431_p2);

assign indvar_flatten_op_fu_431_p2 = (indvar_flatten_reg_228 + 14'd1);

assign macRegisters_0_V_fu_769_p2 = ($signed(tmp_89_fu_752_p1) + $signed(tmp1_fu_763_p2));

assign macRegisters_1_V_fu_789_p2 = (tmp_90_reg_1265 + tmp2_fu_783_p2);

assign macRegisters_2_V_fu_808_p2 = (tmp_91_reg_1280 + tmp3_fu_802_p2);

assign macRegisters_3_V_fu_827_p2 = (tmp_92_reg_1295 + tmp4_fu_821_p2);

assign nm_1_fu_353_p2 = (6'd1 + nm_mid_fu_311_p3);

assign nm_mid2_fu_401_p3 = ((tmp_66_mid_fu_347_p2[0:0] === 1'b1) ? nm_1_fu_353_p2 : nm_mid_fu_311_p3);

assign nm_mid_fu_311_p3 = ((exitcond_flatten_fu_305_p2[0:0] === 1'b1) ? 6'd0 : nm_reg_239);

assign nm_t_mid2_fu_393_p3 = ((tmp_66_mid_fu_347_p2[0:0] === 1'b1) ? tmp_339_fu_373_p1 : nm_t_mid_fu_327_p3);

assign nm_t_mid_fu_327_p3 = ((exitcond_flatten_fu_305_p2[0:0] === 1'b1) ? 5'd0 : tmp_fu_281_p1);

assign not_exitcond_flatten_fu_335_p2 = (exitcond_flatten_fu_305_p2 ^ 1'd1);

assign out_V_V_din = {{{{p_Val2_20_3_reg_1325}, {p_Val2_20_2_reg_1320}}, {p_Val2_20_1_reg_1315}}, {p_Val2_7_reg_1310}};

assign p_08_cast4_cast_fu_456_p0 = in_V_V_dout;

assign p_08_cast4_fu_452_p0 = in_V_V_dout;

assign p_08_cast4_fu_452_p1 = p_08_cast4_fu_452_p0;

assign p_Val2_1_fu_534_p0 = weights6_m_weights_V_1_q0;

assign p_Val2_1_fu_534_p1 = p_08_cast4_fu_452_p1;

assign p_Val2_1_fu_534_p2 = ($signed(p_Val2_1_fu_534_p0) * $signed(p_Val2_1_fu_534_p1));

assign p_Val2_20_1_fu_996_p2 = (macRegisters_1_V_fu_789_p2 + tmp_94_fu_927_p34);

assign p_Val2_20_2_fu_1071_p2 = (macRegisters_2_V_fu_808_p2 + tmp_95_fu_1002_p34);

assign p_Val2_20_3_fu_1146_p2 = (macRegisters_3_V_fu_827_p2 + tmp_96_fu_1077_p34);

assign p_Val2_2_fu_604_p0 = weights6_m_weights_V_2_q0;

assign p_Val2_2_fu_604_p1 = p_08_cast4_fu_452_p1;

assign p_Val2_2_fu_604_p2 = ($signed(p_Val2_2_fu_604_p0) * $signed(p_Val2_2_fu_604_p1));

assign p_Val2_3_fu_674_p0 = weights6_m_weights_V_3_q0;

assign p_Val2_3_fu_674_p1 = p_08_cast4_fu_452_p1;

assign p_Val2_3_fu_674_p2 = ($signed(p_Val2_3_fu_674_p0) * $signed(p_Val2_3_fu_674_p1));

assign p_Val2_7_fu_921_p2 = (macRegisters_0_V_fu_769_p2 + tmp_93_fu_852_p34);

assign p_Val2_s_fu_464_p0 = weights6_m_weights_V_q0;

assign p_Val2_s_fu_464_p1 = p_08_cast4_cast_fu_456_p0;

assign p_Val2_s_fu_464_p2 = ($signed(p_Val2_s_fu_464_p0) * $signed(p_Val2_s_fu_464_p1));

assign qb_assign_1_1_fu_775_p2 = (tmp_344_reg_1270 & tmp_203_1_reg_1275);

assign qb_assign_1_2_fu_794_p2 = (tmp_347_reg_1285 & tmp_203_2_reg_1290);

assign qb_assign_1_3_fu_813_p2 = (tmp_350_reg_1300 & tmp_203_3_reg_1305);

assign qb_assign_1_fu_755_p2 = (tmp_74_reg_1260 & tmp_341_reg_1255);

assign sf_1_fu_425_p2 = (sf_mid2_fu_365_p3 + 8'd1);

assign sf_cast1_fu_409_p1 = sf_mid2_fu_365_p3;

assign sf_mid2_fu_365_p3 = ((tmp_274_fu_359_p2[0:0] === 1'b1) ? 8'd0 : sf_reg_250);

assign start_out = real_start;

assign tmp1_fu_763_p2 = (tmp_75_fu_759_p1 + macRegisters_0_V_3_fu_136);

assign tmp2_fu_783_p2 = (tmp_204_1_fu_779_p1 + macRegisters_1_V_3_fu_140);

assign tmp3_fu_802_p2 = (tmp_204_2_fu_798_p1 + macRegisters_2_V_3_fu_144);

assign tmp4_fu_821_p2 = (tmp_204_3_fu_817_p1 + macRegisters_3_V_3_fu_148);

assign tmp_203_1_fu_594_p2 = ((tmp_79_fu_586_p3 != 6'd0) ? 1'b1 : 1'b0);

assign tmp_203_2_fu_664_p2 = ((tmp_84_fu_656_p3 != 6'd0) ? 1'b1 : 1'b0);

assign tmp_203_3_fu_734_p2 = ((tmp_88_fu_726_p3 != 6'd0) ? 1'b1 : 1'b0);

assign tmp_204_1_fu_779_p1 = qb_assign_1_1_fu_775_p2;

assign tmp_204_2_fu_798_p1 = qb_assign_1_2_fu_794_p2;

assign tmp_204_3_fu_817_p1 = qb_assign_1_3_fu_813_p2;

assign tmp_274_fu_359_p2 = (tmp_66_mid_fu_347_p2 | exitcond_flatten_fu_305_p2);

assign tmp_291_fu_341_p2 = ((sf_reg_250 == 8'd128) ? 1'b1 : 1'b0);

assign tmp_339_fu_373_p1 = nm_1_fu_353_p2[4:0];

assign tmp_340_fu_470_p3 = p_Val2_s_fu_464_p2[32'd13];

assign tmp_342_fu_496_p1 = p_Val2_s_fu_464_p2[0:0];

assign tmp_343_fu_540_p3 = p_Val2_1_fu_534_p2[32'd14];

assign tmp_345_fu_566_p1 = p_Val2_1_fu_534_p2[0:0];

assign tmp_346_fu_610_p3 = p_Val2_2_fu_604_p2[32'd14];

assign tmp_348_fu_636_p1 = p_Val2_2_fu_604_p2[0:0];

assign tmp_349_fu_680_p3 = p_Val2_3_fu_674_p2[32'd14];

assign tmp_351_fu_706_p1 = p_Val2_3_fu_674_p2[0:0];

assign tmp_65_fu_285_p3 = {{tmp_fu_281_p1}, {7'd0}};

assign tmp_65_mid1_fu_377_p3 = {{tmp_339_fu_373_p1}, {7'd0}};

assign tmp_65_mid2_fu_385_p3 = ((tmp_66_mid_fu_347_p2[0:0] === 1'b1) ? tmp_65_mid1_fu_377_p3 : tmp_65_mid_fu_319_p3);

assign tmp_65_mid_fu_319_p3 = ((exitcond_flatten_fu_305_p2[0:0] === 1'b1) ? 12'd0 : tmp_65_fu_285_p3);

assign tmp_66_mid_fu_347_p2 = (tmp_291_fu_341_p2 & not_exitcond_flatten_fu_335_p2);

assign tmp_68_fu_413_p2 = (sf_cast1_fu_409_p1 + tmp_65_mid2_fu_385_p3);

assign tmp_69_fu_445_p1 = tmp_68_reg_1211;

assign tmp_71_fu_500_p2 = (tmp_342_fu_496_p1 | tmp_340_fu_470_p3);

assign tmp_72_fu_506_p4 = {{p_Val2_s_fu_464_p2[5:1]}};

assign tmp_73_fu_516_p3 = {{tmp_72_fu_506_p4}, {tmp_71_fu_500_p2}};

assign tmp_74_fu_524_p2 = ((tmp_73_fu_516_p3 != 6'd0) ? 1'b1 : 1'b0);

assign tmp_75_fu_759_p1 = qb_assign_1_fu_755_p2;

assign tmp_77_fu_570_p2 = (tmp_345_fu_566_p1 | tmp_343_fu_540_p3);

assign tmp_78_fu_576_p4 = {{p_Val2_1_fu_534_p2[5:1]}};

assign tmp_79_fu_586_p3 = {{tmp_78_fu_576_p4}, {tmp_77_fu_570_p2}};

assign tmp_81_fu_640_p2 = (tmp_348_fu_636_p1 | tmp_346_fu_610_p3);

assign tmp_82_fu_419_p2 = ((sf_mid2_fu_365_p3 == 8'd127) ? 1'b1 : 1'b0);

assign tmp_83_fu_646_p4 = {{p_Val2_2_fu_604_p2[5:1]}};

assign tmp_84_fu_656_p3 = {{tmp_83_fu_646_p4}, {tmp_81_fu_640_p2}};

assign tmp_86_fu_710_p2 = (tmp_351_fu_706_p1 | tmp_349_fu_680_p3);

assign tmp_87_fu_716_p4 = {{p_Val2_3_fu_674_p2[5:1]}};

assign tmp_88_fu_726_p3 = {{tmp_87_fu_716_p4}, {tmp_86_fu_710_p2}};

assign tmp_89_fu_752_p1 = $signed(tmp_s_reg_1250);

assign tmp_fu_281_p1 = nm_reg_239[4:0];

assign weights6_m_weights_V_1_address0 = tmp_69_fu_445_p1;

assign weights6_m_weights_V_2_address0 = tmp_69_fu_445_p1;

assign weights6_m_weights_V_3_address0 = tmp_69_fu_445_p1;

assign weights6_m_weights_V_address0 = tmp_69_fu_445_p1;

endmodule //Conv1DMac_new395
