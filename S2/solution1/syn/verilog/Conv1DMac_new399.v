// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module Conv1DMac_new399 (
        ap_clk,
        ap_rst,
        ap_start,
        start_full_n,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        start_out,
        start_write,
        in_V_V_dout,
        in_V_V_empty_n,
        in_V_V_read,
        out_V_V_din,
        out_V_V_full_n,
        out_V_V_write
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_pp0_stage0 = 3'd2;
parameter    ap_ST_fsm_state7 = 3'd4;

input   ap_clk;
input   ap_rst;
input   ap_start;
input   start_full_n;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output   start_out;
output   start_write;
input  [7:0] in_V_V_dout;
input   in_V_V_empty_n;
output   in_V_V_read;
output  [31:0] out_V_V_din;
input   out_V_V_full_n;
output   out_V_V_write;

reg ap_done;
reg ap_idle;
reg start_write;
reg in_V_V_read;
reg out_V_V_write;

reg    real_start;
reg    start_once_reg;
reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    internal_ap_ready;
wire   [11:0] weights7_m_weights_V_address0;
reg    weights7_m_weights_V_ce0;
wire   [6:0] weights7_m_weights_V_q0;
wire   [11:0] weights7_m_weights_V_1_address0;
reg    weights7_m_weights_V_1_ce0;
wire   [7:0] weights7_m_weights_V_1_q0;
wire   [11:0] weights7_m_weights_V_2_address0;
reg    weights7_m_weights_V_2_ce0;
wire   [6:0] weights7_m_weights_V_2_q0;
wire   [11:0] weights7_m_weights_V_3_address0;
reg    weights7_m_weights_V_3_ce0;
wire   [7:0] weights7_m_weights_V_3_q0;
reg    in_V_V_blk_n;
reg    ap_enable_reg_pp0_iter2;
wire    ap_block_pp0_stage0;
reg   [0:0] exitcond_flatten4_reg_1225;
reg   [0:0] exitcond_flatten4_reg_1225_pp0_iter1_reg;
reg    out_V_V_blk_n;
reg    ap_enable_reg_pp0_iter4;
reg   [0:0] tmp_62_reg_1252;
reg   [0:0] tmp_62_reg_1252_pp0_iter3_reg;
reg   [23:0] indvar_flatten4_reg_257;
reg   [13:0] indvar_flatten_reg_268;
reg   [5:0] nm_reg_279;
reg   [7:0] sf_reg_290;
wire   [0:0] exitcond_flatten4_fu_333_p2;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_block_state2_pp0_stage0_iter0;
wire    ap_block_state3_pp0_stage0_iter1;
reg    ap_block_state4_pp0_stage0_iter2;
wire    ap_block_state5_pp0_stage0_iter3;
reg    ap_block_state6_pp0_stage0_iter4;
reg    ap_block_pp0_stage0_11001;
wire   [23:0] indvar_flatten_next4_fu_339_p2;
reg    ap_enable_reg_pp0_iter0;
wire   [4:0] nm_t_mid2_fu_433_p3;
reg   [4:0] nm_t_mid2_reg_1234;
reg   [4:0] nm_t_mid2_reg_1234_pp0_iter1_reg;
reg   [4:0] nm_t_mid2_reg_1234_pp0_iter2_reg;
wire   [5:0] nm_mid2_fu_441_p3;
wire   [11:0] tmp_42_fu_453_p2;
reg   [11:0] tmp_42_reg_1247;
wire   [0:0] tmp_62_fu_459_p2;
reg   [0:0] tmp_62_reg_1252_pp0_iter1_reg;
reg   [0:0] tmp_62_reg_1252_pp0_iter2_reg;
wire   [7:0] sf_1_fu_465_p2;
wire   [13:0] indvar_flatten_next_fu_477_p3;
reg   [7:0] tmp_s_reg_1286;
reg   [0:0] tmp_328_reg_1291;
wire   [0:0] tmp_48_fu_564_p2;
reg   [0:0] tmp_48_reg_1296;
reg   [7:0] p_Val2_75_1_reg_1301;
reg   [0:0] tmp_331_reg_1306;
wire   [0:0] tmp_203_1_fu_634_p2;
reg   [0:0] tmp_203_1_reg_1311;
reg   [7:0] tmp_65_reg_1316;
reg   [0:0] tmp_334_reg_1321;
wire   [0:0] tmp_203_2_fu_704_p2;
reg   [0:0] tmp_203_2_reg_1326;
reg   [7:0] p_Val2_75_3_reg_1331;
reg   [0:0] tmp_337_reg_1336;
wire   [0:0] tmp_203_3_fu_774_p2;
reg   [0:0] tmp_203_3_reg_1341;
wire   [7:0] p_Val2_5_fu_957_p2;
reg   [7:0] p_Val2_5_reg_1346;
wire   [7:0] p_Val2_20_1_fu_1032_p2;
reg   [7:0] p_Val2_20_1_reg_1351;
wire   [7:0] p_Val2_20_2_fu_1107_p2;
reg   [7:0] p_Val2_20_2_reg_1356;
wire   [7:0] p_Val2_20_3_fu_1182_p2;
reg   [7:0] p_Val2_20_3_reg_1361;
reg    ap_block_state1;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state2;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter3;
wire   [63:0] tmp_43_fu_485_p1;
reg    ap_block_pp0_stage0_01001;
reg   [7:0] macRegisters_0_V_2_fu_176;
wire   [7:0] macRegisters_0_V_fu_806_p2;
reg   [7:0] macRegisters_1_V_2_fu_180;
wire   [7:0] macRegisters_1_V_fu_825_p2;
reg   [7:0] macRegisters_2_V_2_fu_184;
wire   [7:0] macRegisters_2_V_fu_844_p2;
reg   [7:0] macRegisters_3_V_2_fu_188;
wire   [7:0] macRegisters_3_V_fu_863_p2;
wire   [4:0] tmp_fu_321_p1;
wire   [0:0] exitcond_flatten_fu_345_p2;
wire   [11:0] tmp_39_fu_325_p3;
wire   [0:0] tmp_290_fu_381_p2;
wire   [0:0] not_exitcond_flatten_fu_375_p2;
wire   [5:0] nm_mid_fu_351_p3;
wire   [0:0] tmp_40_mid_fu_387_p2;
wire   [0:0] tmp_272_fu_399_p2;
wire   [5:0] nm_1_fu_393_p2;
wire   [4:0] tmp_326_fu_413_p1;
wire   [11:0] tmp_39_mid1_fu_417_p3;
wire   [11:0] tmp_39_mid_fu_359_p3;
wire   [4:0] nm_t_mid_fu_367_p3;
wire   [7:0] sf_mid2_fu_405_p3;
wire   [11:0] sf_cast1_fu_449_p1;
wire   [11:0] tmp_39_mid2_fu_425_p3;
wire   [13:0] indvar_flatten_op_fu_471_p2;
wire  signed [7:0] p_s_fu_492_p0;
wire  signed [7:0] p_08_cast_fu_496_p0;
wire  signed [6:0] p_Val2_s_fu_504_p0;
wire  signed [7:0] p_Val2_s_fu_504_p1;
wire  signed [14:0] p_08_cast_fu_496_p1;
wire   [14:0] p_Val2_s_fu_504_p2;
wire   [0:0] tmp_329_fu_536_p1;
wire   [0:0] tmp_327_fu_510_p3;
wire   [4:0] tmp_46_fu_546_p4;
wire   [0:0] tmp_45_fu_540_p2;
wire   [5:0] tmp_47_fu_556_p3;
wire  signed [7:0] p_Val2_1_fu_574_p0;
wire  signed [7:0] p_Val2_1_fu_574_p1;
wire  signed [15:0] p_s_fu_492_p1;
wire   [15:0] p_Val2_1_fu_574_p2;
wire   [0:0] tmp_332_fu_606_p1;
wire   [0:0] tmp_330_fu_580_p3;
wire   [4:0] tmp_52_fu_616_p4;
wire   [0:0] tmp_51_fu_610_p2;
wire   [5:0] tmp_53_fu_626_p3;
wire  signed [6:0] p_Val2_2_fu_644_p0;
wire  signed [7:0] p_Val2_2_fu_644_p1;
wire   [14:0] p_Val2_2_fu_644_p2;
wire   [0:0] tmp_335_fu_676_p1;
wire   [0:0] tmp_333_fu_650_p3;
wire   [4:0] tmp_56_fu_686_p4;
wire   [0:0] tmp_55_fu_680_p2;
wire   [5:0] tmp_57_fu_696_p3;
wire  signed [7:0] p_Val2_3_fu_714_p0;
wire  signed [7:0] p_Val2_3_fu_714_p1;
wire   [15:0] p_Val2_3_fu_714_p2;
wire   [0:0] tmp_338_fu_746_p1;
wire   [0:0] tmp_336_fu_720_p3;
wire   [4:0] tmp_60_fu_756_p4;
wire   [0:0] tmp_59_fu_750_p2;
wire   [5:0] tmp_61_fu_766_p3;
wire   [0:0] qb_assign_1_fu_792_p2;
wire   [7:0] tmp_49_fu_796_p1;
wire   [7:0] tmp1_fu_800_p2;
wire   [0:0] qb_assign_1_1_fu_811_p2;
wire   [7:0] tmp_204_1_fu_815_p1;
wire   [7:0] tmp2_fu_819_p2;
wire   [0:0] qb_assign_1_2_fu_830_p2;
wire   [7:0] tmp_204_2_fu_834_p1;
wire   [7:0] tmp3_fu_838_p2;
wire   [0:0] qb_assign_1_3_fu_849_p2;
wire   [7:0] tmp_204_3_fu_853_p1;
wire   [7:0] tmp4_fu_857_p2;
wire   [7:0] tmp_66_fu_888_p34;
wire   [7:0] tmp_67_fu_963_p34;
wire   [7:0] tmp_68_fu_1038_p34;
wire   [7:0] tmp_69_fu_1113_p34;
wire    ap_CS_fsm_state7;
reg   [2:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;

// power-on initialization
initial begin
#0 start_once_reg = 1'b0;
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 3'd1;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
end

Conv1DMac_new399_Aem #(
    .DataWidth( 7 ),
    .AddressRange( 4096 ),
    .AddressWidth( 12 ))
weights7_m_weights_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(weights7_m_weights_V_address0),
    .ce0(weights7_m_weights_V_ce0),
    .q0(weights7_m_weights_V_q0)
);

Conv1DMac_new399_Bew #(
    .DataWidth( 8 ),
    .AddressRange( 4096 ),
    .AddressWidth( 12 ))
weights7_m_weights_V_1_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(weights7_m_weights_V_1_address0),
    .ce0(weights7_m_weights_V_1_ce0),
    .q0(weights7_m_weights_V_1_q0)
);

Conv1DMac_new399_CeG #(
    .DataWidth( 7 ),
    .AddressRange( 4096 ),
    .AddressWidth( 12 ))
weights7_m_weights_V_2_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(weights7_m_weights_V_2_address0),
    .ce0(weights7_m_weights_V_2_ce0),
    .q0(weights7_m_weights_V_2_q0)
);

Conv1DMac_new399_DeQ #(
    .DataWidth( 8 ),
    .AddressRange( 4096 ),
    .AddressWidth( 12 ))
weights7_m_weights_V_3_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(weights7_m_weights_V_3_address0),
    .ce0(weights7_m_weights_V_3_ce0),
    .q0(weights7_m_weights_V_3_q0)
);

computeS2_mux_325yd2_x #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 8 ),
    .din3_WIDTH( 8 ),
    .din4_WIDTH( 8 ),
    .din5_WIDTH( 8 ),
    .din6_WIDTH( 8 ),
    .din7_WIDTH( 8 ),
    .din8_WIDTH( 8 ),
    .din9_WIDTH( 8 ),
    .din10_WIDTH( 8 ),
    .din11_WIDTH( 8 ),
    .din12_WIDTH( 8 ),
    .din13_WIDTH( 8 ),
    .din14_WIDTH( 8 ),
    .din15_WIDTH( 8 ),
    .din16_WIDTH( 8 ),
    .din17_WIDTH( 8 ),
    .din18_WIDTH( 8 ),
    .din19_WIDTH( 8 ),
    .din20_WIDTH( 8 ),
    .din21_WIDTH( 8 ),
    .din22_WIDTH( 8 ),
    .din23_WIDTH( 8 ),
    .din24_WIDTH( 8 ),
    .din25_WIDTH( 8 ),
    .din26_WIDTH( 8 ),
    .din27_WIDTH( 8 ),
    .din28_WIDTH( 8 ),
    .din29_WIDTH( 8 ),
    .din30_WIDTH( 8 ),
    .din31_WIDTH( 8 ),
    .din32_WIDTH( 5 ),
    .dout_WIDTH( 8 ))
computeS2_mux_325yd2_x_U49(
    .din0(8'd250),
    .din1(8'd255),
    .din2(8'd0),
    .din3(8'd255),
    .din4(8'd0),
    .din5(8'd0),
    .din6(8'd255),
    .din7(8'd254),
    .din8(8'd254),
    .din9(8'd252),
    .din10(8'd255),
    .din11(8'd0),
    .din12(8'd255),
    .din13(8'd210),
    .din14(8'd250),
    .din15(8'd0),
    .din16(8'd214),
    .din17(8'd0),
    .din18(8'd0),
    .din19(8'd0),
    .din20(8'd1),
    .din21(8'd0),
    .din22(8'd0),
    .din23(8'd0),
    .din24(8'd255),
    .din25(8'd0),
    .din26(8'd0),
    .din27(8'd0),
    .din28(8'd0),
    .din29(8'd0),
    .din30(8'd255),
    .din31(8'd0),
    .din32(nm_t_mid2_reg_1234_pp0_iter2_reg),
    .dout(tmp_66_fu_888_p34)
);

computeS2_mux_325yd2_x #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 8 ),
    .din3_WIDTH( 8 ),
    .din4_WIDTH( 8 ),
    .din5_WIDTH( 8 ),
    .din6_WIDTH( 8 ),
    .din7_WIDTH( 8 ),
    .din8_WIDTH( 8 ),
    .din9_WIDTH( 8 ),
    .din10_WIDTH( 8 ),
    .din11_WIDTH( 8 ),
    .din12_WIDTH( 8 ),
    .din13_WIDTH( 8 ),
    .din14_WIDTH( 8 ),
    .din15_WIDTH( 8 ),
    .din16_WIDTH( 8 ),
    .din17_WIDTH( 8 ),
    .din18_WIDTH( 8 ),
    .din19_WIDTH( 8 ),
    .din20_WIDTH( 8 ),
    .din21_WIDTH( 8 ),
    .din22_WIDTH( 8 ),
    .din23_WIDTH( 8 ),
    .din24_WIDTH( 8 ),
    .din25_WIDTH( 8 ),
    .din26_WIDTH( 8 ),
    .din27_WIDTH( 8 ),
    .din28_WIDTH( 8 ),
    .din29_WIDTH( 8 ),
    .din30_WIDTH( 8 ),
    .din31_WIDTH( 8 ),
    .din32_WIDTH( 5 ),
    .dout_WIDTH( 8 ))
computeS2_mux_325yd2_x_U50(
    .din0(8'd0),
    .din1(8'd0),
    .din2(8'd0),
    .din3(8'd255),
    .din4(8'd0),
    .din5(8'd255),
    .din6(8'd254),
    .din7(8'd0),
    .din8(8'd0),
    .din9(8'd0),
    .din10(8'd255),
    .din11(8'd0),
    .din12(8'd0),
    .din13(8'd255),
    .din14(8'd0),
    .din15(8'd0),
    .din16(8'd12),
    .din17(8'd0),
    .din18(8'd255),
    .din19(8'd0),
    .din20(8'd0),
    .din21(8'd0),
    .din22(8'd255),
    .din23(8'd0),
    .din24(8'd0),
    .din25(8'd1),
    .din26(8'd253),
    .din27(8'd1),
    .din28(8'd190),
    .din29(8'd249),
    .din30(8'd0),
    .din31(8'd0),
    .din32(nm_t_mid2_reg_1234_pp0_iter2_reg),
    .dout(tmp_67_fu_963_p34)
);

computeS2_mux_325yd2_x #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 8 ),
    .din3_WIDTH( 8 ),
    .din4_WIDTH( 8 ),
    .din5_WIDTH( 8 ),
    .din6_WIDTH( 8 ),
    .din7_WIDTH( 8 ),
    .din8_WIDTH( 8 ),
    .din9_WIDTH( 8 ),
    .din10_WIDTH( 8 ),
    .din11_WIDTH( 8 ),
    .din12_WIDTH( 8 ),
    .din13_WIDTH( 8 ),
    .din14_WIDTH( 8 ),
    .din15_WIDTH( 8 ),
    .din16_WIDTH( 8 ),
    .din17_WIDTH( 8 ),
    .din18_WIDTH( 8 ),
    .din19_WIDTH( 8 ),
    .din20_WIDTH( 8 ),
    .din21_WIDTH( 8 ),
    .din22_WIDTH( 8 ),
    .din23_WIDTH( 8 ),
    .din24_WIDTH( 8 ),
    .din25_WIDTH( 8 ),
    .din26_WIDTH( 8 ),
    .din27_WIDTH( 8 ),
    .din28_WIDTH( 8 ),
    .din29_WIDTH( 8 ),
    .din30_WIDTH( 8 ),
    .din31_WIDTH( 8 ),
    .din32_WIDTH( 5 ),
    .dout_WIDTH( 8 ))
computeS2_mux_325yd2_x_U51(
    .din0(8'd0),
    .din1(8'd0),
    .din2(8'd253),
    .din3(8'd0),
    .din4(8'd0),
    .din5(8'd0),
    .din6(8'd34),
    .din7(8'd1),
    .din8(8'd0),
    .din9(8'd0),
    .din10(8'd2),
    .din11(8'd0),
    .din12(8'd0),
    .din13(8'd237),
    .din14(8'd0),
    .din15(8'd0),
    .din16(8'd0),
    .din17(8'd0),
    .din18(8'd4),
    .din19(8'd0),
    .din20(8'd0),
    .din21(8'd26),
    .din22(8'd0),
    .din23(8'd0),
    .din24(8'd255),
    .din25(8'd0),
    .din26(8'd253),
    .din27(8'd0),
    .din28(8'd67),
    .din29(8'd0),
    .din30(8'd0),
    .din31(8'd0),
    .din32(nm_t_mid2_reg_1234_pp0_iter2_reg),
    .dout(tmp_68_fu_1038_p34)
);

computeS2_mux_325yd2_x #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 8 ),
    .din3_WIDTH( 8 ),
    .din4_WIDTH( 8 ),
    .din5_WIDTH( 8 ),
    .din6_WIDTH( 8 ),
    .din7_WIDTH( 8 ),
    .din8_WIDTH( 8 ),
    .din9_WIDTH( 8 ),
    .din10_WIDTH( 8 ),
    .din11_WIDTH( 8 ),
    .din12_WIDTH( 8 ),
    .din13_WIDTH( 8 ),
    .din14_WIDTH( 8 ),
    .din15_WIDTH( 8 ),
    .din16_WIDTH( 8 ),
    .din17_WIDTH( 8 ),
    .din18_WIDTH( 8 ),
    .din19_WIDTH( 8 ),
    .din20_WIDTH( 8 ),
    .din21_WIDTH( 8 ),
    .din22_WIDTH( 8 ),
    .din23_WIDTH( 8 ),
    .din24_WIDTH( 8 ),
    .din25_WIDTH( 8 ),
    .din26_WIDTH( 8 ),
    .din27_WIDTH( 8 ),
    .din28_WIDTH( 8 ),
    .din29_WIDTH( 8 ),
    .din30_WIDTH( 8 ),
    .din31_WIDTH( 8 ),
    .din32_WIDTH( 5 ),
    .dout_WIDTH( 8 ))
computeS2_mux_325yd2_x_U52(
    .din0(8'd179),
    .din1(8'd0),
    .din2(8'd0),
    .din3(8'd0),
    .din4(8'd255),
    .din5(8'd252),
    .din6(8'd0),
    .din7(8'd198),
    .din8(8'd0),
    .din9(8'd0),
    .din10(8'd246),
    .din11(8'd255),
    .din12(8'd0),
    .din13(8'd0),
    .din14(8'd0),
    .din15(8'd253),
    .din16(8'd0),
    .din17(8'd0),
    .din18(8'd255),
    .din19(8'd254),
    .din20(8'd0),
    .din21(8'd0),
    .din22(8'd18),
    .din23(8'd0),
    .din24(8'd0),
    .din25(8'd253),
    .din26(8'd254),
    .din27(8'd251),
    .din28(8'd255),
    .din29(8'd24),
    .din30(8'd0),
    .din31(8'd0),
    .din32(nm_t_mid2_reg_1234_pp0_iter2_reg),
    .dout(tmp_69_fu_1113_p34)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state7)) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state2) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state2)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state2);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter4 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((internal_ap_ready == 1'b0) & (real_start == 1'b1))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_flatten4_fu_333_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        indvar_flatten4_reg_257 <= indvar_flatten_next4_fu_339_p2;
    end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        indvar_flatten4_reg_257 <= 24'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_flatten4_fu_333_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        indvar_flatten_reg_268 <= indvar_flatten_next_fu_477_p3;
    end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        indvar_flatten_reg_268 <= 14'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_62_reg_1252_pp0_iter2_reg == 1'd0) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        macRegisters_0_V_2_fu_176 <= macRegisters_0_V_fu_806_p2;
    end else if (((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1)) | ((tmp_62_reg_1252_pp0_iter2_reg == 1'd1) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001)))) begin
        macRegisters_0_V_2_fu_176 <= 8'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_62_reg_1252_pp0_iter2_reg == 1'd0) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        macRegisters_1_V_2_fu_180 <= macRegisters_1_V_fu_825_p2;
    end else if (((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1)) | ((tmp_62_reg_1252_pp0_iter2_reg == 1'd1) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001)))) begin
        macRegisters_1_V_2_fu_180 <= 8'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_62_reg_1252_pp0_iter2_reg == 1'd0) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        macRegisters_2_V_2_fu_184 <= macRegisters_2_V_fu_844_p2;
    end else if (((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1)) | ((tmp_62_reg_1252_pp0_iter2_reg == 1'd1) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001)))) begin
        macRegisters_2_V_2_fu_184 <= 8'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_62_reg_1252_pp0_iter2_reg == 1'd0) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        macRegisters_3_V_2_fu_188 <= macRegisters_3_V_fu_863_p2;
    end else if (((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1)) | ((tmp_62_reg_1252_pp0_iter2_reg == 1'd1) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001)))) begin
        macRegisters_3_V_2_fu_188 <= 8'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_flatten4_fu_333_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        nm_reg_279 <= nm_mid2_fu_441_p3;
    end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        nm_reg_279 <= 6'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_flatten4_fu_333_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        sf_reg_290 <= sf_1_fu_465_p2;
    end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        sf_reg_290 <= 8'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        exitcond_flatten4_reg_1225 <= exitcond_flatten4_fu_333_p2;
        exitcond_flatten4_reg_1225_pp0_iter1_reg <= exitcond_flatten4_reg_1225;
        nm_t_mid2_reg_1234_pp0_iter1_reg <= nm_t_mid2_reg_1234;
        tmp_62_reg_1252_pp0_iter1_reg <= tmp_62_reg_1252;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_flatten4_fu_333_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        nm_t_mid2_reg_1234 <= nm_t_mid2_fu_433_p3;
        tmp_42_reg_1247 <= tmp_42_fu_453_p2;
        tmp_62_reg_1252 <= tmp_62_fu_459_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        nm_t_mid2_reg_1234_pp0_iter2_reg <= nm_t_mid2_reg_1234_pp0_iter1_reg;
        tmp_62_reg_1252_pp0_iter2_reg <= tmp_62_reg_1252_pp0_iter1_reg;
        tmp_62_reg_1252_pp0_iter3_reg <= tmp_62_reg_1252_pp0_iter2_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_62_reg_1252_pp0_iter2_reg == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        p_Val2_20_1_reg_1351 <= p_Val2_20_1_fu_1032_p2;
        p_Val2_20_2_reg_1356 <= p_Val2_20_2_fu_1107_p2;
        p_Val2_20_3_reg_1361 <= p_Val2_20_3_fu_1182_p2;
        p_Val2_5_reg_1346 <= p_Val2_5_fu_957_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_flatten4_reg_1225_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        p_Val2_75_1_reg_1301 <= {{p_Val2_1_fu_574_p2[14:7]}};
        p_Val2_75_3_reg_1331 <= {{p_Val2_3_fu_714_p2[14:7]}};
        tmp_203_1_reg_1311 <= tmp_203_1_fu_634_p2;
        tmp_203_2_reg_1326 <= tmp_203_2_fu_704_p2;
        tmp_203_3_reg_1341 <= tmp_203_3_fu_774_p2;
        tmp_328_reg_1291 <= p_Val2_s_fu_504_p2[32'd6];
        tmp_331_reg_1306 <= p_Val2_1_fu_574_p2[32'd6];
        tmp_334_reg_1321 <= p_Val2_2_fu_644_p2[32'd6];
        tmp_337_reg_1336 <= p_Val2_3_fu_714_p2[32'd6];
        tmp_48_reg_1296 <= tmp_48_fu_564_p2;
        tmp_65_reg_1316 <= {{p_Val2_2_fu_644_p2[14:7]}};
        tmp_s_reg_1286 <= {{p_Val2_s_fu_504_p2[14:7]}};
    end
end

always @ (*) begin
    if ((exitcond_flatten4_fu_333_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((real_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond_flatten4_reg_1225_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        in_V_V_blk_n = in_V_V_empty_n;
    end else begin
        in_V_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((exitcond_flatten4_reg_1225_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        in_V_V_read = 1'b1;
    end else begin
        in_V_V_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        internal_ap_ready = 1'b1;
    end else begin
        internal_ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_62_reg_1252_pp0_iter3_reg == 1'd1) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        out_V_V_blk_n = out_V_V_full_n;
    end else begin
        out_V_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((tmp_62_reg_1252_pp0_iter3_reg == 1'd1) & (ap_enable_reg_pp0_iter4 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        out_V_V_write = 1'b1;
    end else begin
        out_V_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (start_full_n == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (real_start == 1'b1))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        weights7_m_weights_V_1_ce0 = 1'b1;
    end else begin
        weights7_m_weights_V_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        weights7_m_weights_V_2_ce0 = 1'b1;
    end else begin
        weights7_m_weights_V_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        weights7_m_weights_V_3_ce0 = 1'b1;
    end else begin
        weights7_m_weights_V_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        weights7_m_weights_V_ce0 = 1'b1;
    end else begin
        weights7_m_weights_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((exitcond_flatten4_fu_333_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1)) & ~((ap_enable_reg_pp0_iter3 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter4 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((ap_enable_reg_pp0_iter3 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter4 == 1'b1)) | ((exitcond_flatten4_fu_333_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd2];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = (((tmp_62_reg_1252_pp0_iter3_reg == 1'd1) & (out_V_V_full_n == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b1)) | ((exitcond_flatten4_reg_1225_pp0_iter1_reg == 1'd0) & (in_V_V_empty_n == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((tmp_62_reg_1252_pp0_iter3_reg == 1'd1) & (out_V_V_full_n == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b1)) | ((exitcond_flatten4_reg_1225_pp0_iter1_reg == 1'd0) & (in_V_V_empty_n == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((tmp_62_reg_1252_pp0_iter3_reg == 1'd1) & (out_V_V_full_n == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b1)) | ((exitcond_flatten4_reg_1225_pp0_iter1_reg == 1'd0) & (in_V_V_empty_n == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1)));
end

always @ (*) begin
    ap_block_state1 = ((real_start == 1'b0) | (ap_done_reg == 1'b1));
end

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state4_pp0_stage0_iter2 = ((exitcond_flatten4_reg_1225_pp0_iter1_reg == 1'd0) & (in_V_V_empty_n == 1'b0));
end

assign ap_block_state5_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state6_pp0_stage0_iter4 = ((tmp_62_reg_1252_pp0_iter3_reg == 1'd1) & (out_V_V_full_n == 1'b0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_ready = internal_ap_ready;

assign exitcond_flatten4_fu_333_p2 = ((indvar_flatten4_reg_257 == 24'd8388608) ? 1'b1 : 1'b0);

assign exitcond_flatten_fu_345_p2 = ((indvar_flatten_reg_268 == 14'd4096) ? 1'b1 : 1'b0);

assign indvar_flatten_next4_fu_339_p2 = (24'd1 + indvar_flatten4_reg_257);

assign indvar_flatten_next_fu_477_p3 = ((exitcond_flatten_fu_345_p2[0:0] === 1'b1) ? 14'd1 : indvar_flatten_op_fu_471_p2);

assign indvar_flatten_op_fu_471_p2 = (indvar_flatten_reg_268 + 14'd1);

assign macRegisters_0_V_fu_806_p2 = (tmp_s_reg_1286 + tmp1_fu_800_p2);

assign macRegisters_1_V_fu_825_p2 = (p_Val2_75_1_reg_1301 + tmp2_fu_819_p2);

assign macRegisters_2_V_fu_844_p2 = (tmp_65_reg_1316 + tmp3_fu_838_p2);

assign macRegisters_3_V_fu_863_p2 = (p_Val2_75_3_reg_1331 + tmp4_fu_857_p2);

assign nm_1_fu_393_p2 = (6'd1 + nm_mid_fu_351_p3);

assign nm_mid2_fu_441_p3 = ((tmp_40_mid_fu_387_p2[0:0] === 1'b1) ? nm_1_fu_393_p2 : nm_mid_fu_351_p3);

assign nm_mid_fu_351_p3 = ((exitcond_flatten_fu_345_p2[0:0] === 1'b1) ? 6'd0 : nm_reg_279);

assign nm_t_mid2_fu_433_p3 = ((tmp_40_mid_fu_387_p2[0:0] === 1'b1) ? tmp_326_fu_413_p1 : nm_t_mid_fu_367_p3);

assign nm_t_mid_fu_367_p3 = ((exitcond_flatten_fu_345_p2[0:0] === 1'b1) ? 5'd0 : tmp_fu_321_p1);

assign not_exitcond_flatten_fu_375_p2 = (exitcond_flatten_fu_345_p2 ^ 1'd1);

assign out_V_V_din = {{{{p_Val2_20_3_reg_1361}, {p_Val2_20_2_reg_1356}}, {p_Val2_20_1_reg_1351}}, {p_Val2_5_reg_1346}};

assign p_08_cast_fu_496_p0 = in_V_V_dout;

assign p_08_cast_fu_496_p1 = p_08_cast_fu_496_p0;

assign p_Val2_1_fu_574_p0 = weights7_m_weights_V_1_q0;

assign p_Val2_1_fu_574_p1 = p_s_fu_492_p1;

assign p_Val2_1_fu_574_p2 = ($signed(p_Val2_1_fu_574_p0) * $signed(p_Val2_1_fu_574_p1));

assign p_Val2_20_1_fu_1032_p2 = (macRegisters_1_V_fu_825_p2 + tmp_67_fu_963_p34);

assign p_Val2_20_2_fu_1107_p2 = (macRegisters_2_V_fu_844_p2 + tmp_68_fu_1038_p34);

assign p_Val2_20_3_fu_1182_p2 = (macRegisters_3_V_fu_863_p2 + tmp_69_fu_1113_p34);

assign p_Val2_2_fu_644_p0 = weights7_m_weights_V_2_q0;

assign p_Val2_2_fu_644_p1 = p_08_cast_fu_496_p1;

assign p_Val2_2_fu_644_p2 = ($signed(p_Val2_2_fu_644_p0) * $signed(p_Val2_2_fu_644_p1));

assign p_Val2_3_fu_714_p0 = weights7_m_weights_V_3_q0;

assign p_Val2_3_fu_714_p1 = p_s_fu_492_p1;

assign p_Val2_3_fu_714_p2 = ($signed(p_Val2_3_fu_714_p0) * $signed(p_Val2_3_fu_714_p1));

assign p_Val2_5_fu_957_p2 = (macRegisters_0_V_fu_806_p2 + tmp_66_fu_888_p34);

assign p_Val2_s_fu_504_p0 = weights7_m_weights_V_q0;

assign p_Val2_s_fu_504_p1 = p_08_cast_fu_496_p1;

assign p_Val2_s_fu_504_p2 = ($signed(p_Val2_s_fu_504_p0) * $signed(p_Val2_s_fu_504_p1));

assign p_s_fu_492_p0 = in_V_V_dout;

assign p_s_fu_492_p1 = p_s_fu_492_p0;

assign qb_assign_1_1_fu_811_p2 = (tmp_331_reg_1306 & tmp_203_1_reg_1311);

assign qb_assign_1_2_fu_830_p2 = (tmp_334_reg_1321 & tmp_203_2_reg_1326);

assign qb_assign_1_3_fu_849_p2 = (tmp_337_reg_1336 & tmp_203_3_reg_1341);

assign qb_assign_1_fu_792_p2 = (tmp_48_reg_1296 & tmp_328_reg_1291);

assign sf_1_fu_465_p2 = (sf_mid2_fu_405_p3 + 8'd1);

assign sf_cast1_fu_449_p1 = sf_mid2_fu_405_p3;

assign sf_mid2_fu_405_p3 = ((tmp_272_fu_399_p2[0:0] === 1'b1) ? 8'd0 : sf_reg_290);

assign start_out = real_start;

assign tmp1_fu_800_p2 = (tmp_49_fu_796_p1 + macRegisters_0_V_2_fu_176);

assign tmp2_fu_819_p2 = (tmp_204_1_fu_815_p1 + macRegisters_1_V_2_fu_180);

assign tmp3_fu_838_p2 = (tmp_204_2_fu_834_p1 + macRegisters_2_V_2_fu_184);

assign tmp4_fu_857_p2 = (tmp_204_3_fu_853_p1 + macRegisters_3_V_2_fu_188);

assign tmp_203_1_fu_634_p2 = ((tmp_53_fu_626_p3 != 6'd0) ? 1'b1 : 1'b0);

assign tmp_203_2_fu_704_p2 = ((tmp_57_fu_696_p3 != 6'd0) ? 1'b1 : 1'b0);

assign tmp_203_3_fu_774_p2 = ((tmp_61_fu_766_p3 != 6'd0) ? 1'b1 : 1'b0);

assign tmp_204_1_fu_815_p1 = qb_assign_1_1_fu_811_p2;

assign tmp_204_2_fu_834_p1 = qb_assign_1_2_fu_830_p2;

assign tmp_204_3_fu_853_p1 = qb_assign_1_3_fu_849_p2;

assign tmp_272_fu_399_p2 = (tmp_40_mid_fu_387_p2 | exitcond_flatten_fu_345_p2);

assign tmp_290_fu_381_p2 = ((sf_reg_290 == 8'd128) ? 1'b1 : 1'b0);

assign tmp_326_fu_413_p1 = nm_1_fu_393_p2[4:0];

assign tmp_327_fu_510_p3 = p_Val2_s_fu_504_p2[32'd14];

assign tmp_329_fu_536_p1 = p_Val2_s_fu_504_p2[0:0];

assign tmp_330_fu_580_p3 = p_Val2_1_fu_574_p2[32'd15];

assign tmp_332_fu_606_p1 = p_Val2_1_fu_574_p2[0:0];

assign tmp_333_fu_650_p3 = p_Val2_2_fu_644_p2[32'd14];

assign tmp_335_fu_676_p1 = p_Val2_2_fu_644_p2[0:0];

assign tmp_336_fu_720_p3 = p_Val2_3_fu_714_p2[32'd15];

assign tmp_338_fu_746_p1 = p_Val2_3_fu_714_p2[0:0];

assign tmp_39_fu_325_p3 = {{tmp_fu_321_p1}, {7'd0}};

assign tmp_39_mid1_fu_417_p3 = {{tmp_326_fu_413_p1}, {7'd0}};

assign tmp_39_mid2_fu_425_p3 = ((tmp_40_mid_fu_387_p2[0:0] === 1'b1) ? tmp_39_mid1_fu_417_p3 : tmp_39_mid_fu_359_p3);

assign tmp_39_mid_fu_359_p3 = ((exitcond_flatten_fu_345_p2[0:0] === 1'b1) ? 12'd0 : tmp_39_fu_325_p3);

assign tmp_40_mid_fu_387_p2 = (tmp_290_fu_381_p2 & not_exitcond_flatten_fu_375_p2);

assign tmp_42_fu_453_p2 = (sf_cast1_fu_449_p1 + tmp_39_mid2_fu_425_p3);

assign tmp_43_fu_485_p1 = tmp_42_reg_1247;

assign tmp_45_fu_540_p2 = (tmp_329_fu_536_p1 | tmp_327_fu_510_p3);

assign tmp_46_fu_546_p4 = {{p_Val2_s_fu_504_p2[5:1]}};

assign tmp_47_fu_556_p3 = {{tmp_46_fu_546_p4}, {tmp_45_fu_540_p2}};

assign tmp_48_fu_564_p2 = ((tmp_47_fu_556_p3 != 6'd0) ? 1'b1 : 1'b0);

assign tmp_49_fu_796_p1 = qb_assign_1_fu_792_p2;

assign tmp_51_fu_610_p2 = (tmp_332_fu_606_p1 | tmp_330_fu_580_p3);

assign tmp_52_fu_616_p4 = {{p_Val2_1_fu_574_p2[5:1]}};

assign tmp_53_fu_626_p3 = {{tmp_52_fu_616_p4}, {tmp_51_fu_610_p2}};

assign tmp_55_fu_680_p2 = (tmp_335_fu_676_p1 | tmp_333_fu_650_p3);

assign tmp_56_fu_686_p4 = {{p_Val2_2_fu_644_p2[5:1]}};

assign tmp_57_fu_696_p3 = {{tmp_56_fu_686_p4}, {tmp_55_fu_680_p2}};

assign tmp_59_fu_750_p2 = (tmp_338_fu_746_p1 | tmp_336_fu_720_p3);

assign tmp_60_fu_756_p4 = {{p_Val2_3_fu_714_p2[5:1]}};

assign tmp_61_fu_766_p3 = {{tmp_60_fu_756_p4}, {tmp_59_fu_750_p2}};

assign tmp_62_fu_459_p2 = ((sf_mid2_fu_405_p3 == 8'd127) ? 1'b1 : 1'b0);

assign tmp_fu_321_p1 = nm_reg_279[4:0];

assign weights7_m_weights_V_1_address0 = tmp_43_fu_485_p1;

assign weights7_m_weights_V_2_address0 = tmp_43_fu_485_p1;

assign weights7_m_weights_V_3_address0 = tmp_43_fu_485_p1;

assign weights7_m_weights_V_address0 = tmp_43_fu_485_p1;

endmodule //Conv1DMac_new399
