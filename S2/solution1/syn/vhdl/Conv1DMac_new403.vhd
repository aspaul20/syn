-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.2
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity Conv1DMac_new403 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    start_full_n : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    start_out : OUT STD_LOGIC;
    start_write : OUT STD_LOGIC;
    in_V_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
    in_V_V_empty_n : IN STD_LOGIC;
    in_V_V_read : OUT STD_LOGIC;
    out_V_V_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    out_V_V_full_n : IN STD_LOGIC;
    out_V_V_write : OUT STD_LOGIC );
end;


architecture behav of Conv1DMac_new403 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv20_0 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000000000000";
    constant ap_const_lv14_0 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000000";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv20_80000 : STD_LOGIC_VECTOR (19 downto 0) := "10000000000000000000";
    constant ap_const_lv20_1 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000000000001";
    constant ap_const_lv14_1000 : STD_LOGIC_VECTOR (13 downto 0) := "01000000000000";
    constant ap_const_lv12_0 : STD_LOGIC_VECTOR (11 downto 0) := "000000000000";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv8_80 : STD_LOGIC_VECTOR (7 downto 0) := "10000000";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv8_7F : STD_LOGIC_VECTOR (7 downto 0) := "01111111";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv14_1 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000001";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv8_7 : STD_LOGIC_VECTOR (7 downto 0) := "00000111";
    constant ap_const_lv8_B : STD_LOGIC_VECTOR (7 downto 0) := "00001011";
    constant ap_const_lv8_9 : STD_LOGIC_VECTOR (7 downto 0) := "00001001";
    constant ap_const_lv8_5 : STD_LOGIC_VECTOR (7 downto 0) := "00000101";
    constant ap_const_lv8_C : STD_LOGIC_VECTOR (7 downto 0) := "00001100";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv8_6 : STD_LOGIC_VECTOR (7 downto 0) := "00000110";
    constant ap_const_lv8_4 : STD_LOGIC_VECTOR (7 downto 0) := "00000100";
    constant ap_const_lv8_A : STD_LOGIC_VECTOR (7 downto 0) := "00001010";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";

    signal real_start : STD_LOGIC;
    signal start_once_reg : STD_LOGIC := '0';
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (2 downto 0) := "001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal internal_ap_ready : STD_LOGIC;
    signal weights9_m_weights_V_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal weights9_m_weights_V_ce0 : STD_LOGIC;
    signal weights9_m_weights_V_q0 : STD_LOGIC_VECTOR (3 downto 0);
    signal weights9_m_weights_V_1_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal weights9_m_weights_V_1_ce0 : STD_LOGIC;
    signal weights9_m_weights_V_1_q0 : STD_LOGIC_VECTOR (3 downto 0);
    signal weights9_m_weights_V_2_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal weights9_m_weights_V_2_ce0 : STD_LOGIC;
    signal weights9_m_weights_V_2_q0 : STD_LOGIC_VECTOR (3 downto 0);
    signal weights9_m_weights_V_3_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal weights9_m_weights_V_3_ce0 : STD_LOGIC;
    signal weights9_m_weights_V_3_q0 : STD_LOGIC_VECTOR (3 downto 0);
    signal in_V_V_blk_n : STD_LOGIC;
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal exitcond_flatten3_reg_1224 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_flatten3_reg_1224_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal out_V_V_blk_n : STD_LOGIC;
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal tmp_60_reg_1251 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_60_reg_1251_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal indvar_flatten3_reg_221 : STD_LOGIC_VECTOR (19 downto 0);
    signal indvar_flatten_reg_232 : STD_LOGIC_VECTOR (13 downto 0);
    signal nm_reg_243 : STD_LOGIC_VECTOR (5 downto 0);
    signal sf_reg_254 : STD_LOGIC_VECTOR (7 downto 0);
    signal exitcond_flatten3_fu_297_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_block_state2_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal exitcond_flatten3_reg_1224_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal indvar_flatten_next3_fu_303_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal nm_t_mid2_fu_397_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal nm_t_mid2_reg_1233 : STD_LOGIC_VECTOR (4 downto 0);
    signal nm_t_mid2_reg_1233_pp0_iter1_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal nm_t_mid2_reg_1233_pp0_iter2_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal nm_t_mid2_reg_1233_pp0_iter3_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal nm_mid2_fu_405_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_37_fu_417_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_37_reg_1246 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_60_fu_423_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_60_reg_1251_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_60_reg_1251_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal sf_1_fu_429_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal indvar_flatten_next_fu_441_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_V_reg_1285 : STD_LOGIC_VECTOR (7 downto 0);
    signal weights9_m_weights_V_5_reg_1290 : STD_LOGIC_VECTOR (3 downto 0);
    signal weights9_m_weights_V_7_reg_1295 : STD_LOGIC_VECTOR (3 downto 0);
    signal weights9_m_weights_V_9_reg_1300 : STD_LOGIC_VECTOR (3 downto 0);
    signal weights9_m_weights_V_11_reg_1305 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp1_fu_542_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp1_reg_1310 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp2_fu_631_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp2_reg_1315 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp3_fu_720_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp3_reg_1320 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp4_fu_809_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp4_reg_1325 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state2 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal tmp_38_fu_449_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal macRegisters_0_V_1_fu_140 : STD_LOGIC_VECTOR (7 downto 0);
    signal macRegisters_0_V_fu_830_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal macRegisters_1_V_1_fu_144 : STD_LOGIC_VECTOR (7 downto 0);
    signal macRegisters_1_V_fu_839_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal macRegisters_2_V_1_fu_148 : STD_LOGIC_VECTOR (7 downto 0);
    signal macRegisters_2_V_fu_848_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal macRegisters_3_V_1_fu_152 : STD_LOGIC_VECTOR (7 downto 0);
    signal macRegisters_3_V_fu_857_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_fu_285_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal exitcond_flatten_fu_309_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_s_fu_289_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_289_fu_345_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal not_exitcond_flatten_fu_339_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal nm_mid_fu_315_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_91_mid_fu_351_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_270_fu_363_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal nm_1_fu_357_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_309_fu_377_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_90_mid1_fu_381_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_90_mid_fu_323_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal nm_t_mid_fu_331_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal sf_mid2_fu_369_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_90_mid2_fu_389_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal sf_cast1_fu_413_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal indvar_flatten_op_fu_435_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal p_Val2_s_132_fu_462_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_08_cast_cast_fu_456_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal p_Val2_s_132_fu_462_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal p_Val2_s_132_fu_462_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_311_fu_476_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_313_fu_498_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_310_fu_468_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_42_fu_508_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_41_fu_502_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_43_fu_518_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_44_fu_526_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_312_fu_490_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal qb_assign_2_fu_532_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Val2_cast_cast_fu_486_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_138_cast_cast_fu_538_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal p_Val2_1_fu_551_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Val2_1_fu_551_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal p_Val2_1_fu_551_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_315_fu_565_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_317_fu_587_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_314_fu_557_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_48_fu_597_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_47_fu_591_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_49_fu_607_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_227_1_fu_615_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_316_fu_579_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal qb_assign_2_1_fu_621_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Val2_81_1_cast_c_fu_575_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_228_1_cast_cast_fu_627_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal p_Val2_2_fu_640_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Val2_2_fu_640_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal p_Val2_2_fu_640_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_319_fu_654_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_321_fu_676_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_318_fu_646_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_53_fu_686_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_52_fu_680_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_54_fu_696_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_227_2_fu_704_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_320_fu_668_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal qb_assign_2_2_fu_710_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Val2_81_2_cast_c_fu_664_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_228_2_cast_cast_fu_716_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal p_Val2_3_fu_729_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Val2_3_fu_729_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal p_Val2_3_fu_729_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_323_fu_743_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_325_fu_765_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_322_fu_735_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_58_fu_775_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_57_fu_769_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_59_fu_785_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_227_3_fu_793_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_324_fu_757_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal qb_assign_2_3_fu_799_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Val2_81_3_cast_c_fu_753_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_228_3_cast_cast_fu_805_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp1_cast_fu_827_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp2_cast_fu_836_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp3_cast_fu_845_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp4_cast_fu_854_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_61_fu_883_p34 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_62_fu_958_p34 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_63_fu_1033_p34 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_64_fu_1108_p34 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Val2_22_3_fu_1177_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Val2_22_2_fu_1102_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Val2_22_1_fu_1027_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Val2_s_fu_952_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;

    component computeS2_mux_325yd2_x_x_x IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        din5_WIDTH : INTEGER;
        din6_WIDTH : INTEGER;
        din7_WIDTH : INTEGER;
        din8_WIDTH : INTEGER;
        din9_WIDTH : INTEGER;
        din10_WIDTH : INTEGER;
        din11_WIDTH : INTEGER;
        din12_WIDTH : INTEGER;
        din13_WIDTH : INTEGER;
        din14_WIDTH : INTEGER;
        din15_WIDTH : INTEGER;
        din16_WIDTH : INTEGER;
        din17_WIDTH : INTEGER;
        din18_WIDTH : INTEGER;
        din19_WIDTH : INTEGER;
        din20_WIDTH : INTEGER;
        din21_WIDTH : INTEGER;
        din22_WIDTH : INTEGER;
        din23_WIDTH : INTEGER;
        din24_WIDTH : INTEGER;
        din25_WIDTH : INTEGER;
        din26_WIDTH : INTEGER;
        din27_WIDTH : INTEGER;
        din28_WIDTH : INTEGER;
        din29_WIDTH : INTEGER;
        din30_WIDTH : INTEGER;
        din31_WIDTH : INTEGER;
        din32_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        din2 : IN STD_LOGIC_VECTOR (7 downto 0);
        din3 : IN STD_LOGIC_VECTOR (7 downto 0);
        din4 : IN STD_LOGIC_VECTOR (7 downto 0);
        din5 : IN STD_LOGIC_VECTOR (7 downto 0);
        din6 : IN STD_LOGIC_VECTOR (7 downto 0);
        din7 : IN STD_LOGIC_VECTOR (7 downto 0);
        din8 : IN STD_LOGIC_VECTOR (7 downto 0);
        din9 : IN STD_LOGIC_VECTOR (7 downto 0);
        din10 : IN STD_LOGIC_VECTOR (7 downto 0);
        din11 : IN STD_LOGIC_VECTOR (7 downto 0);
        din12 : IN STD_LOGIC_VECTOR (7 downto 0);
        din13 : IN STD_LOGIC_VECTOR (7 downto 0);
        din14 : IN STD_LOGIC_VECTOR (7 downto 0);
        din15 : IN STD_LOGIC_VECTOR (7 downto 0);
        din16 : IN STD_LOGIC_VECTOR (7 downto 0);
        din17 : IN STD_LOGIC_VECTOR (7 downto 0);
        din18 : IN STD_LOGIC_VECTOR (7 downto 0);
        din19 : IN STD_LOGIC_VECTOR (7 downto 0);
        din20 : IN STD_LOGIC_VECTOR (7 downto 0);
        din21 : IN STD_LOGIC_VECTOR (7 downto 0);
        din22 : IN STD_LOGIC_VECTOR (7 downto 0);
        din23 : IN STD_LOGIC_VECTOR (7 downto 0);
        din24 : IN STD_LOGIC_VECTOR (7 downto 0);
        din25 : IN STD_LOGIC_VECTOR (7 downto 0);
        din26 : IN STD_LOGIC_VECTOR (7 downto 0);
        din27 : IN STD_LOGIC_VECTOR (7 downto 0);
        din28 : IN STD_LOGIC_VECTOR (7 downto 0);
        din29 : IN STD_LOGIC_VECTOR (7 downto 0);
        din30 : IN STD_LOGIC_VECTOR (7 downto 0);
        din31 : IN STD_LOGIC_VECTOR (7 downto 0);
        din32 : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component Conv1DMac_new403_Lf8 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (11 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (3 downto 0) );
    end component;


    component Conv1DMac_new403_Mgi IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (11 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (3 downto 0) );
    end component;


    component Conv1DMac_new403_Ngs IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (11 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (3 downto 0) );
    end component;


    component Conv1DMac_new403_OgC IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (11 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (3 downto 0) );
    end component;



begin
    weights9_m_weights_V_U : component Conv1DMac_new403_Lf8
    generic map (
        DataWidth => 4,
        AddressRange => 4096,
        AddressWidth => 12)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => weights9_m_weights_V_address0,
        ce0 => weights9_m_weights_V_ce0,
        q0 => weights9_m_weights_V_q0);

    weights9_m_weights_V_1_U : component Conv1DMac_new403_Mgi
    generic map (
        DataWidth => 4,
        AddressRange => 4096,
        AddressWidth => 12)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => weights9_m_weights_V_1_address0,
        ce0 => weights9_m_weights_V_1_ce0,
        q0 => weights9_m_weights_V_1_q0);

    weights9_m_weights_V_2_U : component Conv1DMac_new403_Ngs
    generic map (
        DataWidth => 4,
        AddressRange => 4096,
        AddressWidth => 12)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => weights9_m_weights_V_2_address0,
        ce0 => weights9_m_weights_V_2_ce0,
        q0 => weights9_m_weights_V_2_q0);

    weights9_m_weights_V_3_U : component Conv1DMac_new403_OgC
    generic map (
        DataWidth => 4,
        AddressRange => 4096,
        AddressWidth => 12)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => weights9_m_weights_V_3_address0,
        ce0 => weights9_m_weights_V_3_ce0,
        q0 => weights9_m_weights_V_3_q0);

    computeS2_mux_325yd2_x_x_x_U92 : component computeS2_mux_325yd2_x_x_x
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 8,
        din3_WIDTH => 8,
        din4_WIDTH => 8,
        din5_WIDTH => 8,
        din6_WIDTH => 8,
        din7_WIDTH => 8,
        din8_WIDTH => 8,
        din9_WIDTH => 8,
        din10_WIDTH => 8,
        din11_WIDTH => 8,
        din12_WIDTH => 8,
        din13_WIDTH => 8,
        din14_WIDTH => 8,
        din15_WIDTH => 8,
        din16_WIDTH => 8,
        din17_WIDTH => 8,
        din18_WIDTH => 8,
        din19_WIDTH => 8,
        din20_WIDTH => 8,
        din21_WIDTH => 8,
        din22_WIDTH => 8,
        din23_WIDTH => 8,
        din24_WIDTH => 8,
        din25_WIDTH => 8,
        din26_WIDTH => 8,
        din27_WIDTH => 8,
        din28_WIDTH => 8,
        din29_WIDTH => 8,
        din30_WIDTH => 8,
        din31_WIDTH => 8,
        din32_WIDTH => 5,
        dout_WIDTH => 8)
    port map (
        din0 => ap_const_lv8_7,
        din1 => ap_const_lv8_7,
        din2 => ap_const_lv8_0,
        din3 => ap_const_lv8_0,
        din4 => ap_const_lv8_0,
        din5 => ap_const_lv8_0,
        din6 => ap_const_lv8_0,
        din7 => ap_const_lv8_B,
        din8 => ap_const_lv8_0,
        din9 => ap_const_lv8_0,
        din10 => ap_const_lv8_0,
        din11 => ap_const_lv8_0,
        din12 => ap_const_lv8_0,
        din13 => ap_const_lv8_0,
        din14 => ap_const_lv8_7,
        din15 => ap_const_lv8_0,
        din16 => ap_const_lv8_7,
        din17 => ap_const_lv8_0,
        din18 => ap_const_lv8_0,
        din19 => ap_const_lv8_0,
        din20 => ap_const_lv8_9,
        din21 => ap_const_lv8_0,
        din22 => ap_const_lv8_0,
        din23 => ap_const_lv8_0,
        din24 => ap_const_lv8_0,
        din25 => ap_const_lv8_0,
        din26 => ap_const_lv8_5,
        din27 => ap_const_lv8_0,
        din28 => ap_const_lv8_0,
        din29 => ap_const_lv8_0,
        din30 => ap_const_lv8_0,
        din31 => ap_const_lv8_0,
        din32 => nm_t_mid2_reg_1233_pp0_iter3_reg,
        dout => tmp_61_fu_883_p34);

    computeS2_mux_325yd2_x_x_x_U93 : component computeS2_mux_325yd2_x_x_x
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 8,
        din3_WIDTH => 8,
        din4_WIDTH => 8,
        din5_WIDTH => 8,
        din6_WIDTH => 8,
        din7_WIDTH => 8,
        din8_WIDTH => 8,
        din9_WIDTH => 8,
        din10_WIDTH => 8,
        din11_WIDTH => 8,
        din12_WIDTH => 8,
        din13_WIDTH => 8,
        din14_WIDTH => 8,
        din15_WIDTH => 8,
        din16_WIDTH => 8,
        din17_WIDTH => 8,
        din18_WIDTH => 8,
        din19_WIDTH => 8,
        din20_WIDTH => 8,
        din21_WIDTH => 8,
        din22_WIDTH => 8,
        din23_WIDTH => 8,
        din24_WIDTH => 8,
        din25_WIDTH => 8,
        din26_WIDTH => 8,
        din27_WIDTH => 8,
        din28_WIDTH => 8,
        din29_WIDTH => 8,
        din30_WIDTH => 8,
        din31_WIDTH => 8,
        din32_WIDTH => 5,
        dout_WIDTH => 8)
    port map (
        din0 => ap_const_lv8_0,
        din1 => ap_const_lv8_0,
        din2 => ap_const_lv8_0,
        din3 => ap_const_lv8_0,
        din4 => ap_const_lv8_0,
        din5 => ap_const_lv8_0,
        din6 => ap_const_lv8_0,
        din7 => ap_const_lv8_7,
        din8 => ap_const_lv8_0,
        din9 => ap_const_lv8_0,
        din10 => ap_const_lv8_0,
        din11 => ap_const_lv8_0,
        din12 => ap_const_lv8_0,
        din13 => ap_const_lv8_0,
        din14 => ap_const_lv8_0,
        din15 => ap_const_lv8_0,
        din16 => ap_const_lv8_0,
        din17 => ap_const_lv8_0,
        din18 => ap_const_lv8_7,
        din19 => ap_const_lv8_0,
        din20 => ap_const_lv8_0,
        din21 => ap_const_lv8_0,
        din22 => ap_const_lv8_0,
        din23 => ap_const_lv8_7,
        din24 => ap_const_lv8_C,
        din25 => ap_const_lv8_0,
        din26 => ap_const_lv8_0,
        din27 => ap_const_lv8_FF,
        din28 => ap_const_lv8_0,
        din29 => ap_const_lv8_0,
        din30 => ap_const_lv8_7,
        din31 => ap_const_lv8_0,
        din32 => nm_t_mid2_reg_1233_pp0_iter3_reg,
        dout => tmp_62_fu_958_p34);

    computeS2_mux_325yd2_x_x_x_U94 : component computeS2_mux_325yd2_x_x_x
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 8,
        din3_WIDTH => 8,
        din4_WIDTH => 8,
        din5_WIDTH => 8,
        din6_WIDTH => 8,
        din7_WIDTH => 8,
        din8_WIDTH => 8,
        din9_WIDTH => 8,
        din10_WIDTH => 8,
        din11_WIDTH => 8,
        din12_WIDTH => 8,
        din13_WIDTH => 8,
        din14_WIDTH => 8,
        din15_WIDTH => 8,
        din16_WIDTH => 8,
        din17_WIDTH => 8,
        din18_WIDTH => 8,
        din19_WIDTH => 8,
        din20_WIDTH => 8,
        din21_WIDTH => 8,
        din22_WIDTH => 8,
        din23_WIDTH => 8,
        din24_WIDTH => 8,
        din25_WIDTH => 8,
        din26_WIDTH => 8,
        din27_WIDTH => 8,
        din28_WIDTH => 8,
        din29_WIDTH => 8,
        din30_WIDTH => 8,
        din31_WIDTH => 8,
        din32_WIDTH => 5,
        dout_WIDTH => 8)
    port map (
        din0 => ap_const_lv8_0,
        din1 => ap_const_lv8_0,
        din2 => ap_const_lv8_0,
        din3 => ap_const_lv8_0,
        din4 => ap_const_lv8_0,
        din5 => ap_const_lv8_0,
        din6 => ap_const_lv8_6,
        din7 => ap_const_lv8_0,
        din8 => ap_const_lv8_4,
        din9 => ap_const_lv8_6,
        din10 => ap_const_lv8_0,
        din11 => ap_const_lv8_0,
        din12 => ap_const_lv8_0,
        din13 => ap_const_lv8_0,
        din14 => ap_const_lv8_0,
        din15 => ap_const_lv8_6,
        din16 => ap_const_lv8_5,
        din17 => ap_const_lv8_0,
        din18 => ap_const_lv8_0,
        din19 => ap_const_lv8_0,
        din20 => ap_const_lv8_0,
        din21 => ap_const_lv8_0,
        din22 => ap_const_lv8_0,
        din23 => ap_const_lv8_A,
        din24 => ap_const_lv8_0,
        din25 => ap_const_lv8_0,
        din26 => ap_const_lv8_0,
        din27 => ap_const_lv8_0,
        din28 => ap_const_lv8_0,
        din29 => ap_const_lv8_0,
        din30 => ap_const_lv8_0,
        din31 => ap_const_lv8_0,
        din32 => nm_t_mid2_reg_1233_pp0_iter3_reg,
        dout => tmp_63_fu_1033_p34);

    computeS2_mux_325yd2_x_x_x_U95 : component computeS2_mux_325yd2_x_x_x
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 8,
        din3_WIDTH => 8,
        din4_WIDTH => 8,
        din5_WIDTH => 8,
        din6_WIDTH => 8,
        din7_WIDTH => 8,
        din8_WIDTH => 8,
        din9_WIDTH => 8,
        din10_WIDTH => 8,
        din11_WIDTH => 8,
        din12_WIDTH => 8,
        din13_WIDTH => 8,
        din14_WIDTH => 8,
        din15_WIDTH => 8,
        din16_WIDTH => 8,
        din17_WIDTH => 8,
        din18_WIDTH => 8,
        din19_WIDTH => 8,
        din20_WIDTH => 8,
        din21_WIDTH => 8,
        din22_WIDTH => 8,
        din23_WIDTH => 8,
        din24_WIDTH => 8,
        din25_WIDTH => 8,
        din26_WIDTH => 8,
        din27_WIDTH => 8,
        din28_WIDTH => 8,
        din29_WIDTH => 8,
        din30_WIDTH => 8,
        din31_WIDTH => 8,
        din32_WIDTH => 5,
        dout_WIDTH => 8)
    port map (
        din0 => ap_const_lv8_0,
        din1 => ap_const_lv8_0,
        din2 => ap_const_lv8_0,
        din3 => ap_const_lv8_0,
        din4 => ap_const_lv8_6,
        din5 => ap_const_lv8_0,
        din6 => ap_const_lv8_0,
        din7 => ap_const_lv8_0,
        din8 => ap_const_lv8_FF,
        din9 => ap_const_lv8_0,
        din10 => ap_const_lv8_0,
        din11 => ap_const_lv8_5,
        din12 => ap_const_lv8_0,
        din13 => ap_const_lv8_0,
        din14 => ap_const_lv8_0,
        din15 => ap_const_lv8_C,
        din16 => ap_const_lv8_0,
        din17 => ap_const_lv8_0,
        din18 => ap_const_lv8_0,
        din19 => ap_const_lv8_5,
        din20 => ap_const_lv8_0,
        din21 => ap_const_lv8_0,
        din22 => ap_const_lv8_0,
        din23 => ap_const_lv8_0,
        din24 => ap_const_lv8_7,
        din25 => ap_const_lv8_0,
        din26 => ap_const_lv8_0,
        din27 => ap_const_lv8_0,
        din28 => ap_const_lv8_0,
        din29 => ap_const_lv8_FF,
        din30 => ap_const_lv8_0,
        din31 => ap_const_lv8_0,
        din32 => nm_t_mid2_reg_1233_pp0_iter3_reg,
        dout => tmp_64_fu_1108_p34);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2)) then 
                        ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state2);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                elsif ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    start_once_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                start_once_reg <= ap_const_logic_0;
            else
                if (((internal_ap_ready = ap_const_logic_0) and (real_start = ap_const_logic_1))) then 
                    start_once_reg <= ap_const_logic_1;
                elsif ((internal_ap_ready = ap_const_logic_1)) then 
                    start_once_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    indvar_flatten3_reg_221_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_flatten3_fu_297_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                indvar_flatten3_reg_221 <= indvar_flatten_next3_fu_303_p2;
            elsif ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                indvar_flatten3_reg_221 <= ap_const_lv20_0;
            end if; 
        end if;
    end process;

    indvar_flatten_reg_232_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_flatten3_fu_297_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                indvar_flatten_reg_232 <= indvar_flatten_next_fu_441_p3;
            elsif ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                indvar_flatten_reg_232 <= ap_const_lv14_0;
            end if; 
        end if;
    end process;

    macRegisters_0_V_1_fu_140_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_60_reg_1251_pp0_iter3_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                macRegisters_0_V_1_fu_140 <= macRegisters_0_V_fu_830_p2;
            elsif ((((tmp_60_reg_1251_pp0_iter3_reg = ap_const_lv1_1) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or (not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
                macRegisters_0_V_1_fu_140 <= ap_const_lv8_0;
            end if; 
        end if;
    end process;

    macRegisters_1_V_1_fu_144_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_60_reg_1251_pp0_iter3_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                macRegisters_1_V_1_fu_144 <= macRegisters_1_V_fu_839_p2;
            elsif ((((tmp_60_reg_1251_pp0_iter3_reg = ap_const_lv1_1) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or (not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
                macRegisters_1_V_1_fu_144 <= ap_const_lv8_0;
            end if; 
        end if;
    end process;

    macRegisters_2_V_1_fu_148_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_60_reg_1251_pp0_iter3_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                macRegisters_2_V_1_fu_148 <= macRegisters_2_V_fu_848_p2;
            elsif ((((tmp_60_reg_1251_pp0_iter3_reg = ap_const_lv1_1) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or (not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
                macRegisters_2_V_1_fu_148 <= ap_const_lv8_0;
            end if; 
        end if;
    end process;

    macRegisters_3_V_1_fu_152_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_60_reg_1251_pp0_iter3_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                macRegisters_3_V_1_fu_152 <= macRegisters_3_V_fu_857_p2;
            elsif ((((tmp_60_reg_1251_pp0_iter3_reg = ap_const_lv1_1) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or (not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
                macRegisters_3_V_1_fu_152 <= ap_const_lv8_0;
            end if; 
        end if;
    end process;

    nm_reg_243_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_flatten3_fu_297_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                nm_reg_243 <= nm_mid2_fu_405_p3;
            elsif ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                nm_reg_243 <= ap_const_lv6_0;
            end if; 
        end if;
    end process;

    sf_reg_254_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_flatten3_fu_297_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                sf_reg_254 <= sf_1_fu_429_p2;
            elsif ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                sf_reg_254 <= ap_const_lv8_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                exitcond_flatten3_reg_1224 <= exitcond_flatten3_fu_297_p2;
                exitcond_flatten3_reg_1224_pp0_iter1_reg <= exitcond_flatten3_reg_1224;
                nm_t_mid2_reg_1233_pp0_iter1_reg <= nm_t_mid2_reg_1233;
                tmp_60_reg_1251_pp0_iter1_reg <= tmp_60_reg_1251;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                exitcond_flatten3_reg_1224_pp0_iter2_reg <= exitcond_flatten3_reg_1224_pp0_iter1_reg;
                nm_t_mid2_reg_1233_pp0_iter2_reg <= nm_t_mid2_reg_1233_pp0_iter1_reg;
                nm_t_mid2_reg_1233_pp0_iter3_reg <= nm_t_mid2_reg_1233_pp0_iter2_reg;
                tmp_60_reg_1251_pp0_iter2_reg <= tmp_60_reg_1251_pp0_iter1_reg;
                tmp_60_reg_1251_pp0_iter3_reg <= tmp_60_reg_1251_pp0_iter2_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_flatten3_fu_297_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                nm_t_mid2_reg_1233 <= nm_t_mid2_fu_397_p3;
                tmp_37_reg_1246 <= tmp_37_fu_417_p2;
                tmp_60_reg_1251 <= tmp_60_fu_423_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_flatten3_reg_1224_pp0_iter2_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                tmp1_reg_1310 <= tmp1_fu_542_p2;
                tmp2_reg_1315 <= tmp2_fu_631_p2;
                tmp3_reg_1320 <= tmp3_fu_720_p2;
                tmp4_reg_1325 <= tmp4_fu_809_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_flatten3_reg_1224_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                tmp_V_reg_1285 <= in_V_V_dout;
                weights9_m_weights_V_11_reg_1305 <= weights9_m_weights_V_3_q0;
                weights9_m_weights_V_5_reg_1290 <= weights9_m_weights_V_q0;
                weights9_m_weights_V_7_reg_1295 <= weights9_m_weights_V_1_q0;
                weights9_m_weights_V_9_reg_1300 <= weights9_m_weights_V_2_q0;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (real_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, ap_enable_reg_pp0_iter4, exitcond_flatten3_fu_297_p2, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter3)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((exitcond_flatten3_fu_297_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) and not(((ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((((ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) or ((exitcond_flatten3_fu_297_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone)))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXX";
        end case;
    end process;
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(1);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state7 <= ap_CS_fsm(2);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(in_V_V_empty_n, out_V_V_full_n, ap_enable_reg_pp0_iter2, exitcond_flatten3_reg_1224_pp0_iter1_reg, ap_enable_reg_pp0_iter4, tmp_60_reg_1251_pp0_iter3_reg)
    begin
                ap_block_pp0_stage0_01001 <= (((tmp_60_reg_1251_pp0_iter3_reg = ap_const_lv1_1) and (out_V_V_full_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1)) or ((exitcond_flatten3_reg_1224_pp0_iter1_reg = ap_const_lv1_0) and (in_V_V_empty_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(in_V_V_empty_n, out_V_V_full_n, ap_enable_reg_pp0_iter2, exitcond_flatten3_reg_1224_pp0_iter1_reg, ap_enable_reg_pp0_iter4, tmp_60_reg_1251_pp0_iter3_reg)
    begin
                ap_block_pp0_stage0_11001 <= (((tmp_60_reg_1251_pp0_iter3_reg = ap_const_lv1_1) and (out_V_V_full_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1)) or ((exitcond_flatten3_reg_1224_pp0_iter1_reg = ap_const_lv1_0) and (in_V_V_empty_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(in_V_V_empty_n, out_V_V_full_n, ap_enable_reg_pp0_iter2, exitcond_flatten3_reg_1224_pp0_iter1_reg, ap_enable_reg_pp0_iter4, tmp_60_reg_1251_pp0_iter3_reg)
    begin
                ap_block_pp0_stage0_subdone <= (((tmp_60_reg_1251_pp0_iter3_reg = ap_const_lv1_1) and (out_V_V_full_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1)) or ((exitcond_flatten3_reg_1224_pp0_iter1_reg = ap_const_lv1_0) and (in_V_V_empty_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)));
    end process;


    ap_block_state1_assign_proc : process(real_start, ap_done_reg)
    begin
                ap_block_state1 <= ((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;

        ap_block_state2_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state4_pp0_stage0_iter2_assign_proc : process(in_V_V_empty_n, exitcond_flatten3_reg_1224_pp0_iter1_reg)
    begin
                ap_block_state4_pp0_stage0_iter2 <= ((exitcond_flatten3_reg_1224_pp0_iter1_reg = ap_const_lv1_0) and (in_V_V_empty_n = ap_const_logic_0));
    end process;

        ap_block_state5_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state6_pp0_stage0_iter4_assign_proc : process(out_V_V_full_n, tmp_60_reg_1251_pp0_iter3_reg)
    begin
                ap_block_state6_pp0_stage0_iter4 <= ((tmp_60_reg_1251_pp0_iter3_reg = ap_const_lv1_1) and (out_V_V_full_n = ap_const_logic_0));
    end process;


    ap_condition_pp0_exit_iter0_state2_assign_proc : process(exitcond_flatten3_fu_297_p2)
    begin
        if ((exitcond_flatten3_fu_297_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_done_reg, ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(real_start, ap_CS_fsm_state1)
    begin
        if (((real_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter3)
    begin
        if (((ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_ready <= internal_ap_ready;
    exitcond_flatten3_fu_297_p2 <= "1" when (indvar_flatten3_reg_221 = ap_const_lv20_80000) else "0";
    exitcond_flatten_fu_309_p2 <= "1" when (indvar_flatten_reg_232 = ap_const_lv14_1000) else "0";

    in_V_V_blk_n_assign_proc : process(in_V_V_empty_n, ap_enable_reg_pp0_iter2, ap_block_pp0_stage0, exitcond_flatten3_reg_1224_pp0_iter1_reg)
    begin
        if (((exitcond_flatten3_reg_1224_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            in_V_V_blk_n <= in_V_V_empty_n;
        else 
            in_V_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    in_V_V_read_assign_proc : process(ap_enable_reg_pp0_iter2, exitcond_flatten3_reg_1224_pp0_iter1_reg, ap_block_pp0_stage0_11001)
    begin
        if (((exitcond_flatten3_reg_1224_pp0_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            in_V_V_read <= ap_const_logic_1;
        else 
            in_V_V_read <= ap_const_logic_0;
        end if; 
    end process;

    indvar_flatten_next3_fu_303_p2 <= std_logic_vector(unsigned(ap_const_lv20_1) + unsigned(indvar_flatten3_reg_221));
    indvar_flatten_next_fu_441_p3 <= 
        ap_const_lv14_1 when (exitcond_flatten_fu_309_p2(0) = '1') else 
        indvar_flatten_op_fu_435_p2;
    indvar_flatten_op_fu_435_p2 <= std_logic_vector(unsigned(indvar_flatten_reg_232) + unsigned(ap_const_lv14_1));

    internal_ap_ready_assign_proc : process(ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            internal_ap_ready <= ap_const_logic_1;
        else 
            internal_ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    macRegisters_0_V_fu_830_p2 <= std_logic_vector(signed(tmp1_cast_fu_827_p1) + signed(macRegisters_0_V_1_fu_140));
    macRegisters_1_V_fu_839_p2 <= std_logic_vector(signed(tmp2_cast_fu_836_p1) + signed(macRegisters_1_V_1_fu_144));
    macRegisters_2_V_fu_848_p2 <= std_logic_vector(signed(tmp3_cast_fu_845_p1) + signed(macRegisters_2_V_1_fu_148));
    macRegisters_3_V_fu_857_p2 <= std_logic_vector(signed(tmp4_cast_fu_854_p1) + signed(macRegisters_3_V_1_fu_152));
    nm_1_fu_357_p2 <= std_logic_vector(unsigned(ap_const_lv6_1) + unsigned(nm_mid_fu_315_p3));
    nm_mid2_fu_405_p3 <= 
        nm_1_fu_357_p2 when (tmp_91_mid_fu_351_p2(0) = '1') else 
        nm_mid_fu_315_p3;
    nm_mid_fu_315_p3 <= 
        ap_const_lv6_0 when (exitcond_flatten_fu_309_p2(0) = '1') else 
        nm_reg_243;
    nm_t_mid2_fu_397_p3 <= 
        tmp_309_fu_377_p1 when (tmp_91_mid_fu_351_p2(0) = '1') else 
        nm_t_mid_fu_331_p3;
    nm_t_mid_fu_331_p3 <= 
        ap_const_lv5_0 when (exitcond_flatten_fu_309_p2(0) = '1') else 
        tmp_fu_285_p1;
    not_exitcond_flatten_fu_339_p2 <= (exitcond_flatten_fu_309_p2 xor ap_const_lv1_1);

    out_V_V_blk_n_assign_proc : process(out_V_V_full_n, ap_block_pp0_stage0, ap_enable_reg_pp0_iter4, tmp_60_reg_1251_pp0_iter3_reg)
    begin
        if (((tmp_60_reg_1251_pp0_iter3_reg = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1))) then 
            out_V_V_blk_n <= out_V_V_full_n;
        else 
            out_V_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    out_V_V_din <= (((p_Val2_22_3_fu_1177_p2 & p_Val2_22_2_fu_1102_p2) & p_Val2_22_1_fu_1027_p2) & p_Val2_s_fu_952_p2);

    out_V_V_write_assign_proc : process(ap_enable_reg_pp0_iter4, tmp_60_reg_1251_pp0_iter3_reg, ap_block_pp0_stage0_11001)
    begin
        if (((tmp_60_reg_1251_pp0_iter3_reg = ap_const_lv1_1) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            out_V_V_write <= ap_const_logic_1;
        else 
            out_V_V_write <= ap_const_logic_0;
        end if; 
    end process;

        p_08_cast_cast_fu_456_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_V_reg_1285),12));

    p_Val2_1_fu_551_p0 <= p_08_cast_cast_fu_456_p1(8 - 1 downto 0);
    p_Val2_1_fu_551_p1 <= weights9_m_weights_V_7_reg_1295;
    p_Val2_1_fu_551_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(p_Val2_1_fu_551_p0) * signed(p_Val2_1_fu_551_p1))), 12));
    p_Val2_22_1_fu_1027_p2 <= std_logic_vector(unsigned(macRegisters_1_V_fu_839_p2) + unsigned(tmp_62_fu_958_p34));
    p_Val2_22_2_fu_1102_p2 <= std_logic_vector(unsigned(macRegisters_2_V_fu_848_p2) + unsigned(tmp_63_fu_1033_p34));
    p_Val2_22_3_fu_1177_p2 <= std_logic_vector(unsigned(macRegisters_3_V_fu_857_p2) + unsigned(tmp_64_fu_1108_p34));
    p_Val2_2_fu_640_p0 <= p_08_cast_cast_fu_456_p1(8 - 1 downto 0);
    p_Val2_2_fu_640_p1 <= weights9_m_weights_V_9_reg_1300;
    p_Val2_2_fu_640_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(p_Val2_2_fu_640_p0) * signed(p_Val2_2_fu_640_p1))), 12));
    p_Val2_3_fu_729_p0 <= p_08_cast_cast_fu_456_p1(8 - 1 downto 0);
    p_Val2_3_fu_729_p1 <= weights9_m_weights_V_11_reg_1305;
    p_Val2_3_fu_729_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(p_Val2_3_fu_729_p0) * signed(p_Val2_3_fu_729_p1))), 12));
        p_Val2_81_1_cast_c_fu_575_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_315_fu_565_p4),6));

        p_Val2_81_2_cast_c_fu_664_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_319_fu_654_p4),6));

        p_Val2_81_3_cast_c_fu_753_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_323_fu_743_p4),6));

        p_Val2_cast_cast_fu_486_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_311_fu_476_p4),6));

    p_Val2_s_132_fu_462_p0 <= p_08_cast_cast_fu_456_p1(8 - 1 downto 0);
    p_Val2_s_132_fu_462_p1 <= weights9_m_weights_V_5_reg_1290;
    p_Val2_s_132_fu_462_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(p_Val2_s_132_fu_462_p0) * signed(p_Val2_s_132_fu_462_p1))), 12));
    p_Val2_s_fu_952_p2 <= std_logic_vector(unsigned(macRegisters_0_V_fu_830_p2) + unsigned(tmp_61_fu_883_p34));
    qb_assign_2_1_fu_621_p2 <= (tmp_316_fu_579_p3 and tmp_227_1_fu_615_p2);
    qb_assign_2_2_fu_710_p2 <= (tmp_320_fu_668_p3 and tmp_227_2_fu_704_p2);
    qb_assign_2_3_fu_799_p2 <= (tmp_324_fu_757_p3 and tmp_227_3_fu_793_p2);
    qb_assign_2_fu_532_p2 <= (tmp_44_fu_526_p2 and tmp_312_fu_490_p3);

    real_start_assign_proc : process(ap_start, start_full_n, start_once_reg)
    begin
        if (((start_once_reg = ap_const_logic_0) and (start_full_n = ap_const_logic_0))) then 
            real_start <= ap_const_logic_0;
        else 
            real_start <= ap_start;
        end if; 
    end process;

    sf_1_fu_429_p2 <= std_logic_vector(unsigned(sf_mid2_fu_369_p3) + unsigned(ap_const_lv8_1));
    sf_cast1_fu_413_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sf_mid2_fu_369_p3),12));
    sf_mid2_fu_369_p3 <= 
        ap_const_lv8_0 when (tmp_270_fu_363_p2(0) = '1') else 
        sf_reg_254;
    start_out <= real_start;

    start_write_assign_proc : process(real_start, start_once_reg)
    begin
        if (((start_once_reg = ap_const_logic_0) and (real_start = ap_const_logic_1))) then 
            start_write <= ap_const_logic_1;
        else 
            start_write <= ap_const_logic_0;
        end if; 
    end process;

        tmp1_cast_fu_827_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp1_reg_1310),8));

    tmp1_fu_542_p2 <= std_logic_vector(signed(p_Val2_cast_cast_fu_486_p1) + signed(tmp_138_cast_cast_fu_538_p1));
        tmp2_cast_fu_836_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp2_reg_1315),8));

    tmp2_fu_631_p2 <= std_logic_vector(signed(p_Val2_81_1_cast_c_fu_575_p1) + signed(tmp_228_1_cast_cast_fu_627_p1));
        tmp3_cast_fu_845_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp3_reg_1320),8));

    tmp3_fu_720_p2 <= std_logic_vector(signed(p_Val2_81_2_cast_c_fu_664_p1) + signed(tmp_228_2_cast_cast_fu_716_p1));
        tmp4_cast_fu_854_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp4_reg_1325),8));

    tmp4_fu_809_p2 <= std_logic_vector(signed(p_Val2_81_3_cast_c_fu_753_p1) + signed(tmp_228_3_cast_cast_fu_805_p1));
    tmp_138_cast_cast_fu_538_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(qb_assign_2_fu_532_p2),6));
    tmp_227_1_fu_615_p2 <= "0" when (tmp_49_fu_607_p3 = ap_const_lv6_0) else "1";
    tmp_227_2_fu_704_p2 <= "0" when (tmp_54_fu_696_p3 = ap_const_lv6_0) else "1";
    tmp_227_3_fu_793_p2 <= "0" when (tmp_59_fu_785_p3 = ap_const_lv6_0) else "1";
    tmp_228_1_cast_cast_fu_627_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(qb_assign_2_1_fu_621_p2),6));
    tmp_228_2_cast_cast_fu_716_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(qb_assign_2_2_fu_710_p2),6));
    tmp_228_3_cast_cast_fu_805_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(qb_assign_2_3_fu_799_p2),6));
    tmp_270_fu_363_p2 <= (tmp_91_mid_fu_351_p2 or exitcond_flatten_fu_309_p2);
    tmp_289_fu_345_p2 <= "1" when (sf_reg_254 = ap_const_lv8_80) else "0";
    tmp_309_fu_377_p1 <= nm_1_fu_357_p2(5 - 1 downto 0);
    tmp_310_fu_468_p3 <= p_Val2_s_132_fu_462_p2(11 downto 11);
    tmp_311_fu_476_p4 <= p_Val2_s_132_fu_462_p2(11 downto 7);
    tmp_312_fu_490_p3 <= p_Val2_s_132_fu_462_p2(6 downto 6);
    tmp_313_fu_498_p1 <= p_Val2_s_132_fu_462_p2(1 - 1 downto 0);
    tmp_314_fu_557_p3 <= p_Val2_1_fu_551_p2(11 downto 11);
    tmp_315_fu_565_p4 <= p_Val2_1_fu_551_p2(11 downto 7);
    tmp_316_fu_579_p3 <= p_Val2_1_fu_551_p2(6 downto 6);
    tmp_317_fu_587_p1 <= p_Val2_1_fu_551_p2(1 - 1 downto 0);
    tmp_318_fu_646_p3 <= p_Val2_2_fu_640_p2(11 downto 11);
    tmp_319_fu_654_p4 <= p_Val2_2_fu_640_p2(11 downto 7);
    tmp_320_fu_668_p3 <= p_Val2_2_fu_640_p2(6 downto 6);
    tmp_321_fu_676_p1 <= p_Val2_2_fu_640_p2(1 - 1 downto 0);
    tmp_322_fu_735_p3 <= p_Val2_3_fu_729_p2(11 downto 11);
    tmp_323_fu_743_p4 <= p_Val2_3_fu_729_p2(11 downto 7);
    tmp_324_fu_757_p3 <= p_Val2_3_fu_729_p2(6 downto 6);
    tmp_325_fu_765_p1 <= p_Val2_3_fu_729_p2(1 - 1 downto 0);
    tmp_37_fu_417_p2 <= std_logic_vector(unsigned(tmp_90_mid2_fu_389_p3) + unsigned(sf_cast1_fu_413_p1));
    tmp_38_fu_449_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_37_reg_1246),64));
    tmp_41_fu_502_p2 <= (tmp_313_fu_498_p1 or tmp_310_fu_468_p3);
    tmp_42_fu_508_p4 <= p_Val2_s_132_fu_462_p2(5 downto 1);
    tmp_43_fu_518_p3 <= (tmp_42_fu_508_p4 & tmp_41_fu_502_p2);
    tmp_44_fu_526_p2 <= "0" when (tmp_43_fu_518_p3 = ap_const_lv6_0) else "1";
    tmp_47_fu_591_p2 <= (tmp_317_fu_587_p1 or tmp_314_fu_557_p3);
    tmp_48_fu_597_p4 <= p_Val2_1_fu_551_p2(5 downto 1);
    tmp_49_fu_607_p3 <= (tmp_48_fu_597_p4 & tmp_47_fu_591_p2);
    tmp_52_fu_680_p2 <= (tmp_321_fu_676_p1 or tmp_318_fu_646_p3);
    tmp_53_fu_686_p4 <= p_Val2_2_fu_640_p2(5 downto 1);
    tmp_54_fu_696_p3 <= (tmp_53_fu_686_p4 & tmp_52_fu_680_p2);
    tmp_57_fu_769_p2 <= (tmp_325_fu_765_p1 or tmp_322_fu_735_p3);
    tmp_58_fu_775_p4 <= p_Val2_3_fu_729_p2(5 downto 1);
    tmp_59_fu_785_p3 <= (tmp_58_fu_775_p4 & tmp_57_fu_769_p2);
    tmp_60_fu_423_p2 <= "1" when (sf_mid2_fu_369_p3 = ap_const_lv8_7F) else "0";
    tmp_90_mid1_fu_381_p3 <= (tmp_309_fu_377_p1 & ap_const_lv7_0);
    tmp_90_mid2_fu_389_p3 <= 
        tmp_90_mid1_fu_381_p3 when (tmp_91_mid_fu_351_p2(0) = '1') else 
        tmp_90_mid_fu_323_p3;
    tmp_90_mid_fu_323_p3 <= 
        ap_const_lv12_0 when (exitcond_flatten_fu_309_p2(0) = '1') else 
        tmp_s_fu_289_p3;
    tmp_91_mid_fu_351_p2 <= (tmp_289_fu_345_p2 and not_exitcond_flatten_fu_339_p2);
    tmp_fu_285_p1 <= nm_reg_243(5 - 1 downto 0);
    tmp_s_fu_289_p3 <= (tmp_fu_285_p1 & ap_const_lv7_0);
    weights9_m_weights_V_1_address0 <= tmp_38_fu_449_p1(12 - 1 downto 0);

    weights9_m_weights_V_1_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            weights9_m_weights_V_1_ce0 <= ap_const_logic_1;
        else 
            weights9_m_weights_V_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    weights9_m_weights_V_2_address0 <= tmp_38_fu_449_p1(12 - 1 downto 0);

    weights9_m_weights_V_2_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            weights9_m_weights_V_2_ce0 <= ap_const_logic_1;
        else 
            weights9_m_weights_V_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    weights9_m_weights_V_3_address0 <= tmp_38_fu_449_p1(12 - 1 downto 0);

    weights9_m_weights_V_3_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            weights9_m_weights_V_3_ce0 <= ap_const_logic_1;
        else 
            weights9_m_weights_V_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    weights9_m_weights_V_address0 <= tmp_38_fu_449_p1(12 - 1 downto 0);

    weights9_m_weights_V_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            weights9_m_weights_V_ce0 <= ap_const_logic_1;
        else 
            weights9_m_weights_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

end behav;
