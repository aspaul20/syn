// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _Conv1DMac_new_1_HH_
#define _Conv1DMac_new_1_HH_

#include "systemc.h"
#include "AESL_pkg.h"

#include "computeS2_mux_325yd2_x_x_x_x.h"
#include "Conv1DMac_new_1_wQgW.h"
#include "Conv1DMac_new_1_wRg6.h"
#include "Conv1DMac_new_1_wShg.h"
#include "Conv1DMac_new_1_wThq.h"

namespace ap_rtl {

struct Conv1DMac_new_1 : public sc_module {
    // Port declarations 16
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_in< sc_logic > start_full_n;
    sc_out< sc_logic > ap_done;
    sc_in< sc_logic > ap_continue;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_out< sc_logic > start_out;
    sc_out< sc_logic > start_write;
    sc_in< sc_lv<8> > in_V_V_dout;
    sc_in< sc_logic > in_V_V_empty_n;
    sc_out< sc_logic > in_V_V_read;
    sc_out< sc_lv<32> > out_V_V_din;
    sc_in< sc_logic > out_V_V_full_n;
    sc_out< sc_logic > out_V_V_write;
    sc_signal< sc_lv<8> > ap_var_for_const0;
    sc_signal< sc_lv<8> > ap_var_for_const1;
    sc_signal< sc_lv<8> > ap_var_for_const2;


    // Module declarations
    Conv1DMac_new_1(sc_module_name name);
    SC_HAS_PROCESS(Conv1DMac_new_1);

    ~Conv1DMac_new_1();

    sc_trace_file* mVcdFile;

    Conv1DMac_new_1_wQgW* weights10_m_weights_3_U;
    Conv1DMac_new_1_wRg6* weights10_m_weights_2_U;
    Conv1DMac_new_1_wShg* weights10_m_weights_1_U;
    Conv1DMac_new_1_wThq* weights10_m_weights_s_U;
    computeS2_mux_325yd2_x_x_x_x<1,1,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,5,8>* computeS2_mux_325yd2_x_x_x_x_U111;
    computeS2_mux_325yd2_x_x_x_x<1,1,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,5,8>* computeS2_mux_325yd2_x_x_x_x_U112;
    computeS2_mux_325yd2_x_x_x_x<1,1,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,5,8>* computeS2_mux_325yd2_x_x_x_x_U113;
    computeS2_mux_325yd2_x_x_x_x<1,1,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,5,8>* computeS2_mux_325yd2_x_x_x_x_U114;
    sc_signal< sc_logic > real_start;
    sc_signal< sc_logic > start_once_reg;
    sc_signal< sc_logic > ap_done_reg;
    sc_signal< sc_lv<3> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_logic > internal_ap_ready;
    sc_signal< sc_lv<12> > weights10_m_weights_3_address0;
    sc_signal< sc_logic > weights10_m_weights_3_ce0;
    sc_signal< sc_lv<7> > weights10_m_weights_3_q0;
    sc_signal< sc_lv<12> > weights10_m_weights_2_address0;
    sc_signal< sc_logic > weights10_m_weights_2_ce0;
    sc_signal< sc_lv<7> > weights10_m_weights_2_q0;
    sc_signal< sc_lv<12> > weights10_m_weights_1_address0;
    sc_signal< sc_logic > weights10_m_weights_1_ce0;
    sc_signal< sc_lv<7> > weights10_m_weights_1_q0;
    sc_signal< sc_lv<12> > weights10_m_weights_s_address0;
    sc_signal< sc_logic > weights10_m_weights_s_ce0;
    sc_signal< sc_lv<7> > weights10_m_weights_s_q0;
    sc_signal< sc_logic > in_V_V_blk_n;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter2;
    sc_signal< bool > ap_block_pp0_stage0;
    sc_signal< sc_lv<1> > exitcond_flatten6_reg_1171;
    sc_signal< sc_lv<1> > exitcond_flatten6_reg_1171_pp0_iter1_reg;
    sc_signal< sc_logic > out_V_V_blk_n;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter4;
    sc_signal< sc_lv<1> > tmp_100_reg_1198;
    sc_signal< sc_lv<1> > tmp_100_reg_1198_pp0_iter3_reg;
    sc_signal< sc_lv<20> > indvar_flatten6_reg_207;
    sc_signal< sc_lv<14> > indvar_flatten_reg_218;
    sc_signal< sc_lv<6> > nm_reg_229;
    sc_signal< sc_lv<8> > sf_reg_240;
    sc_signal< sc_lv<1> > exitcond_flatten6_fu_283_p2;
    sc_signal< sc_logic > ap_CS_fsm_pp0_stage0;
    sc_signal< bool > ap_block_state2_pp0_stage0_iter0;
    sc_signal< bool > ap_block_state3_pp0_stage0_iter1;
    sc_signal< bool > ap_block_state4_pp0_stage0_iter2;
    sc_signal< bool > ap_block_state5_pp0_stage0_iter3;
    sc_signal< bool > ap_block_state6_pp0_stage0_iter4;
    sc_signal< bool > ap_block_pp0_stage0_11001;
    sc_signal< sc_lv<20> > indvar_flatten_next6_fu_289_p2;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter0;
    sc_signal< sc_lv<5> > nm_t_mid2_fu_383_p3;
    sc_signal< sc_lv<5> > nm_t_mid2_reg_1180;
    sc_signal< sc_lv<5> > nm_t_mid2_reg_1180_pp0_iter1_reg;
    sc_signal< sc_lv<5> > nm_t_mid2_reg_1180_pp0_iter2_reg;
    sc_signal< sc_lv<6> > nm_mid2_fu_391_p3;
    sc_signal< sc_lv<12> > tmp_98_fu_403_p2;
    sc_signal< sc_lv<12> > tmp_98_reg_1193;
    sc_signal< sc_lv<1> > tmp_100_fu_409_p2;
    sc_signal< sc_lv<1> > tmp_100_reg_1198_pp0_iter1_reg;
    sc_signal< sc_lv<1> > tmp_100_reg_1198_pp0_iter2_reg;
    sc_signal< sc_lv<8> > sf_2_fu_415_p2;
    sc_signal< sc_lv<14> > indvar_flatten_next_fu_427_p3;
    sc_signal< sc_lv<8> > tmp_101_reg_1232;
    sc_signal< sc_lv<1> > tmp_354_reg_1237;
    sc_signal< sc_lv<1> > tmp_106_fu_510_p2;
    sc_signal< sc_lv<1> > tmp_106_reg_1242;
    sc_signal< sc_lv<8> > tmp_108_reg_1247;
    sc_signal< sc_lv<1> > tmp_357_reg_1252;
    sc_signal< sc_lv<1> > tmp_227_1_fu_580_p2;
    sc_signal< sc_lv<1> > tmp_227_1_reg_1257;
    sc_signal< sc_lv<8> > tmp_113_reg_1262;
    sc_signal< sc_lv<1> > tmp_360_reg_1267;
    sc_signal< sc_lv<1> > tmp_227_2_fu_650_p2;
    sc_signal< sc_lv<1> > tmp_227_2_reg_1272;
    sc_signal< sc_lv<8> > tmp_118_reg_1277;
    sc_signal< sc_lv<1> > tmp_363_reg_1282;
    sc_signal< sc_lv<1> > tmp_227_3_fu_720_p2;
    sc_signal< sc_lv<1> > tmp_227_3_reg_1287;
    sc_signal< sc_lv<8> > p_Val2_s_fu_903_p2;
    sc_signal< sc_lv<8> > p_Val2_s_reg_1292;
    sc_signal< sc_lv<8> > p_Val2_22_1_fu_978_p2;
    sc_signal< sc_lv<8> > p_Val2_22_1_reg_1297;
    sc_signal< sc_lv<8> > p_Val2_22_2_fu_1053_p2;
    sc_signal< sc_lv<8> > p_Val2_22_2_reg_1302;
    sc_signal< sc_lv<8> > p_Val2_22_3_fu_1128_p2;
    sc_signal< sc_lv<8> > p_Val2_22_3_reg_1307;
    sc_signal< bool > ap_block_state1;
    sc_signal< bool > ap_block_pp0_stage0_subdone;
    sc_signal< sc_logic > ap_condition_pp0_exit_iter0_state2;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter1;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter3;
    sc_signal< sc_lv<64> > tmp_99_fu_435_p1;
    sc_signal< bool > ap_block_pp0_stage0_01001;
    sc_signal< sc_lv<8> > macRegisters_0_V_4_fu_126;
    sc_signal< sc_lv<8> > macRegisters_0_V_fu_752_p2;
    sc_signal< sc_lv<8> > macRegisters_1_V_4_fu_130;
    sc_signal< sc_lv<8> > macRegisters_1_V_fu_771_p2;
    sc_signal< sc_lv<8> > macRegisters_2_V_4_fu_134;
    sc_signal< sc_lv<8> > macRegisters_2_V_fu_790_p2;
    sc_signal< sc_lv<8> > macRegisters_3_V_4_fu_138;
    sc_signal< sc_lv<8> > macRegisters_3_V_fu_809_p2;
    sc_signal< sc_lv<5> > tmp_fu_271_p1;
    sc_signal< sc_lv<1> > exitcond_flatten_fu_295_p2;
    sc_signal< sc_lv<12> > tmp_96_fu_275_p3;
    sc_signal< sc_lv<1> > tmp_54_fu_331_p2;
    sc_signal< sc_lv<1> > not_exitcond_flatten_fu_325_p2;
    sc_signal< sc_lv<6> > nm_mid_fu_301_p3;
    sc_signal< sc_lv<1> > tmp_97_mid_fu_337_p2;
    sc_signal< sc_lv<1> > tmp_276_fu_349_p2;
    sc_signal< sc_lv<6> > nm_2_fu_343_p2;
    sc_signal< sc_lv<5> > tmp_352_fu_363_p1;
    sc_signal< sc_lv<12> > tmp_96_mid1_fu_367_p3;
    sc_signal< sc_lv<12> > tmp_96_mid_fu_309_p3;
    sc_signal< sc_lv<5> > nm_t_mid_fu_317_p3;
    sc_signal< sc_lv<8> > sf_mid2_fu_355_p3;
    sc_signal< sc_lv<12> > sf_cast1_fu_399_p1;
    sc_signal< sc_lv<12> > tmp_96_mid2_fu_375_p3;
    sc_signal< sc_lv<14> > indvar_flatten_op_fu_421_p2;
    sc_signal< sc_lv<7> > p_Val2_s_133_fu_450_p0;
    sc_signal< sc_lv<8> > p_Val2_s_133_fu_450_p1;
    sc_signal< sc_lv<15> > p_08_cast_fu_442_p1;
    sc_signal< sc_lv<15> > p_Val2_s_133_fu_450_p2;
    sc_signal< sc_lv<1> > tmp_355_fu_482_p1;
    sc_signal< sc_lv<1> > tmp_353_fu_456_p3;
    sc_signal< sc_lv<5> > tmp_104_fu_492_p4;
    sc_signal< sc_lv<1> > tmp_103_fu_486_p2;
    sc_signal< sc_lv<6> > tmp_105_fu_502_p3;
    sc_signal< sc_lv<7> > p_Val2_1_fu_520_p0;
    sc_signal< sc_lv<8> > p_Val2_1_fu_520_p1;
    sc_signal< sc_lv<15> > p_Val2_1_fu_520_p2;
    sc_signal< sc_lv<1> > tmp_358_fu_552_p1;
    sc_signal< sc_lv<1> > tmp_356_fu_526_p3;
    sc_signal< sc_lv<5> > tmp_111_fu_562_p4;
    sc_signal< sc_lv<1> > tmp_110_fu_556_p2;
    sc_signal< sc_lv<6> > tmp_112_fu_572_p3;
    sc_signal< sc_lv<7> > p_Val2_2_fu_590_p0;
    sc_signal< sc_lv<8> > p_Val2_2_fu_590_p1;
    sc_signal< sc_lv<15> > p_Val2_2_fu_590_p2;
    sc_signal< sc_lv<1> > tmp_361_fu_622_p1;
    sc_signal< sc_lv<1> > tmp_359_fu_596_p3;
    sc_signal< sc_lv<5> > tmp_116_fu_632_p4;
    sc_signal< sc_lv<1> > tmp_115_fu_626_p2;
    sc_signal< sc_lv<6> > tmp_117_fu_642_p3;
    sc_signal< sc_lv<7> > p_Val2_3_fu_660_p0;
    sc_signal< sc_lv<8> > p_Val2_3_fu_660_p1;
    sc_signal< sc_lv<15> > p_Val2_3_fu_660_p2;
    sc_signal< sc_lv<1> > tmp_364_fu_692_p1;
    sc_signal< sc_lv<1> > tmp_362_fu_666_p3;
    sc_signal< sc_lv<5> > tmp_121_fu_702_p4;
    sc_signal< sc_lv<1> > tmp_120_fu_696_p2;
    sc_signal< sc_lv<6> > tmp_122_fu_712_p3;
    sc_signal< sc_lv<1> > qb_assign_2_fu_738_p2;
    sc_signal< sc_lv<8> > tmp_107_fu_742_p1;
    sc_signal< sc_lv<8> > tmp1_fu_746_p2;
    sc_signal< sc_lv<1> > qb_assign_2_1_fu_757_p2;
    sc_signal< sc_lv<8> > tmp_228_1_fu_761_p1;
    sc_signal< sc_lv<8> > tmp2_fu_765_p2;
    sc_signal< sc_lv<1> > qb_assign_2_2_fu_776_p2;
    sc_signal< sc_lv<8> > tmp_228_2_fu_780_p1;
    sc_signal< sc_lv<8> > tmp3_fu_784_p2;
    sc_signal< sc_lv<1> > qb_assign_2_3_fu_795_p2;
    sc_signal< sc_lv<8> > tmp_228_3_fu_799_p1;
    sc_signal< sc_lv<8> > tmp4_fu_803_p2;
    sc_signal< sc_lv<8> > tmp_123_fu_834_p34;
    sc_signal< sc_lv<8> > tmp_124_fu_909_p34;
    sc_signal< sc_lv<8> > tmp_125_fu_984_p34;
    sc_signal< sc_lv<8> > tmp_126_fu_1059_p34;
    sc_signal< sc_logic > ap_CS_fsm_state7;
    sc_signal< sc_lv<3> > ap_NS_fsm;
    sc_signal< sc_logic > ap_idle_pp0;
    sc_signal< sc_logic > ap_enable_pp0;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<3> ap_ST_fsm_state1;
    static const sc_lv<3> ap_ST_fsm_pp0_stage0;
    static const sc_lv<3> ap_ST_fsm_state7;
    static const bool ap_const_boolean_1;
    static const sc_lv<32> ap_const_lv32_0;
    static const bool ap_const_boolean_0;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<20> ap_const_lv20_0;
    static const sc_lv<14> ap_const_lv14_0;
    static const sc_lv<6> ap_const_lv6_0;
    static const sc_lv<8> ap_const_lv8_0;
    static const sc_lv<7> ap_const_lv7_0;
    static const sc_lv<20> ap_const_lv20_80000;
    static const sc_lv<20> ap_const_lv20_1;
    static const sc_lv<14> ap_const_lv14_1000;
    static const sc_lv<12> ap_const_lv12_0;
    static const sc_lv<5> ap_const_lv5_0;
    static const sc_lv<8> ap_const_lv8_80;
    static const sc_lv<6> ap_const_lv6_1;
    static const sc_lv<8> ap_const_lv8_7F;
    static const sc_lv<8> ap_const_lv8_1;
    static const sc_lv<14> ap_const_lv14_1;
    static const sc_lv<32> ap_const_lv32_E;
    static const sc_lv<32> ap_const_lv32_7;
    static const sc_lv<32> ap_const_lv32_6;
    static const sc_lv<32> ap_const_lv32_5;
    static const sc_lv<8> ap_const_lv8_FF;
    static const sc_lv<32> ap_const_lv32_2;
    // Thread declarations
    void thread_ap_var_for_const0();
    void thread_ap_var_for_const1();
    void thread_ap_var_for_const2();
    void thread_ap_clk_no_reset_();
    void thread_ap_CS_fsm_pp0_stage0();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state7();
    void thread_ap_block_pp0_stage0();
    void thread_ap_block_pp0_stage0_01001();
    void thread_ap_block_pp0_stage0_11001();
    void thread_ap_block_pp0_stage0_subdone();
    void thread_ap_block_state1();
    void thread_ap_block_state2_pp0_stage0_iter0();
    void thread_ap_block_state3_pp0_stage0_iter1();
    void thread_ap_block_state4_pp0_stage0_iter2();
    void thread_ap_block_state5_pp0_stage0_iter3();
    void thread_ap_block_state6_pp0_stage0_iter4();
    void thread_ap_condition_pp0_exit_iter0_state2();
    void thread_ap_done();
    void thread_ap_enable_pp0();
    void thread_ap_idle();
    void thread_ap_idle_pp0();
    void thread_ap_ready();
    void thread_exitcond_flatten6_fu_283_p2();
    void thread_exitcond_flatten_fu_295_p2();
    void thread_in_V_V_blk_n();
    void thread_in_V_V_read();
    void thread_indvar_flatten_next6_fu_289_p2();
    void thread_indvar_flatten_next_fu_427_p3();
    void thread_indvar_flatten_op_fu_421_p2();
    void thread_internal_ap_ready();
    void thread_macRegisters_0_V_fu_752_p2();
    void thread_macRegisters_1_V_fu_771_p2();
    void thread_macRegisters_2_V_fu_790_p2();
    void thread_macRegisters_3_V_fu_809_p2();
    void thread_nm_2_fu_343_p2();
    void thread_nm_mid2_fu_391_p3();
    void thread_nm_mid_fu_301_p3();
    void thread_nm_t_mid2_fu_383_p3();
    void thread_nm_t_mid_fu_317_p3();
    void thread_not_exitcond_flatten_fu_325_p2();
    void thread_out_V_V_blk_n();
    void thread_out_V_V_din();
    void thread_out_V_V_write();
    void thread_p_08_cast_fu_442_p1();
    void thread_p_Val2_1_fu_520_p0();
    void thread_p_Val2_1_fu_520_p1();
    void thread_p_Val2_1_fu_520_p2();
    void thread_p_Val2_22_1_fu_978_p2();
    void thread_p_Val2_22_2_fu_1053_p2();
    void thread_p_Val2_22_3_fu_1128_p2();
    void thread_p_Val2_2_fu_590_p0();
    void thread_p_Val2_2_fu_590_p1();
    void thread_p_Val2_2_fu_590_p2();
    void thread_p_Val2_3_fu_660_p0();
    void thread_p_Val2_3_fu_660_p1();
    void thread_p_Val2_3_fu_660_p2();
    void thread_p_Val2_s_133_fu_450_p0();
    void thread_p_Val2_s_133_fu_450_p1();
    void thread_p_Val2_s_133_fu_450_p2();
    void thread_p_Val2_s_fu_903_p2();
    void thread_qb_assign_2_1_fu_757_p2();
    void thread_qb_assign_2_2_fu_776_p2();
    void thread_qb_assign_2_3_fu_795_p2();
    void thread_qb_assign_2_fu_738_p2();
    void thread_real_start();
    void thread_sf_2_fu_415_p2();
    void thread_sf_cast1_fu_399_p1();
    void thread_sf_mid2_fu_355_p3();
    void thread_start_out();
    void thread_start_write();
    void thread_tmp1_fu_746_p2();
    void thread_tmp2_fu_765_p2();
    void thread_tmp3_fu_784_p2();
    void thread_tmp4_fu_803_p2();
    void thread_tmp_100_fu_409_p2();
    void thread_tmp_103_fu_486_p2();
    void thread_tmp_104_fu_492_p4();
    void thread_tmp_105_fu_502_p3();
    void thread_tmp_106_fu_510_p2();
    void thread_tmp_107_fu_742_p1();
    void thread_tmp_110_fu_556_p2();
    void thread_tmp_111_fu_562_p4();
    void thread_tmp_112_fu_572_p3();
    void thread_tmp_115_fu_626_p2();
    void thread_tmp_116_fu_632_p4();
    void thread_tmp_117_fu_642_p3();
    void thread_tmp_120_fu_696_p2();
    void thread_tmp_121_fu_702_p4();
    void thread_tmp_122_fu_712_p3();
    void thread_tmp_227_1_fu_580_p2();
    void thread_tmp_227_2_fu_650_p2();
    void thread_tmp_227_3_fu_720_p2();
    void thread_tmp_228_1_fu_761_p1();
    void thread_tmp_228_2_fu_780_p1();
    void thread_tmp_228_3_fu_799_p1();
    void thread_tmp_276_fu_349_p2();
    void thread_tmp_352_fu_363_p1();
    void thread_tmp_353_fu_456_p3();
    void thread_tmp_355_fu_482_p1();
    void thread_tmp_356_fu_526_p3();
    void thread_tmp_358_fu_552_p1();
    void thread_tmp_359_fu_596_p3();
    void thread_tmp_361_fu_622_p1();
    void thread_tmp_362_fu_666_p3();
    void thread_tmp_364_fu_692_p1();
    void thread_tmp_54_fu_331_p2();
    void thread_tmp_96_fu_275_p3();
    void thread_tmp_96_mid1_fu_367_p3();
    void thread_tmp_96_mid2_fu_375_p3();
    void thread_tmp_96_mid_fu_309_p3();
    void thread_tmp_97_mid_fu_337_p2();
    void thread_tmp_98_fu_403_p2();
    void thread_tmp_99_fu_435_p1();
    void thread_tmp_fu_271_p1();
    void thread_weights10_m_weights_1_address0();
    void thread_weights10_m_weights_1_ce0();
    void thread_weights10_m_weights_2_address0();
    void thread_weights10_m_weights_2_ce0();
    void thread_weights10_m_weights_3_address0();
    void thread_weights10_m_weights_3_ce0();
    void thread_weights10_m_weights_s_address0();
    void thread_weights10_m_weights_s_ce0();
    void thread_ap_NS_fsm();
};

}

using namespace ap_rtl;

#endif
