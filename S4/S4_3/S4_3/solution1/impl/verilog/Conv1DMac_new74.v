// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module Conv1DMac_new74 (
        ap_clk,
        ap_rst,
        ap_start,
        start_full_n,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        start_out,
        start_write,
        in_V_V_dout,
        in_V_V_empty_n,
        in_V_V_read,
        out_V_V_din,
        out_V_V_full_n,
        out_V_V_write
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_pp0_stage0 = 3'd2;
parameter    ap_ST_fsm_state7 = 3'd4;

input   ap_clk;
input   ap_rst;
input   ap_start;
input   start_full_n;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output   start_out;
output   start_write;
input  [7:0] in_V_V_dout;
input   in_V_V_empty_n;
output   in_V_V_read;
output  [31:0] out_V_V_din;
input   out_V_V_full_n;
output   out_V_V_write;

reg ap_done;
reg ap_idle;
reg start_write;
reg in_V_V_read;
reg out_V_V_write;

reg    real_start;
reg    start_once_reg;
reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    internal_ap_ready;
wire   [13:0] weights23_m_weights_3_address0;
reg    weights23_m_weights_3_ce0;
wire   [6:0] weights23_m_weights_3_q0;
wire   [13:0] weights23_m_weights_2_address0;
reg    weights23_m_weights_2_ce0;
wire   [6:0] weights23_m_weights_2_q0;
wire   [13:0] weights23_m_weights_1_address0;
reg    weights23_m_weights_1_ce0;
wire   [6:0] weights23_m_weights_1_q0;
wire   [13:0] weights23_m_weights_s_address0;
reg    weights23_m_weights_s_ce0;
wire   [6:0] weights23_m_weights_s_q0;
reg    in_V_V_blk_n;
reg    ap_enable_reg_pp0_iter2;
wire    ap_block_pp0_stage0;
reg   [0:0] exitcond_flatten1_reg_1579;
reg   [0:0] exitcond_flatten1_reg_1579_pp0_iter1_reg;
reg    out_V_V_blk_n;
reg    ap_enable_reg_pp0_iter4;
reg   [0:0] tmp_1_reg_1606;
reg   [0:0] tmp_1_reg_1606_pp0_iter3_reg;
reg   [19:0] indvar_flatten1_reg_359;
reg   [15:0] indvar_flatten_reg_370;
reg   [6:0] nm_reg_381;
reg   [8:0] sf_reg_392;
wire   [0:0] exitcond_flatten1_fu_435_p2;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_block_state2_pp0_stage0_iter0;
wire    ap_block_state3_pp0_stage0_iter1;
reg    ap_block_state4_pp0_stage0_iter2;
wire    ap_block_state5_pp0_stage0_iter3;
reg    ap_block_state6_pp0_stage0_iter4;
reg    ap_block_pp0_stage0_11001;
wire   [19:0] indvar_flatten_next1_fu_441_p2;
reg    ap_enable_reg_pp0_iter0;
wire   [5:0] nm_t_mid2_fu_535_p3;
reg   [5:0] nm_t_mid2_reg_1588;
reg   [5:0] nm_t_mid2_reg_1588_pp0_iter1_reg;
reg   [5:0] nm_t_mid2_reg_1588_pp0_iter2_reg;
wire   [6:0] nm_mid2_fu_543_p3;
wire   [13:0] tmp_9_fu_555_p2;
reg   [13:0] tmp_9_reg_1601;
wire   [0:0] tmp_1_fu_561_p2;
reg   [0:0] tmp_1_reg_1606_pp0_iter1_reg;
reg   [0:0] tmp_1_reg_1606_pp0_iter2_reg;
wire   [8:0] sf_1_fu_567_p2;
wire   [15:0] indvar_flatten_next_fu_579_p3;
reg   [7:0] tmp_5_reg_1640;
reg   [0:0] tmp_21_reg_1645;
wire   [0:0] tmp_12_fu_662_p2;
reg   [0:0] tmp_12_reg_1650;
reg   [7:0] tmp_14_reg_1655;
reg   [0:0] tmp_35_reg_1660;
wire   [0:0] tmp_19_1_fu_732_p2;
reg   [0:0] tmp_19_1_reg_1665;
reg   [7:0] tmp_19_reg_1670;
reg   [0:0] tmp_38_reg_1675;
wire   [0:0] tmp_19_2_fu_802_p2;
reg   [0:0] tmp_19_2_reg_1680;
reg   [7:0] tmp_24_reg_1685;
reg   [0:0] tmp_41_reg_1690;
wire   [0:0] tmp_19_3_fu_872_p2;
reg   [0:0] tmp_19_3_reg_1695;
wire   [7:0] p_Val2_7_fu_1119_p2;
reg   [7:0] p_Val2_7_reg_1700;
wire   [7:0] p_Val2_7_1_fu_1258_p2;
reg   [7:0] p_Val2_7_1_reg_1705;
wire   [7:0] p_Val2_7_2_fu_1397_p2;
reg   [7:0] p_Val2_7_2_reg_1710;
wire   [7:0] p_Val2_7_3_fu_1536_p2;
reg   [7:0] p_Val2_7_3_reg_1715;
reg    ap_block_state1;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state2;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter3;
wire   [63:0] tmp_s_fu_587_p1;
reg    ap_block_pp0_stage0_01001;
reg   [7:0] macRegisters_0_V_1_fu_278;
wire   [7:0] macRegisters_0_V_fu_904_p2;
reg   [7:0] macRegisters_1_V_1_fu_282;
wire   [7:0] macRegisters_1_V_fu_923_p2;
reg   [7:0] macRegisters_2_V_1_fu_286;
wire   [7:0] macRegisters_2_V_fu_942_p2;
reg   [7:0] macRegisters_3_V_1_fu_290;
wire   [7:0] macRegisters_3_V_fu_961_p2;
wire   [5:0] tmp_fu_423_p1;
wire   [0:0] exitcond_flatten_fu_447_p2;
wire   [13:0] tmp_6_fu_427_p3;
wire   [0:0] tmp_4_fu_483_p2;
wire   [0:0] not_exitcond_flatten_fu_477_p2;
wire   [6:0] nm_mid_fu_453_p3;
wire   [0:0] tmp_8_mid_fu_489_p2;
wire   [0:0] tmp_2_fu_501_p2;
wire   [6:0] nm_1_fu_495_p2;
wire   [5:0] tmp_8_fu_515_p1;
wire   [13:0] tmp_6_mid1_fu_519_p3;
wire   [13:0] tmp_6_mid_fu_461_p3;
wire   [5:0] nm_t_mid_fu_469_p3;
wire   [8:0] sf_mid2_fu_507_p3;
wire   [13:0] sf_cast1_fu_551_p1;
wire   [13:0] tmp_6_mid2_fu_527_p3;
wire   [15:0] indvar_flatten_op_fu_573_p2;
wire  signed [6:0] p_Val2_s_fu_602_p0;
wire  signed [7:0] p_Val2_s_fu_602_p1;
wire  signed [14:0] p_08_cast_fu_594_p1;
wire   [14:0] p_Val2_s_fu_602_p2;
wire   [0:0] tmp_26_fu_634_p1;
wire   [0:0] tmp_16_fu_608_p3;
wire   [4:0] tmp_10_fu_644_p4;
wire   [0:0] tmp_7_fu_638_p2;
wire   [5:0] tmp_11_fu_654_p3;
wire  signed [6:0] p_Val2_s_58_fu_672_p0;
wire  signed [7:0] p_Val2_s_58_fu_672_p1;
wire   [14:0] p_Val2_s_58_fu_672_p2;
wire   [0:0] tmp_36_fu_704_p1;
wire   [0:0] tmp_34_fu_678_p3;
wire   [4:0] tmp_17_fu_714_p4;
wire   [0:0] tmp_15_fu_708_p2;
wire   [5:0] tmp_18_fu_724_p3;
wire  signed [6:0] p_Val2_3_fu_742_p0;
wire  signed [7:0] p_Val2_3_fu_742_p1;
wire   [14:0] p_Val2_3_fu_742_p2;
wire   [0:0] tmp_39_fu_774_p1;
wire   [0:0] tmp_37_fu_748_p3;
wire   [4:0] tmp_22_fu_784_p4;
wire   [0:0] tmp_20_fu_778_p2;
wire   [5:0] tmp_23_fu_794_p3;
wire  signed [6:0] p_Val2_4_fu_812_p0;
wire  signed [7:0] p_Val2_4_fu_812_p1;
wire   [14:0] p_Val2_4_fu_812_p2;
wire   [0:0] tmp_42_fu_844_p1;
wire   [0:0] tmp_40_fu_818_p3;
wire   [4:0] tmp_27_fu_854_p4;
wire   [0:0] tmp_25_fu_848_p2;
wire   [5:0] tmp_28_fu_864_p3;
wire   [0:0] qb_assign_1_fu_890_p2;
wire   [7:0] tmp_13_fu_894_p1;
wire   [7:0] tmp1_fu_898_p2;
wire   [0:0] qb_assign_1_1_fu_909_p2;
wire   [7:0] tmp_20_1_fu_913_p1;
wire   [7:0] tmp2_fu_917_p2;
wire   [0:0] qb_assign_1_2_fu_928_p2;
wire   [7:0] tmp_20_2_fu_932_p1;
wire   [7:0] tmp3_fu_936_p2;
wire   [0:0] qb_assign_1_3_fu_947_p2;
wire   [7:0] tmp_20_3_fu_951_p1;
wire   [7:0] tmp4_fu_955_p2;
wire   [7:0] tmp_29_fu_986_p66;
wire   [7:0] tmp_30_fu_1125_p66;
wire   [7:0] tmp_31_fu_1264_p66;
wire   [7:0] tmp_32_fu_1403_p66;
wire    ap_CS_fsm_state7;
reg   [2:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;

// power-on initialization
initial begin
#0 start_once_reg = 1'b0;
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 3'd1;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
end

Conv1DMac_new74_wcud #(
    .DataWidth( 7 ),
    .AddressRange( 16384 ),
    .AddressWidth( 14 ))
weights23_m_weights_3_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(weights23_m_weights_3_address0),
    .ce0(weights23_m_weights_3_ce0),
    .q0(weights23_m_weights_3_q0)
);

Conv1DMac_new74_wdEe #(
    .DataWidth( 7 ),
    .AddressRange( 16384 ),
    .AddressWidth( 14 ))
weights23_m_weights_2_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(weights23_m_weights_2_address0),
    .ce0(weights23_m_weights_2_ce0),
    .q0(weights23_m_weights_2_q0)
);

Conv1DMac_new74_weOg #(
    .DataWidth( 7 ),
    .AddressRange( 16384 ),
    .AddressWidth( 14 ))
weights23_m_weights_1_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(weights23_m_weights_1_address0),
    .ce0(weights23_m_weights_1_ce0),
    .q0(weights23_m_weights_1_q0)
);

Conv1DMac_new74_wfYi #(
    .DataWidth( 7 ),
    .AddressRange( 16384 ),
    .AddressWidth( 14 ))
weights23_m_weights_s_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(weights23_m_weights_s_address0),
    .ce0(weights23_m_weights_s_ce0),
    .q0(weights23_m_weights_s_q0)
);

computeS4_3_mux_6g8j #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 8 ),
    .din3_WIDTH( 8 ),
    .din4_WIDTH( 8 ),
    .din5_WIDTH( 8 ),
    .din6_WIDTH( 8 ),
    .din7_WIDTH( 8 ),
    .din8_WIDTH( 8 ),
    .din9_WIDTH( 8 ),
    .din10_WIDTH( 8 ),
    .din11_WIDTH( 8 ),
    .din12_WIDTH( 8 ),
    .din13_WIDTH( 8 ),
    .din14_WIDTH( 8 ),
    .din15_WIDTH( 8 ),
    .din16_WIDTH( 8 ),
    .din17_WIDTH( 8 ),
    .din18_WIDTH( 8 ),
    .din19_WIDTH( 8 ),
    .din20_WIDTH( 8 ),
    .din21_WIDTH( 8 ),
    .din22_WIDTH( 8 ),
    .din23_WIDTH( 8 ),
    .din24_WIDTH( 8 ),
    .din25_WIDTH( 8 ),
    .din26_WIDTH( 8 ),
    .din27_WIDTH( 8 ),
    .din28_WIDTH( 8 ),
    .din29_WIDTH( 8 ),
    .din30_WIDTH( 8 ),
    .din31_WIDTH( 8 ),
    .din32_WIDTH( 8 ),
    .din33_WIDTH( 8 ),
    .din34_WIDTH( 8 ),
    .din35_WIDTH( 8 ),
    .din36_WIDTH( 8 ),
    .din37_WIDTH( 8 ),
    .din38_WIDTH( 8 ),
    .din39_WIDTH( 8 ),
    .din40_WIDTH( 8 ),
    .din41_WIDTH( 8 ),
    .din42_WIDTH( 8 ),
    .din43_WIDTH( 8 ),
    .din44_WIDTH( 8 ),
    .din45_WIDTH( 8 ),
    .din46_WIDTH( 8 ),
    .din47_WIDTH( 8 ),
    .din48_WIDTH( 8 ),
    .din49_WIDTH( 8 ),
    .din50_WIDTH( 8 ),
    .din51_WIDTH( 8 ),
    .din52_WIDTH( 8 ),
    .din53_WIDTH( 8 ),
    .din54_WIDTH( 8 ),
    .din55_WIDTH( 8 ),
    .din56_WIDTH( 8 ),
    .din57_WIDTH( 8 ),
    .din58_WIDTH( 8 ),
    .din59_WIDTH( 8 ),
    .din60_WIDTH( 8 ),
    .din61_WIDTH( 8 ),
    .din62_WIDTH( 8 ),
    .din63_WIDTH( 8 ),
    .din64_WIDTH( 6 ),
    .dout_WIDTH( 8 ))
computeS4_3_mux_6g8j_U6(
    .din0(8'd13),
    .din1(8'd18),
    .din2(8'd8),
    .din3(8'd3),
    .din4(8'd24),
    .din5(8'd235),
    .din6(8'd251),
    .din7(8'd241),
    .din8(8'd229),
    .din9(8'd14),
    .din10(8'd252),
    .din11(8'd255),
    .din12(8'd2),
    .din13(8'd247),
    .din14(8'd26),
    .din15(8'd232),
    .din16(8'd249),
    .din17(8'd16),
    .din18(8'd249),
    .din19(8'd2),
    .din20(8'd21),
    .din21(8'd250),
    .din22(8'd15),
    .din23(8'd6),
    .din24(8'd16),
    .din25(8'd251),
    .din26(8'd7),
    .din27(8'd24),
    .din28(8'd15),
    .din29(8'd221),
    .din30(8'd4),
    .din31(8'd252),
    .din32(8'd17),
    .din33(8'd23),
    .din34(8'd240),
    .din35(8'd41),
    .din36(8'd236),
    .din37(8'd252),
    .din38(8'd2),
    .din39(8'd249),
    .din40(8'd254),
    .din41(8'd238),
    .din42(8'd18),
    .din43(8'd237),
    .din44(8'd7),
    .din45(8'd236),
    .din46(8'd11),
    .din47(8'd252),
    .din48(8'd12),
    .din49(8'd212),
    .din50(8'd12),
    .din51(8'd241),
    .din52(8'd0),
    .din53(8'd25),
    .din54(8'd2),
    .din55(8'd22),
    .din56(8'd240),
    .din57(8'd21),
    .din58(8'd242),
    .din59(8'd4),
    .din60(8'd241),
    .din61(8'd9),
    .din62(8'd26),
    .din63(8'd18),
    .din64(nm_t_mid2_reg_1588_pp0_iter2_reg),
    .dout(tmp_29_fu_986_p66)
);

computeS4_3_mux_6g8j #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 8 ),
    .din3_WIDTH( 8 ),
    .din4_WIDTH( 8 ),
    .din5_WIDTH( 8 ),
    .din6_WIDTH( 8 ),
    .din7_WIDTH( 8 ),
    .din8_WIDTH( 8 ),
    .din9_WIDTH( 8 ),
    .din10_WIDTH( 8 ),
    .din11_WIDTH( 8 ),
    .din12_WIDTH( 8 ),
    .din13_WIDTH( 8 ),
    .din14_WIDTH( 8 ),
    .din15_WIDTH( 8 ),
    .din16_WIDTH( 8 ),
    .din17_WIDTH( 8 ),
    .din18_WIDTH( 8 ),
    .din19_WIDTH( 8 ),
    .din20_WIDTH( 8 ),
    .din21_WIDTH( 8 ),
    .din22_WIDTH( 8 ),
    .din23_WIDTH( 8 ),
    .din24_WIDTH( 8 ),
    .din25_WIDTH( 8 ),
    .din26_WIDTH( 8 ),
    .din27_WIDTH( 8 ),
    .din28_WIDTH( 8 ),
    .din29_WIDTH( 8 ),
    .din30_WIDTH( 8 ),
    .din31_WIDTH( 8 ),
    .din32_WIDTH( 8 ),
    .din33_WIDTH( 8 ),
    .din34_WIDTH( 8 ),
    .din35_WIDTH( 8 ),
    .din36_WIDTH( 8 ),
    .din37_WIDTH( 8 ),
    .din38_WIDTH( 8 ),
    .din39_WIDTH( 8 ),
    .din40_WIDTH( 8 ),
    .din41_WIDTH( 8 ),
    .din42_WIDTH( 8 ),
    .din43_WIDTH( 8 ),
    .din44_WIDTH( 8 ),
    .din45_WIDTH( 8 ),
    .din46_WIDTH( 8 ),
    .din47_WIDTH( 8 ),
    .din48_WIDTH( 8 ),
    .din49_WIDTH( 8 ),
    .din50_WIDTH( 8 ),
    .din51_WIDTH( 8 ),
    .din52_WIDTH( 8 ),
    .din53_WIDTH( 8 ),
    .din54_WIDTH( 8 ),
    .din55_WIDTH( 8 ),
    .din56_WIDTH( 8 ),
    .din57_WIDTH( 8 ),
    .din58_WIDTH( 8 ),
    .din59_WIDTH( 8 ),
    .din60_WIDTH( 8 ),
    .din61_WIDTH( 8 ),
    .din62_WIDTH( 8 ),
    .din63_WIDTH( 8 ),
    .din64_WIDTH( 6 ),
    .dout_WIDTH( 8 ))
computeS4_3_mux_6g8j_U7(
    .din0(8'd236),
    .din1(8'd18),
    .din2(8'd5),
    .din3(8'd13),
    .din4(8'd209),
    .din5(8'd253),
    .din6(8'd251),
    .din7(8'd50),
    .din8(8'd231),
    .din9(8'd2),
    .din10(8'd13),
    .din11(8'd226),
    .din12(8'd9),
    .din13(8'd8),
    .din14(8'd216),
    .din15(8'd243),
    .din16(8'd246),
    .din17(8'd12),
    .din18(8'd3),
    .din19(8'd20),
    .din20(8'd239),
    .din21(8'd0),
    .din22(8'd23),
    .din23(8'd220),
    .din24(8'd5),
    .din25(8'd7),
    .din26(8'd251),
    .din27(8'd241),
    .din28(8'd14),
    .din29(8'd6),
    .din30(8'd2),
    .din31(8'd248),
    .din32(8'd227),
    .din33(8'd240),
    .din34(8'd40),
    .din35(8'd8),
    .din36(8'd244),
    .din37(8'd251),
    .din38(8'd250),
    .din39(8'd6),
    .din40(8'd254),
    .din41(8'd244),
    .din42(8'd2),
    .din43(8'd249),
    .din44(8'd247),
    .din45(8'd7),
    .din46(8'd232),
    .din47(8'd10),
    .din48(8'd11),
    .din49(8'd3),
    .din50(8'd244),
    .din51(8'd14),
    .din52(8'd0),
    .din53(8'd241),
    .din54(8'd233),
    .din55(8'd9),
    .din56(8'd3),
    .din57(8'd240),
    .din58(8'd231),
    .din59(8'd246),
    .din60(8'd242),
    .din61(8'd251),
    .din62(8'd248),
    .din63(8'd219),
    .din64(nm_t_mid2_reg_1588_pp0_iter2_reg),
    .dout(tmp_30_fu_1125_p66)
);

computeS4_3_mux_6g8j #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 8 ),
    .din3_WIDTH( 8 ),
    .din4_WIDTH( 8 ),
    .din5_WIDTH( 8 ),
    .din6_WIDTH( 8 ),
    .din7_WIDTH( 8 ),
    .din8_WIDTH( 8 ),
    .din9_WIDTH( 8 ),
    .din10_WIDTH( 8 ),
    .din11_WIDTH( 8 ),
    .din12_WIDTH( 8 ),
    .din13_WIDTH( 8 ),
    .din14_WIDTH( 8 ),
    .din15_WIDTH( 8 ),
    .din16_WIDTH( 8 ),
    .din17_WIDTH( 8 ),
    .din18_WIDTH( 8 ),
    .din19_WIDTH( 8 ),
    .din20_WIDTH( 8 ),
    .din21_WIDTH( 8 ),
    .din22_WIDTH( 8 ),
    .din23_WIDTH( 8 ),
    .din24_WIDTH( 8 ),
    .din25_WIDTH( 8 ),
    .din26_WIDTH( 8 ),
    .din27_WIDTH( 8 ),
    .din28_WIDTH( 8 ),
    .din29_WIDTH( 8 ),
    .din30_WIDTH( 8 ),
    .din31_WIDTH( 8 ),
    .din32_WIDTH( 8 ),
    .din33_WIDTH( 8 ),
    .din34_WIDTH( 8 ),
    .din35_WIDTH( 8 ),
    .din36_WIDTH( 8 ),
    .din37_WIDTH( 8 ),
    .din38_WIDTH( 8 ),
    .din39_WIDTH( 8 ),
    .din40_WIDTH( 8 ),
    .din41_WIDTH( 8 ),
    .din42_WIDTH( 8 ),
    .din43_WIDTH( 8 ),
    .din44_WIDTH( 8 ),
    .din45_WIDTH( 8 ),
    .din46_WIDTH( 8 ),
    .din47_WIDTH( 8 ),
    .din48_WIDTH( 8 ),
    .din49_WIDTH( 8 ),
    .din50_WIDTH( 8 ),
    .din51_WIDTH( 8 ),
    .din52_WIDTH( 8 ),
    .din53_WIDTH( 8 ),
    .din54_WIDTH( 8 ),
    .din55_WIDTH( 8 ),
    .din56_WIDTH( 8 ),
    .din57_WIDTH( 8 ),
    .din58_WIDTH( 8 ),
    .din59_WIDTH( 8 ),
    .din60_WIDTH( 8 ),
    .din61_WIDTH( 8 ),
    .din62_WIDTH( 8 ),
    .din63_WIDTH( 8 ),
    .din64_WIDTH( 6 ),
    .dout_WIDTH( 8 ))
computeS4_3_mux_6g8j_U8(
    .din0(8'd242),
    .din1(8'd255),
    .din2(8'd234),
    .din3(8'd5),
    .din4(8'd251),
    .din5(8'd22),
    .din6(8'd1),
    .din7(8'd8),
    .din8(8'd3),
    .din9(8'd9),
    .din10(8'd4),
    .din11(8'd23),
    .din12(8'd230),
    .din13(8'd203),
    .din14(8'd246),
    .din15(8'd0),
    .din16(8'd6),
    .din17(8'd217),
    .din18(8'd246),
    .din19(8'd251),
    .din20(8'd250),
    .din21(8'd247),
    .din22(8'd242),
    .din23(8'd0),
    .din24(8'd240),
    .din25(8'd233),
    .din26(8'd247),
    .din27(8'd232),
    .din28(8'd212),
    .din29(8'd1),
    .din30(8'd239),
    .din31(8'd214),
    .din32(8'd232),
    .din33(8'd231),
    .din34(8'd254),
    .din35(8'd8),
    .din36(8'd1),
    .din37(8'd25),
    .din38(8'd3),
    .din39(8'd16),
    .din40(8'd240),
    .din41(8'd249),
    .din42(8'd219),
    .din43(8'd34),
    .din44(8'd233),
    .din45(8'd33),
    .din46(8'd221),
    .din47(8'd253),
    .din48(8'd11),
    .din49(8'd245),
    .din50(8'd249),
    .din51(8'd239),
    .din52(8'd240),
    .din53(8'd244),
    .din54(8'd13),
    .din55(8'd24),
    .din56(8'd34),
    .din57(8'd5),
    .din58(8'd4),
    .din59(8'd198),
    .din60(8'd252),
    .din61(8'd247),
    .din62(8'd232),
    .din63(8'd245),
    .din64(nm_t_mid2_reg_1588_pp0_iter2_reg),
    .dout(tmp_31_fu_1264_p66)
);

computeS4_3_mux_6g8j #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 8 ),
    .din3_WIDTH( 8 ),
    .din4_WIDTH( 8 ),
    .din5_WIDTH( 8 ),
    .din6_WIDTH( 8 ),
    .din7_WIDTH( 8 ),
    .din8_WIDTH( 8 ),
    .din9_WIDTH( 8 ),
    .din10_WIDTH( 8 ),
    .din11_WIDTH( 8 ),
    .din12_WIDTH( 8 ),
    .din13_WIDTH( 8 ),
    .din14_WIDTH( 8 ),
    .din15_WIDTH( 8 ),
    .din16_WIDTH( 8 ),
    .din17_WIDTH( 8 ),
    .din18_WIDTH( 8 ),
    .din19_WIDTH( 8 ),
    .din20_WIDTH( 8 ),
    .din21_WIDTH( 8 ),
    .din22_WIDTH( 8 ),
    .din23_WIDTH( 8 ),
    .din24_WIDTH( 8 ),
    .din25_WIDTH( 8 ),
    .din26_WIDTH( 8 ),
    .din27_WIDTH( 8 ),
    .din28_WIDTH( 8 ),
    .din29_WIDTH( 8 ),
    .din30_WIDTH( 8 ),
    .din31_WIDTH( 8 ),
    .din32_WIDTH( 8 ),
    .din33_WIDTH( 8 ),
    .din34_WIDTH( 8 ),
    .din35_WIDTH( 8 ),
    .din36_WIDTH( 8 ),
    .din37_WIDTH( 8 ),
    .din38_WIDTH( 8 ),
    .din39_WIDTH( 8 ),
    .din40_WIDTH( 8 ),
    .din41_WIDTH( 8 ),
    .din42_WIDTH( 8 ),
    .din43_WIDTH( 8 ),
    .din44_WIDTH( 8 ),
    .din45_WIDTH( 8 ),
    .din46_WIDTH( 8 ),
    .din47_WIDTH( 8 ),
    .din48_WIDTH( 8 ),
    .din49_WIDTH( 8 ),
    .din50_WIDTH( 8 ),
    .din51_WIDTH( 8 ),
    .din52_WIDTH( 8 ),
    .din53_WIDTH( 8 ),
    .din54_WIDTH( 8 ),
    .din55_WIDTH( 8 ),
    .din56_WIDTH( 8 ),
    .din57_WIDTH( 8 ),
    .din58_WIDTH( 8 ),
    .din59_WIDTH( 8 ),
    .din60_WIDTH( 8 ),
    .din61_WIDTH( 8 ),
    .din62_WIDTH( 8 ),
    .din63_WIDTH( 8 ),
    .din64_WIDTH( 6 ),
    .dout_WIDTH( 8 ))
computeS4_3_mux_6g8j_U9(
    .din0(8'd9),
    .din1(8'd33),
    .din2(8'd247),
    .din3(8'd211),
    .din4(8'd254),
    .din5(8'd254),
    .din6(8'd13),
    .din7(8'd14),
    .din8(8'd7),
    .din9(8'd7),
    .din10(8'd238),
    .din11(8'd242),
    .din12(8'd0),
    .din13(8'd1),
    .din14(8'd239),
    .din15(8'd8),
    .din16(8'd232),
    .din17(8'd4),
    .din18(8'd248),
    .din19(8'd243),
    .din20(8'd5),
    .din21(8'd33),
    .din22(8'd249),
    .din23(8'd7),
    .din24(8'd248),
    .din25(8'd240),
    .din26(8'd253),
    .din27(8'd18),
    .din28(8'd250),
    .din29(8'd27),
    .din30(8'd245),
    .din31(8'd230),
    .din32(8'd5),
    .din33(8'd20),
    .din34(8'd6),
    .din35(8'd241),
    .din36(8'd255),
    .din37(8'd247),
    .din38(8'd2),
    .din39(8'd16),
    .din40(8'd241),
    .din41(8'd228),
    .din42(8'd9),
    .din43(8'd230),
    .din44(8'd9),
    .din45(8'd18),
    .din46(8'd225),
    .din47(8'd21),
    .din48(8'd253),
    .din49(8'd16),
    .din50(8'd45),
    .din51(8'd7),
    .din52(8'd7),
    .din53(8'd29),
    .din54(8'd30),
    .din55(8'd12),
    .din56(8'd9),
    .din57(8'd1),
    .din58(8'd239),
    .din59(8'd235),
    .din60(8'd255),
    .din61(8'd15),
    .din62(8'd237),
    .din63(8'd42),
    .din64(nm_t_mid2_reg_1588_pp0_iter2_reg),
    .dout(tmp_32_fu_1403_p66)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state7)) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state2) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state2)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state2);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter4 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((internal_ap_ready == 1'b0) & (real_start == 1'b1))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_flatten1_fu_435_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        indvar_flatten1_reg_359 <= indvar_flatten_next1_fu_441_p2;
    end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        indvar_flatten1_reg_359 <= 20'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_flatten1_fu_435_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        indvar_flatten_reg_370 <= indvar_flatten_next_fu_579_p3;
    end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        indvar_flatten_reg_370 <= 16'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_1_reg_1606_pp0_iter2_reg == 1'd0) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        macRegisters_0_V_1_fu_278 <= macRegisters_0_V_fu_904_p2;
    end else if (((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1)) | ((tmp_1_reg_1606_pp0_iter2_reg == 1'd1) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001)))) begin
        macRegisters_0_V_1_fu_278 <= 8'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_1_reg_1606_pp0_iter2_reg == 1'd0) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        macRegisters_1_V_1_fu_282 <= macRegisters_1_V_fu_923_p2;
    end else if (((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1)) | ((tmp_1_reg_1606_pp0_iter2_reg == 1'd1) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001)))) begin
        macRegisters_1_V_1_fu_282 <= 8'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_1_reg_1606_pp0_iter2_reg == 1'd0) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        macRegisters_2_V_1_fu_286 <= macRegisters_2_V_fu_942_p2;
    end else if (((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1)) | ((tmp_1_reg_1606_pp0_iter2_reg == 1'd1) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001)))) begin
        macRegisters_2_V_1_fu_286 <= 8'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_1_reg_1606_pp0_iter2_reg == 1'd0) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        macRegisters_3_V_1_fu_290 <= macRegisters_3_V_fu_961_p2;
    end else if (((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1)) | ((tmp_1_reg_1606_pp0_iter2_reg == 1'd1) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001)))) begin
        macRegisters_3_V_1_fu_290 <= 8'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_flatten1_fu_435_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        nm_reg_381 <= nm_mid2_fu_543_p3;
    end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        nm_reg_381 <= 7'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_flatten1_fu_435_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        sf_reg_392 <= sf_1_fu_567_p2;
    end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        sf_reg_392 <= 9'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        exitcond_flatten1_reg_1579 <= exitcond_flatten1_fu_435_p2;
        exitcond_flatten1_reg_1579_pp0_iter1_reg <= exitcond_flatten1_reg_1579;
        nm_t_mid2_reg_1588_pp0_iter1_reg <= nm_t_mid2_reg_1588;
        tmp_1_reg_1606_pp0_iter1_reg <= tmp_1_reg_1606;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_flatten1_fu_435_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        nm_t_mid2_reg_1588 <= nm_t_mid2_fu_535_p3;
        tmp_1_reg_1606 <= tmp_1_fu_561_p2;
        tmp_9_reg_1601 <= tmp_9_fu_555_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        nm_t_mid2_reg_1588_pp0_iter2_reg <= nm_t_mid2_reg_1588_pp0_iter1_reg;
        tmp_1_reg_1606_pp0_iter2_reg <= tmp_1_reg_1606_pp0_iter1_reg;
        tmp_1_reg_1606_pp0_iter3_reg <= tmp_1_reg_1606_pp0_iter2_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_1_reg_1606_pp0_iter2_reg == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        p_Val2_7_1_reg_1705 <= p_Val2_7_1_fu_1258_p2;
        p_Val2_7_2_reg_1710 <= p_Val2_7_2_fu_1397_p2;
        p_Val2_7_3_reg_1715 <= p_Val2_7_3_fu_1536_p2;
        p_Val2_7_reg_1700 <= p_Val2_7_fu_1119_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_flatten1_reg_1579_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        tmp_12_reg_1650 <= tmp_12_fu_662_p2;
        tmp_14_reg_1655 <= {{p_Val2_s_58_fu_672_p2[14:7]}};
        tmp_19_1_reg_1665 <= tmp_19_1_fu_732_p2;
        tmp_19_2_reg_1680 <= tmp_19_2_fu_802_p2;
        tmp_19_3_reg_1695 <= tmp_19_3_fu_872_p2;
        tmp_19_reg_1670 <= {{p_Val2_3_fu_742_p2[14:7]}};
        tmp_21_reg_1645 <= p_Val2_s_fu_602_p2[32'd6];
        tmp_24_reg_1685 <= {{p_Val2_4_fu_812_p2[14:7]}};
        tmp_35_reg_1660 <= p_Val2_s_58_fu_672_p2[32'd6];
        tmp_38_reg_1675 <= p_Val2_3_fu_742_p2[32'd6];
        tmp_41_reg_1690 <= p_Val2_4_fu_812_p2[32'd6];
        tmp_5_reg_1640 <= {{p_Val2_s_fu_602_p2[14:7]}};
    end
end

always @ (*) begin
    if ((exitcond_flatten1_fu_435_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((real_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond_flatten1_reg_1579_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        in_V_V_blk_n = in_V_V_empty_n;
    end else begin
        in_V_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((exitcond_flatten1_reg_1579_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        in_V_V_read = 1'b1;
    end else begin
        in_V_V_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        internal_ap_ready = 1'b1;
    end else begin
        internal_ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_1_reg_1606_pp0_iter3_reg == 1'd1) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        out_V_V_blk_n = out_V_V_full_n;
    end else begin
        out_V_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((tmp_1_reg_1606_pp0_iter3_reg == 1'd1) & (ap_enable_reg_pp0_iter4 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        out_V_V_write = 1'b1;
    end else begin
        out_V_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (start_full_n == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (real_start == 1'b1))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        weights23_m_weights_1_ce0 = 1'b1;
    end else begin
        weights23_m_weights_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        weights23_m_weights_2_ce0 = 1'b1;
    end else begin
        weights23_m_weights_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        weights23_m_weights_3_ce0 = 1'b1;
    end else begin
        weights23_m_weights_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        weights23_m_weights_s_ce0 = 1'b1;
    end else begin
        weights23_m_weights_s_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((exitcond_flatten1_fu_435_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1)) & ~((ap_enable_reg_pp0_iter3 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter4 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((ap_enable_reg_pp0_iter3 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter4 == 1'b1)) | ((exitcond_flatten1_fu_435_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd2];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = (((tmp_1_reg_1606_pp0_iter3_reg == 1'd1) & (out_V_V_full_n == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b1)) | ((exitcond_flatten1_reg_1579_pp0_iter1_reg == 1'd0) & (in_V_V_empty_n == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((tmp_1_reg_1606_pp0_iter3_reg == 1'd1) & (out_V_V_full_n == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b1)) | ((exitcond_flatten1_reg_1579_pp0_iter1_reg == 1'd0) & (in_V_V_empty_n == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((tmp_1_reg_1606_pp0_iter3_reg == 1'd1) & (out_V_V_full_n == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b1)) | ((exitcond_flatten1_reg_1579_pp0_iter1_reg == 1'd0) & (in_V_V_empty_n == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1)));
end

always @ (*) begin
    ap_block_state1 = ((real_start == 1'b0) | (ap_done_reg == 1'b1));
end

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state4_pp0_stage0_iter2 = ((exitcond_flatten1_reg_1579_pp0_iter1_reg == 1'd0) & (in_V_V_empty_n == 1'b0));
end

assign ap_block_state5_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state6_pp0_stage0_iter4 = ((tmp_1_reg_1606_pp0_iter3_reg == 1'd1) & (out_V_V_full_n == 1'b0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_ready = internal_ap_ready;

assign exitcond_flatten1_fu_435_p2 = ((indvar_flatten1_reg_359 == 20'd524288) ? 1'b1 : 1'b0);

assign exitcond_flatten_fu_447_p2 = ((indvar_flatten_reg_370 == 16'd16384) ? 1'b1 : 1'b0);

assign indvar_flatten_next1_fu_441_p2 = (20'd1 + indvar_flatten1_reg_359);

assign indvar_flatten_next_fu_579_p3 = ((exitcond_flatten_fu_447_p2[0:0] === 1'b1) ? 16'd1 : indvar_flatten_op_fu_573_p2);

assign indvar_flatten_op_fu_573_p2 = (indvar_flatten_reg_370 + 16'd1);

assign macRegisters_0_V_fu_904_p2 = (tmp_5_reg_1640 + tmp1_fu_898_p2);

assign macRegisters_1_V_fu_923_p2 = (tmp_14_reg_1655 + tmp2_fu_917_p2);

assign macRegisters_2_V_fu_942_p2 = (tmp_19_reg_1670 + tmp3_fu_936_p2);

assign macRegisters_3_V_fu_961_p2 = (tmp_24_reg_1685 + tmp4_fu_955_p2);

assign nm_1_fu_495_p2 = (7'd1 + nm_mid_fu_453_p3);

assign nm_mid2_fu_543_p3 = ((tmp_8_mid_fu_489_p2[0:0] === 1'b1) ? nm_1_fu_495_p2 : nm_mid_fu_453_p3);

assign nm_mid_fu_453_p3 = ((exitcond_flatten_fu_447_p2[0:0] === 1'b1) ? 7'd0 : nm_reg_381);

assign nm_t_mid2_fu_535_p3 = ((tmp_8_mid_fu_489_p2[0:0] === 1'b1) ? tmp_8_fu_515_p1 : nm_t_mid_fu_469_p3);

assign nm_t_mid_fu_469_p3 = ((exitcond_flatten_fu_447_p2[0:0] === 1'b1) ? 6'd0 : tmp_fu_423_p1);

assign not_exitcond_flatten_fu_477_p2 = (exitcond_flatten_fu_447_p2 ^ 1'd1);

assign out_V_V_din = {{{{p_Val2_7_3_reg_1715}, {p_Val2_7_2_reg_1710}}, {p_Val2_7_1_reg_1705}}, {p_Val2_7_reg_1700}};

assign p_08_cast_fu_594_p1 = $signed(in_V_V_dout);

assign p_Val2_3_fu_742_p0 = weights23_m_weights_1_q0;

assign p_Val2_3_fu_742_p1 = p_08_cast_fu_594_p1;

assign p_Val2_3_fu_742_p2 = ($signed(p_Val2_3_fu_742_p0) * $signed(p_Val2_3_fu_742_p1));

assign p_Val2_4_fu_812_p0 = weights23_m_weights_s_q0;

assign p_Val2_4_fu_812_p1 = p_08_cast_fu_594_p1;

assign p_Val2_4_fu_812_p2 = ($signed(p_Val2_4_fu_812_p0) * $signed(p_Val2_4_fu_812_p1));

assign p_Val2_7_1_fu_1258_p2 = (macRegisters_1_V_fu_923_p2 + tmp_30_fu_1125_p66);

assign p_Val2_7_2_fu_1397_p2 = (macRegisters_2_V_fu_942_p2 + tmp_31_fu_1264_p66);

assign p_Val2_7_3_fu_1536_p2 = (macRegisters_3_V_fu_961_p2 + tmp_32_fu_1403_p66);

assign p_Val2_7_fu_1119_p2 = (macRegisters_0_V_fu_904_p2 + tmp_29_fu_986_p66);

assign p_Val2_s_58_fu_672_p0 = weights23_m_weights_2_q0;

assign p_Val2_s_58_fu_672_p1 = p_08_cast_fu_594_p1;

assign p_Val2_s_58_fu_672_p2 = ($signed(p_Val2_s_58_fu_672_p0) * $signed(p_Val2_s_58_fu_672_p1));

assign p_Val2_s_fu_602_p0 = weights23_m_weights_3_q0;

assign p_Val2_s_fu_602_p1 = p_08_cast_fu_594_p1;

assign p_Val2_s_fu_602_p2 = ($signed(p_Val2_s_fu_602_p0) * $signed(p_Val2_s_fu_602_p1));

assign qb_assign_1_1_fu_909_p2 = (tmp_35_reg_1660 & tmp_19_1_reg_1665);

assign qb_assign_1_2_fu_928_p2 = (tmp_38_reg_1675 & tmp_19_2_reg_1680);

assign qb_assign_1_3_fu_947_p2 = (tmp_41_reg_1690 & tmp_19_3_reg_1695);

assign qb_assign_1_fu_890_p2 = (tmp_21_reg_1645 & tmp_12_reg_1650);

assign sf_1_fu_567_p2 = (sf_mid2_fu_507_p3 + 9'd1);

assign sf_cast1_fu_551_p1 = sf_mid2_fu_507_p3;

assign sf_mid2_fu_507_p3 = ((tmp_2_fu_501_p2[0:0] === 1'b1) ? 9'd0 : sf_reg_392);

assign start_out = real_start;

assign tmp1_fu_898_p2 = (tmp_13_fu_894_p1 + macRegisters_0_V_1_fu_278);

assign tmp2_fu_917_p2 = (tmp_20_1_fu_913_p1 + macRegisters_1_V_1_fu_282);

assign tmp3_fu_936_p2 = (tmp_20_2_fu_932_p1 + macRegisters_2_V_1_fu_286);

assign tmp4_fu_955_p2 = (tmp_20_3_fu_951_p1 + macRegisters_3_V_1_fu_290);

assign tmp_10_fu_644_p4 = {{p_Val2_s_fu_602_p2[5:1]}};

assign tmp_11_fu_654_p3 = {{tmp_10_fu_644_p4}, {tmp_7_fu_638_p2}};

assign tmp_12_fu_662_p2 = ((tmp_11_fu_654_p3 != 6'd0) ? 1'b1 : 1'b0);

assign tmp_13_fu_894_p1 = qb_assign_1_fu_890_p2;

assign tmp_15_fu_708_p2 = (tmp_36_fu_704_p1 | tmp_34_fu_678_p3);

assign tmp_16_fu_608_p3 = p_Val2_s_fu_602_p2[32'd14];

assign tmp_17_fu_714_p4 = {{p_Val2_s_58_fu_672_p2[5:1]}};

assign tmp_18_fu_724_p3 = {{tmp_17_fu_714_p4}, {tmp_15_fu_708_p2}};

assign tmp_19_1_fu_732_p2 = ((tmp_18_fu_724_p3 != 6'd0) ? 1'b1 : 1'b0);

assign tmp_19_2_fu_802_p2 = ((tmp_23_fu_794_p3 != 6'd0) ? 1'b1 : 1'b0);

assign tmp_19_3_fu_872_p2 = ((tmp_28_fu_864_p3 != 6'd0) ? 1'b1 : 1'b0);

assign tmp_1_fu_561_p2 = ((sf_mid2_fu_507_p3 == 9'd255) ? 1'b1 : 1'b0);

assign tmp_20_1_fu_913_p1 = qb_assign_1_1_fu_909_p2;

assign tmp_20_2_fu_932_p1 = qb_assign_1_2_fu_928_p2;

assign tmp_20_3_fu_951_p1 = qb_assign_1_3_fu_947_p2;

assign tmp_20_fu_778_p2 = (tmp_39_fu_774_p1 | tmp_37_fu_748_p3);

assign tmp_22_fu_784_p4 = {{p_Val2_3_fu_742_p2[5:1]}};

assign tmp_23_fu_794_p3 = {{tmp_22_fu_784_p4}, {tmp_20_fu_778_p2}};

assign tmp_25_fu_848_p2 = (tmp_42_fu_844_p1 | tmp_40_fu_818_p3);

assign tmp_26_fu_634_p1 = p_Val2_s_fu_602_p2[0:0];

assign tmp_27_fu_854_p4 = {{p_Val2_4_fu_812_p2[5:1]}};

assign tmp_28_fu_864_p3 = {{tmp_27_fu_854_p4}, {tmp_25_fu_848_p2}};

assign tmp_2_fu_501_p2 = (tmp_8_mid_fu_489_p2 | exitcond_flatten_fu_447_p2);

assign tmp_34_fu_678_p3 = p_Val2_s_58_fu_672_p2[32'd14];

assign tmp_36_fu_704_p1 = p_Val2_s_58_fu_672_p2[0:0];

assign tmp_37_fu_748_p3 = p_Val2_3_fu_742_p2[32'd14];

assign tmp_39_fu_774_p1 = p_Val2_3_fu_742_p2[0:0];

assign tmp_40_fu_818_p3 = p_Val2_4_fu_812_p2[32'd14];

assign tmp_42_fu_844_p1 = p_Val2_4_fu_812_p2[0:0];

assign tmp_4_fu_483_p2 = ((sf_reg_392 == 9'd256) ? 1'b1 : 1'b0);

assign tmp_6_fu_427_p3 = {{tmp_fu_423_p1}, {8'd0}};

assign tmp_6_mid1_fu_519_p3 = {{tmp_8_fu_515_p1}, {8'd0}};

assign tmp_6_mid2_fu_527_p3 = ((tmp_8_mid_fu_489_p2[0:0] === 1'b1) ? tmp_6_mid1_fu_519_p3 : tmp_6_mid_fu_461_p3);

assign tmp_6_mid_fu_461_p3 = ((exitcond_flatten_fu_447_p2[0:0] === 1'b1) ? 14'd0 : tmp_6_fu_427_p3);

assign tmp_7_fu_638_p2 = (tmp_26_fu_634_p1 | tmp_16_fu_608_p3);

assign tmp_8_fu_515_p1 = nm_1_fu_495_p2[5:0];

assign tmp_8_mid_fu_489_p2 = (tmp_4_fu_483_p2 & not_exitcond_flatten_fu_477_p2);

assign tmp_9_fu_555_p2 = (sf_cast1_fu_551_p1 + tmp_6_mid2_fu_527_p3);

assign tmp_fu_423_p1 = nm_reg_381[5:0];

assign tmp_s_fu_587_p1 = tmp_9_reg_1601;

assign weights23_m_weights_1_address0 = tmp_s_fu_587_p1;

assign weights23_m_weights_2_address0 = tmp_s_fu_587_p1;

assign weights23_m_weights_3_address0 = tmp_s_fu_587_p1;

assign weights23_m_weights_s_address0 = tmp_s_fu_587_p1;

endmodule //Conv1DMac_new74
