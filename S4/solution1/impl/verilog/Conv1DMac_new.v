// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module Conv1DMac_new (
        ap_clk,
        ap_rst,
        ap_start,
        start_full_n,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        start_out,
        start_write,
        in_V_V_dout,
        in_V_V_empty_n,
        in_V_V_read,
        out_V_V_din,
        out_V_V_full_n,
        out_V_V_write
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_pp0_stage0 = 3'd2;
parameter    ap_ST_fsm_state7 = 3'd4;

input   ap_clk;
input   ap_rst;
input   ap_start;
input   start_full_n;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output   start_out;
output   start_write;
input  [7:0] in_V_V_dout;
input   in_V_V_empty_n;
output   in_V_V_read;
output  [31:0] out_V_V_din;
input   out_V_V_full_n;
output   out_V_V_write;

reg ap_done;
reg ap_idle;
reg start_write;
reg in_V_V_read;
reg out_V_V_write;

reg    real_start;
reg    start_once_reg;
reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    internal_ap_ready;
wire   [14:0] weights20_m_weights_3_address0;
reg    weights20_m_weights_3_ce0;
wire   [5:0] weights20_m_weights_3_q0;
wire   [14:0] weights20_m_weights_2_address0;
reg    weights20_m_weights_2_ce0;
wire   [6:0] weights20_m_weights_2_q0;
wire   [14:0] weights20_m_weights_1_address0;
reg    weights20_m_weights_1_ce0;
wire   [6:0] weights20_m_weights_1_q0;
wire   [14:0] weights20_m_weights_s_address0;
reg    weights20_m_weights_s_ce0;
wire   [6:0] weights20_m_weights_s_q0;
reg    in_V_V_blk_n;
reg    ap_enable_reg_pp0_iter2;
wire    ap_block_pp0_stage0;
reg   [0:0] exitcond_flatten2_reg_1563;
reg   [0:0] exitcond_flatten2_reg_1563_pp0_iter1_reg;
reg    out_V_V_blk_n;
reg    ap_enable_reg_pp0_iter4;
reg   [0:0] tmp_9_reg_1590;
reg   [0:0] tmp_9_reg_1590_pp0_iter3_reg;
reg   [24:0] indvar_flatten2_reg_335;
reg   [16:0] indvar_flatten_reg_346;
reg   [6:0] nm_reg_357;
reg   [9:0] sf_reg_368;
wire   [0:0] exitcond_flatten2_fu_411_p2;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_block_state2_pp0_stage0_iter0;
wire    ap_block_state3_pp0_stage0_iter1;
reg    ap_block_state4_pp0_stage0_iter2;
wire    ap_block_state5_pp0_stage0_iter3;
reg    ap_block_state6_pp0_stage0_iter4;
reg    ap_block_pp0_stage0_11001;
wire   [24:0] indvar_flatten_next2_fu_417_p2;
reg    ap_enable_reg_pp0_iter0;
wire   [5:0] nm_t_mid2_fu_511_p3;
reg   [5:0] nm_t_mid2_reg_1572;
reg   [5:0] nm_t_mid2_reg_1572_pp0_iter1_reg;
reg   [5:0] nm_t_mid2_reg_1572_pp0_iter2_reg;
wire   [6:0] nm_mid2_fu_519_p3;
wire   [14:0] tmp_6_fu_531_p2;
reg   [14:0] tmp_6_reg_1585;
wire   [0:0] tmp_9_fu_537_p2;
reg   [0:0] tmp_9_reg_1590_pp0_iter1_reg;
reg   [0:0] tmp_9_reg_1590_pp0_iter2_reg;
wire   [9:0] sf_1_fu_543_p2;
wire   [16:0] indvar_flatten_next_fu_555_p3;
reg   [6:0] tmp_28_reg_1624;
reg   [0:0] tmp_47_reg_1629;
wire   [0:0] tmp_14_fu_642_p2;
reg   [0:0] tmp_14_reg_1634;
reg   [7:0] tmp_31_reg_1639;
reg   [0:0] tmp_50_reg_1644;
wire   [0:0] tmp_16_1_fu_712_p2;
reg   [0:0] tmp_16_1_reg_1649;
reg   [7:0] tmp_33_reg_1654;
reg   [0:0] tmp_53_reg_1659;
wire   [0:0] tmp_16_2_fu_782_p2;
reg   [0:0] tmp_16_2_reg_1664;
reg   [7:0] tmp_35_reg_1669;
reg   [0:0] tmp_56_reg_1674;
wire   [0:0] tmp_16_3_fu_852_p2;
reg   [0:0] tmp_16_3_reg_1679;
wire   [7:0] p_Val2_7_fu_1103_p2;
reg   [7:0] p_Val2_7_reg_1684;
wire   [7:0] p_Val2_7_1_fu_1242_p2;
reg   [7:0] p_Val2_7_1_reg_1689;
wire   [7:0] p_Val2_7_2_fu_1381_p2;
reg   [7:0] p_Val2_7_2_reg_1694;
wire   [7:0] p_Val2_7_3_fu_1520_p2;
reg   [7:0] p_Val2_7_3_reg_1699;
reg    ap_block_state1;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state2;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter3;
wire   [63:0] tmp_7_fu_563_p1;
reg    ap_block_pp0_stage0_01001;
reg   [7:0] macRegisters_0_V_2_fu_254;
wire   [7:0] macRegisters_0_V_fu_887_p2;
reg   [7:0] macRegisters_1_V_2_fu_258;
wire   [7:0] macRegisters_1_V_fu_907_p2;
reg   [7:0] macRegisters_2_V_2_fu_262;
wire   [7:0] macRegisters_2_V_fu_926_p2;
reg   [7:0] macRegisters_3_V_2_fu_266;
wire   [7:0] macRegisters_3_V_fu_945_p2;
wire   [5:0] tmp_fu_399_p1;
wire   [0:0] exitcond_flatten_fu_423_p2;
wire   [14:0] tmp_3_fu_403_p3;
wire   [0:0] tmp_40_fu_459_p2;
wire   [0:0] not_exitcond_flatten_fu_453_p2;
wire   [6:0] nm_mid_fu_429_p3;
wire   [0:0] tmp_5_mid_fu_465_p2;
wire   [0:0] tmp_30_fu_477_p2;
wire   [6:0] nm_1_fu_471_p2;
wire   [5:0] tmp_45_fu_491_p1;
wire   [14:0] tmp_3_mid1_fu_495_p3;
wire   [14:0] tmp_3_mid_fu_437_p3;
wire   [5:0] nm_t_mid_fu_445_p3;
wire   [9:0] sf_mid2_fu_483_p3;
wire   [14:0] sf_cast_fu_527_p1;
wire   [14:0] tmp_3_mid2_fu_503_p3;
wire   [16:0] indvar_flatten_op_fu_549_p2;
wire  signed [7:0] p_08_cast_fu_570_p0;
wire  signed [7:0] p_08_cast_cast_fu_574_p0;
wire  signed [5:0] p_Val2_s_fu_582_p0;
wire  signed [7:0] p_Val2_s_fu_582_p1;
wire   [13:0] p_Val2_s_fu_582_p2;
wire   [0:0] tmp_48_fu_614_p1;
wire   [0:0] tmp_46_fu_588_p3;
wire   [4:0] tmp_12_fu_624_p4;
wire   [0:0] tmp_11_fu_618_p2;
wire   [5:0] tmp_13_fu_634_p3;
wire  signed [6:0] p_Val2_s_62_fu_652_p0;
wire  signed [7:0] p_Val2_s_62_fu_652_p1;
wire  signed [14:0] p_08_cast_fu_570_p1;
wire   [14:0] p_Val2_s_62_fu_652_p2;
wire   [0:0] tmp_51_fu_684_p1;
wire   [0:0] tmp_49_fu_658_p3;
wire   [4:0] tmp_18_fu_694_p4;
wire   [0:0] tmp_17_fu_688_p2;
wire   [5:0] tmp_19_fu_704_p3;
wire  signed [6:0] p_Val2_3_fu_722_p0;
wire  signed [7:0] p_Val2_3_fu_722_p1;
wire   [14:0] p_Val2_3_fu_722_p2;
wire   [0:0] tmp_54_fu_754_p1;
wire   [0:0] tmp_52_fu_728_p3;
wire   [4:0] tmp_22_fu_764_p4;
wire   [0:0] tmp_21_fu_758_p2;
wire   [5:0] tmp_23_fu_774_p3;
wire  signed [6:0] p_Val2_4_fu_792_p0;
wire  signed [7:0] p_Val2_4_fu_792_p1;
wire   [14:0] p_Val2_4_fu_792_p2;
wire   [0:0] tmp_57_fu_824_p1;
wire   [0:0] tmp_55_fu_798_p3;
wire   [4:0] tmp_26_fu_834_p4;
wire   [0:0] tmp_25_fu_828_p2;
wire   [5:0] tmp_27_fu_844_p3;
wire   [0:0] qb_assign_1_fu_873_p2;
wire   [7:0] tmp_15_fu_877_p1;
wire  signed [7:0] tmp_29_fu_870_p1;
wire   [7:0] tmp1_fu_881_p2;
wire   [0:0] qb_assign_1_1_fu_893_p2;
wire   [7:0] tmp_17_1_fu_897_p1;
wire   [7:0] tmp2_fu_901_p2;
wire   [0:0] qb_assign_1_2_fu_912_p2;
wire   [7:0] tmp_17_2_fu_916_p1;
wire   [7:0] tmp3_fu_920_p2;
wire   [0:0] qb_assign_1_3_fu_931_p2;
wire   [7:0] tmp_17_3_fu_935_p1;
wire   [7:0] tmp4_fu_939_p2;
wire   [7:0] tmp_36_fu_970_p66;
wire   [7:0] tmp_37_fu_1109_p66;
wire   [7:0] tmp_38_fu_1248_p66;
wire   [7:0] tmp_39_fu_1387_p66;
wire    ap_CS_fsm_state7;
reg   [2:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;

// power-on initialization
initial begin
#0 start_once_reg = 1'b0;
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 3'd1;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
end

Conv1DMac_new_weicud #(
    .DataWidth( 6 ),
    .AddressRange( 32768 ),
    .AddressWidth( 15 ))
weights20_m_weights_3_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(weights20_m_weights_3_address0),
    .ce0(weights20_m_weights_3_ce0),
    .q0(weights20_m_weights_3_q0)
);

Conv1DMac_new_weidEe #(
    .DataWidth( 7 ),
    .AddressRange( 32768 ),
    .AddressWidth( 15 ))
weights20_m_weights_2_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(weights20_m_weights_2_address0),
    .ce0(weights20_m_weights_2_ce0),
    .q0(weights20_m_weights_2_q0)
);

Conv1DMac_new_weieOg #(
    .DataWidth( 7 ),
    .AddressRange( 32768 ),
    .AddressWidth( 15 ))
weights20_m_weights_1_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(weights20_m_weights_1_address0),
    .ce0(weights20_m_weights_1_ce0),
    .q0(weights20_m_weights_1_q0)
);

Conv1DMac_new_weifYi #(
    .DataWidth( 7 ),
    .AddressRange( 32768 ),
    .AddressWidth( 15 ))
weights20_m_weights_s_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(weights20_m_weights_s_address0),
    .ce0(weights20_m_weights_s_ce0),
    .q0(weights20_m_weights_s_q0)
);

computeS4_mux_646g8j #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 8 ),
    .din3_WIDTH( 8 ),
    .din4_WIDTH( 8 ),
    .din5_WIDTH( 8 ),
    .din6_WIDTH( 8 ),
    .din7_WIDTH( 8 ),
    .din8_WIDTH( 8 ),
    .din9_WIDTH( 8 ),
    .din10_WIDTH( 8 ),
    .din11_WIDTH( 8 ),
    .din12_WIDTH( 8 ),
    .din13_WIDTH( 8 ),
    .din14_WIDTH( 8 ),
    .din15_WIDTH( 8 ),
    .din16_WIDTH( 8 ),
    .din17_WIDTH( 8 ),
    .din18_WIDTH( 8 ),
    .din19_WIDTH( 8 ),
    .din20_WIDTH( 8 ),
    .din21_WIDTH( 8 ),
    .din22_WIDTH( 8 ),
    .din23_WIDTH( 8 ),
    .din24_WIDTH( 8 ),
    .din25_WIDTH( 8 ),
    .din26_WIDTH( 8 ),
    .din27_WIDTH( 8 ),
    .din28_WIDTH( 8 ),
    .din29_WIDTH( 8 ),
    .din30_WIDTH( 8 ),
    .din31_WIDTH( 8 ),
    .din32_WIDTH( 8 ),
    .din33_WIDTH( 8 ),
    .din34_WIDTH( 8 ),
    .din35_WIDTH( 8 ),
    .din36_WIDTH( 8 ),
    .din37_WIDTH( 8 ),
    .din38_WIDTH( 8 ),
    .din39_WIDTH( 8 ),
    .din40_WIDTH( 8 ),
    .din41_WIDTH( 8 ),
    .din42_WIDTH( 8 ),
    .din43_WIDTH( 8 ),
    .din44_WIDTH( 8 ),
    .din45_WIDTH( 8 ),
    .din46_WIDTH( 8 ),
    .din47_WIDTH( 8 ),
    .din48_WIDTH( 8 ),
    .din49_WIDTH( 8 ),
    .din50_WIDTH( 8 ),
    .din51_WIDTH( 8 ),
    .din52_WIDTH( 8 ),
    .din53_WIDTH( 8 ),
    .din54_WIDTH( 8 ),
    .din55_WIDTH( 8 ),
    .din56_WIDTH( 8 ),
    .din57_WIDTH( 8 ),
    .din58_WIDTH( 8 ),
    .din59_WIDTH( 8 ),
    .din60_WIDTH( 8 ),
    .din61_WIDTH( 8 ),
    .din62_WIDTH( 8 ),
    .din63_WIDTH( 8 ),
    .din64_WIDTH( 6 ),
    .dout_WIDTH( 8 ))
computeS4_mux_646g8j_U8(
    .din0(8'd12),
    .din1(8'd6),
    .din2(8'd7),
    .din3(8'd6),
    .din4(8'd6),
    .din5(8'd3),
    .din6(8'd11),
    .din7(8'd4),
    .din8(8'd7),
    .din9(8'd6),
    .din10(8'd0),
    .din11(8'd254),
    .din12(8'd1),
    .din13(8'd6),
    .din14(8'd0),
    .din15(8'd244),
    .din16(8'd10),
    .din17(8'd250),
    .din18(8'd3),
    .din19(8'd8),
    .din20(8'd6),
    .din21(8'd247),
    .din22(8'd28),
    .din23(8'd254),
    .din24(8'd251),
    .din25(8'd249),
    .din26(8'd11),
    .din27(8'd0),
    .din28(8'd4),
    .din29(8'd255),
    .din30(8'd253),
    .din31(8'd0),
    .din32(8'd255),
    .din33(8'd253),
    .din34(8'd7),
    .din35(8'd243),
    .din36(8'd20),
    .din37(8'd250),
    .din38(8'd244),
    .din39(8'd10),
    .din40(8'd255),
    .din41(8'd14),
    .din42(8'd12),
    .din43(8'd228),
    .din44(8'd239),
    .din45(8'd255),
    .din46(8'd10),
    .din47(8'd14),
    .din48(8'd253),
    .din49(8'd248),
    .din50(8'd24),
    .din51(8'd242),
    .din52(8'd8),
    .din53(8'd254),
    .din54(8'd247),
    .din55(8'd252),
    .din56(8'd11),
    .din57(8'd252),
    .din58(8'd245),
    .din59(8'd2),
    .din60(8'd7),
    .din61(8'd15),
    .din62(8'd254),
    .din63(8'd11),
    .din64(nm_t_mid2_reg_1572_pp0_iter2_reg),
    .dout(tmp_36_fu_970_p66)
);

computeS4_mux_646g8j #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 8 ),
    .din3_WIDTH( 8 ),
    .din4_WIDTH( 8 ),
    .din5_WIDTH( 8 ),
    .din6_WIDTH( 8 ),
    .din7_WIDTH( 8 ),
    .din8_WIDTH( 8 ),
    .din9_WIDTH( 8 ),
    .din10_WIDTH( 8 ),
    .din11_WIDTH( 8 ),
    .din12_WIDTH( 8 ),
    .din13_WIDTH( 8 ),
    .din14_WIDTH( 8 ),
    .din15_WIDTH( 8 ),
    .din16_WIDTH( 8 ),
    .din17_WIDTH( 8 ),
    .din18_WIDTH( 8 ),
    .din19_WIDTH( 8 ),
    .din20_WIDTH( 8 ),
    .din21_WIDTH( 8 ),
    .din22_WIDTH( 8 ),
    .din23_WIDTH( 8 ),
    .din24_WIDTH( 8 ),
    .din25_WIDTH( 8 ),
    .din26_WIDTH( 8 ),
    .din27_WIDTH( 8 ),
    .din28_WIDTH( 8 ),
    .din29_WIDTH( 8 ),
    .din30_WIDTH( 8 ),
    .din31_WIDTH( 8 ),
    .din32_WIDTH( 8 ),
    .din33_WIDTH( 8 ),
    .din34_WIDTH( 8 ),
    .din35_WIDTH( 8 ),
    .din36_WIDTH( 8 ),
    .din37_WIDTH( 8 ),
    .din38_WIDTH( 8 ),
    .din39_WIDTH( 8 ),
    .din40_WIDTH( 8 ),
    .din41_WIDTH( 8 ),
    .din42_WIDTH( 8 ),
    .din43_WIDTH( 8 ),
    .din44_WIDTH( 8 ),
    .din45_WIDTH( 8 ),
    .din46_WIDTH( 8 ),
    .din47_WIDTH( 8 ),
    .din48_WIDTH( 8 ),
    .din49_WIDTH( 8 ),
    .din50_WIDTH( 8 ),
    .din51_WIDTH( 8 ),
    .din52_WIDTH( 8 ),
    .din53_WIDTH( 8 ),
    .din54_WIDTH( 8 ),
    .din55_WIDTH( 8 ),
    .din56_WIDTH( 8 ),
    .din57_WIDTH( 8 ),
    .din58_WIDTH( 8 ),
    .din59_WIDTH( 8 ),
    .din60_WIDTH( 8 ),
    .din61_WIDTH( 8 ),
    .din62_WIDTH( 8 ),
    .din63_WIDTH( 8 ),
    .din64_WIDTH( 6 ),
    .dout_WIDTH( 8 ))
computeS4_mux_646g8j_U9(
    .din0(8'd252),
    .din1(8'd12),
    .din2(8'd14),
    .din3(8'd237),
    .din4(8'd2),
    .din5(8'd7),
    .din6(8'd16),
    .din7(8'd15),
    .din8(8'd247),
    .din9(8'd6),
    .din10(8'd11),
    .din11(8'd249),
    .din12(8'd19),
    .din13(8'd13),
    .din14(8'd236),
    .din15(8'd27),
    .din16(8'd240),
    .din17(8'd254),
    .din18(8'd4),
    .din19(8'd250),
    .din20(8'd247),
    .din21(8'd9),
    .din22(8'd238),
    .din23(8'd255),
    .din24(8'd19),
    .din25(8'd2),
    .din26(8'd24),
    .din27(8'd2),
    .din28(8'd251),
    .din29(8'd248),
    .din30(8'd255),
    .din31(8'd12),
    .din32(8'd8),
    .din33(8'd3),
    .din34(8'd250),
    .din35(8'd246),
    .din36(8'd8),
    .din37(8'd26),
    .din38(8'd7),
    .din39(8'd10),
    .din40(8'd9),
    .din41(8'd3),
    .din42(8'd245),
    .din43(8'd2),
    .din44(8'd254),
    .din45(8'd5),
    .din46(8'd238),
    .din47(8'd14),
    .din48(8'd10),
    .din49(8'd254),
    .din50(8'd9),
    .din51(8'd4),
    .din52(8'd231),
    .din53(8'd255),
    .din54(8'd9),
    .din55(8'd6),
    .din56(8'd7),
    .din57(8'd17),
    .din58(8'd249),
    .din59(8'd253),
    .din60(8'd9),
    .din61(8'd1),
    .din62(8'd4),
    .din63(8'd26),
    .din64(nm_t_mid2_reg_1572_pp0_iter2_reg),
    .dout(tmp_37_fu_1109_p66)
);

computeS4_mux_646g8j #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 8 ),
    .din3_WIDTH( 8 ),
    .din4_WIDTH( 8 ),
    .din5_WIDTH( 8 ),
    .din6_WIDTH( 8 ),
    .din7_WIDTH( 8 ),
    .din8_WIDTH( 8 ),
    .din9_WIDTH( 8 ),
    .din10_WIDTH( 8 ),
    .din11_WIDTH( 8 ),
    .din12_WIDTH( 8 ),
    .din13_WIDTH( 8 ),
    .din14_WIDTH( 8 ),
    .din15_WIDTH( 8 ),
    .din16_WIDTH( 8 ),
    .din17_WIDTH( 8 ),
    .din18_WIDTH( 8 ),
    .din19_WIDTH( 8 ),
    .din20_WIDTH( 8 ),
    .din21_WIDTH( 8 ),
    .din22_WIDTH( 8 ),
    .din23_WIDTH( 8 ),
    .din24_WIDTH( 8 ),
    .din25_WIDTH( 8 ),
    .din26_WIDTH( 8 ),
    .din27_WIDTH( 8 ),
    .din28_WIDTH( 8 ),
    .din29_WIDTH( 8 ),
    .din30_WIDTH( 8 ),
    .din31_WIDTH( 8 ),
    .din32_WIDTH( 8 ),
    .din33_WIDTH( 8 ),
    .din34_WIDTH( 8 ),
    .din35_WIDTH( 8 ),
    .din36_WIDTH( 8 ),
    .din37_WIDTH( 8 ),
    .din38_WIDTH( 8 ),
    .din39_WIDTH( 8 ),
    .din40_WIDTH( 8 ),
    .din41_WIDTH( 8 ),
    .din42_WIDTH( 8 ),
    .din43_WIDTH( 8 ),
    .din44_WIDTH( 8 ),
    .din45_WIDTH( 8 ),
    .din46_WIDTH( 8 ),
    .din47_WIDTH( 8 ),
    .din48_WIDTH( 8 ),
    .din49_WIDTH( 8 ),
    .din50_WIDTH( 8 ),
    .din51_WIDTH( 8 ),
    .din52_WIDTH( 8 ),
    .din53_WIDTH( 8 ),
    .din54_WIDTH( 8 ),
    .din55_WIDTH( 8 ),
    .din56_WIDTH( 8 ),
    .din57_WIDTH( 8 ),
    .din58_WIDTH( 8 ),
    .din59_WIDTH( 8 ),
    .din60_WIDTH( 8 ),
    .din61_WIDTH( 8 ),
    .din62_WIDTH( 8 ),
    .din63_WIDTH( 8 ),
    .din64_WIDTH( 6 ),
    .dout_WIDTH( 8 ))
computeS4_mux_646g8j_U10(
    .din0(8'd21),
    .din1(8'd250),
    .din2(8'd19),
    .din3(8'd248),
    .din4(8'd2),
    .din5(8'd3),
    .din6(8'd250),
    .din7(8'd251),
    .din8(8'd1),
    .din9(8'd16),
    .din10(8'd1),
    .din11(8'd9),
    .din12(8'd2),
    .din13(8'd249),
    .din14(8'd250),
    .din15(8'd7),
    .din16(8'd14),
    .din17(8'd35),
    .din18(8'd23),
    .din19(8'd250),
    .din20(8'd16),
    .din21(8'd18),
    .din22(8'd6),
    .din23(8'd237),
    .din24(8'd6),
    .din25(8'd4),
    .din26(8'd255),
    .din27(8'd3),
    .din28(8'd26),
    .din29(8'd252),
    .din30(8'd220),
    .din31(8'd254),
    .din32(8'd31),
    .din33(8'd0),
    .din34(8'd250),
    .din35(8'd3),
    .din36(8'd253),
    .din37(8'd250),
    .din38(8'd249),
    .din39(8'd0),
    .din40(8'd253),
    .din41(8'd5),
    .din42(8'd20),
    .din43(8'd30),
    .din44(8'd253),
    .din45(8'd245),
    .din46(8'd2),
    .din47(8'd232),
    .din48(8'd249),
    .din49(8'd2),
    .din50(8'd253),
    .din51(8'd4),
    .din52(8'd19),
    .din53(8'd3),
    .din54(8'd12),
    .din55(8'd244),
    .din56(8'd235),
    .din57(8'd7),
    .din58(8'd6),
    .din59(8'd252),
    .din60(8'd241),
    .din61(8'd6),
    .din62(8'd254),
    .din63(8'd15),
    .din64(nm_t_mid2_reg_1572_pp0_iter2_reg),
    .dout(tmp_38_fu_1248_p66)
);

computeS4_mux_646g8j #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 8 ),
    .din3_WIDTH( 8 ),
    .din4_WIDTH( 8 ),
    .din5_WIDTH( 8 ),
    .din6_WIDTH( 8 ),
    .din7_WIDTH( 8 ),
    .din8_WIDTH( 8 ),
    .din9_WIDTH( 8 ),
    .din10_WIDTH( 8 ),
    .din11_WIDTH( 8 ),
    .din12_WIDTH( 8 ),
    .din13_WIDTH( 8 ),
    .din14_WIDTH( 8 ),
    .din15_WIDTH( 8 ),
    .din16_WIDTH( 8 ),
    .din17_WIDTH( 8 ),
    .din18_WIDTH( 8 ),
    .din19_WIDTH( 8 ),
    .din20_WIDTH( 8 ),
    .din21_WIDTH( 8 ),
    .din22_WIDTH( 8 ),
    .din23_WIDTH( 8 ),
    .din24_WIDTH( 8 ),
    .din25_WIDTH( 8 ),
    .din26_WIDTH( 8 ),
    .din27_WIDTH( 8 ),
    .din28_WIDTH( 8 ),
    .din29_WIDTH( 8 ),
    .din30_WIDTH( 8 ),
    .din31_WIDTH( 8 ),
    .din32_WIDTH( 8 ),
    .din33_WIDTH( 8 ),
    .din34_WIDTH( 8 ),
    .din35_WIDTH( 8 ),
    .din36_WIDTH( 8 ),
    .din37_WIDTH( 8 ),
    .din38_WIDTH( 8 ),
    .din39_WIDTH( 8 ),
    .din40_WIDTH( 8 ),
    .din41_WIDTH( 8 ),
    .din42_WIDTH( 8 ),
    .din43_WIDTH( 8 ),
    .din44_WIDTH( 8 ),
    .din45_WIDTH( 8 ),
    .din46_WIDTH( 8 ),
    .din47_WIDTH( 8 ),
    .din48_WIDTH( 8 ),
    .din49_WIDTH( 8 ),
    .din50_WIDTH( 8 ),
    .din51_WIDTH( 8 ),
    .din52_WIDTH( 8 ),
    .din53_WIDTH( 8 ),
    .din54_WIDTH( 8 ),
    .din55_WIDTH( 8 ),
    .din56_WIDTH( 8 ),
    .din57_WIDTH( 8 ),
    .din58_WIDTH( 8 ),
    .din59_WIDTH( 8 ),
    .din60_WIDTH( 8 ),
    .din61_WIDTH( 8 ),
    .din62_WIDTH( 8 ),
    .din63_WIDTH( 8 ),
    .din64_WIDTH( 6 ),
    .dout_WIDTH( 8 ))
computeS4_mux_646g8j_U11(
    .din0(8'd11),
    .din1(8'd3),
    .din2(8'd2),
    .din3(8'd22),
    .din4(8'd14),
    .din5(8'd0),
    .din6(8'd25),
    .din7(8'd15),
    .din8(8'd2),
    .din9(8'd226),
    .din10(8'd21),
    .din11(8'd244),
    .din12(8'd255),
    .din13(8'd5),
    .din14(8'd255),
    .din15(8'd252),
    .din16(8'd5),
    .din17(8'd20),
    .din18(8'd10),
    .din19(8'd245),
    .din20(8'd7),
    .din21(8'd16),
    .din22(8'd3),
    .din23(8'd6),
    .din24(8'd3),
    .din25(8'd252),
    .din26(8'd7),
    .din27(8'd255),
    .din28(8'd0),
    .din29(8'd0),
    .din30(8'd16),
    .din31(8'd10),
    .din32(8'd8),
    .din33(8'd17),
    .din34(8'd11),
    .din35(8'd250),
    .din36(8'd252),
    .din37(8'd3),
    .din38(8'd18),
    .din39(8'd13),
    .din40(8'd8),
    .din41(8'd230),
    .din42(8'd15),
    .din43(8'd5),
    .din44(8'd222),
    .din45(8'd6),
    .din46(8'd4),
    .din47(8'd12),
    .din48(8'd248),
    .din49(8'd16),
    .din50(8'd22),
    .din51(8'd13),
    .din52(8'd14),
    .din53(8'd29),
    .din54(8'd2),
    .din55(8'd248),
    .din56(8'd1),
    .din57(8'd9),
    .din58(8'd8),
    .din59(8'd247),
    .din60(8'd9),
    .din61(8'd2),
    .din62(8'd5),
    .din63(8'd5),
    .din64(nm_t_mid2_reg_1572_pp0_iter2_reg),
    .dout(tmp_39_fu_1387_p66)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state7)) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state2) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state2)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state2);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter4 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((internal_ap_ready == 1'b0) & (real_start == 1'b1))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_flatten2_fu_411_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        indvar_flatten2_reg_335 <= indvar_flatten_next2_fu_417_p2;
    end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        indvar_flatten2_reg_335 <= 25'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_flatten2_fu_411_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        indvar_flatten_reg_346 <= indvar_flatten_next_fu_555_p3;
    end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        indvar_flatten_reg_346 <= 17'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_9_reg_1590_pp0_iter2_reg == 1'd0) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        macRegisters_0_V_2_fu_254 <= macRegisters_0_V_fu_887_p2;
    end else if (((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1)) | ((tmp_9_reg_1590_pp0_iter2_reg == 1'd1) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001)))) begin
        macRegisters_0_V_2_fu_254 <= 8'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_9_reg_1590_pp0_iter2_reg == 1'd0) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        macRegisters_1_V_2_fu_258 <= macRegisters_1_V_fu_907_p2;
    end else if (((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1)) | ((tmp_9_reg_1590_pp0_iter2_reg == 1'd1) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001)))) begin
        macRegisters_1_V_2_fu_258 <= 8'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_9_reg_1590_pp0_iter2_reg == 1'd0) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        macRegisters_2_V_2_fu_262 <= macRegisters_2_V_fu_926_p2;
    end else if (((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1)) | ((tmp_9_reg_1590_pp0_iter2_reg == 1'd1) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001)))) begin
        macRegisters_2_V_2_fu_262 <= 8'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_9_reg_1590_pp0_iter2_reg == 1'd0) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        macRegisters_3_V_2_fu_266 <= macRegisters_3_V_fu_945_p2;
    end else if (((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1)) | ((tmp_9_reg_1590_pp0_iter2_reg == 1'd1) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001)))) begin
        macRegisters_3_V_2_fu_266 <= 8'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_flatten2_fu_411_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        nm_reg_357 <= nm_mid2_fu_519_p3;
    end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        nm_reg_357 <= 7'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_flatten2_fu_411_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        sf_reg_368 <= sf_1_fu_543_p2;
    end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        sf_reg_368 <= 10'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        exitcond_flatten2_reg_1563 <= exitcond_flatten2_fu_411_p2;
        exitcond_flatten2_reg_1563_pp0_iter1_reg <= exitcond_flatten2_reg_1563;
        nm_t_mid2_reg_1572_pp0_iter1_reg <= nm_t_mid2_reg_1572;
        tmp_9_reg_1590_pp0_iter1_reg <= tmp_9_reg_1590;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_flatten2_fu_411_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        nm_t_mid2_reg_1572 <= nm_t_mid2_fu_511_p3;
        tmp_6_reg_1585 <= tmp_6_fu_531_p2;
        tmp_9_reg_1590 <= tmp_9_fu_537_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        nm_t_mid2_reg_1572_pp0_iter2_reg <= nm_t_mid2_reg_1572_pp0_iter1_reg;
        tmp_9_reg_1590_pp0_iter2_reg <= tmp_9_reg_1590_pp0_iter1_reg;
        tmp_9_reg_1590_pp0_iter3_reg <= tmp_9_reg_1590_pp0_iter2_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_9_reg_1590_pp0_iter2_reg == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        p_Val2_7_1_reg_1689 <= p_Val2_7_1_fu_1242_p2;
        p_Val2_7_2_reg_1694 <= p_Val2_7_2_fu_1381_p2;
        p_Val2_7_3_reg_1699 <= p_Val2_7_3_fu_1520_p2;
        p_Val2_7_reg_1684 <= p_Val2_7_fu_1103_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_flatten2_reg_1563_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        tmp_14_reg_1634 <= tmp_14_fu_642_p2;
        tmp_16_1_reg_1649 <= tmp_16_1_fu_712_p2;
        tmp_16_2_reg_1664 <= tmp_16_2_fu_782_p2;
        tmp_16_3_reg_1679 <= tmp_16_3_fu_852_p2;
        tmp_28_reg_1624 <= {{p_Val2_s_fu_582_p2[13:7]}};
        tmp_31_reg_1639 <= {{p_Val2_s_62_fu_652_p2[14:7]}};
        tmp_33_reg_1654 <= {{p_Val2_3_fu_722_p2[14:7]}};
        tmp_35_reg_1669 <= {{p_Val2_4_fu_792_p2[14:7]}};
        tmp_47_reg_1629 <= p_Val2_s_fu_582_p2[32'd6];
        tmp_50_reg_1644 <= p_Val2_s_62_fu_652_p2[32'd6];
        tmp_53_reg_1659 <= p_Val2_3_fu_722_p2[32'd6];
        tmp_56_reg_1674 <= p_Val2_4_fu_792_p2[32'd6];
    end
end

always @ (*) begin
    if ((exitcond_flatten2_fu_411_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((real_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond_flatten2_reg_1563_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        in_V_V_blk_n = in_V_V_empty_n;
    end else begin
        in_V_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((exitcond_flatten2_reg_1563_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        in_V_V_read = 1'b1;
    end else begin
        in_V_V_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        internal_ap_ready = 1'b1;
    end else begin
        internal_ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_9_reg_1590_pp0_iter3_reg == 1'd1) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        out_V_V_blk_n = out_V_V_full_n;
    end else begin
        out_V_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((tmp_9_reg_1590_pp0_iter3_reg == 1'd1) & (ap_enable_reg_pp0_iter4 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        out_V_V_write = 1'b1;
    end else begin
        out_V_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (start_full_n == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (real_start == 1'b1))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        weights20_m_weights_1_ce0 = 1'b1;
    end else begin
        weights20_m_weights_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        weights20_m_weights_2_ce0 = 1'b1;
    end else begin
        weights20_m_weights_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        weights20_m_weights_3_ce0 = 1'b1;
    end else begin
        weights20_m_weights_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        weights20_m_weights_s_ce0 = 1'b1;
    end else begin
        weights20_m_weights_s_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((exitcond_flatten2_fu_411_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1)) & ~((ap_enable_reg_pp0_iter3 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter4 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((ap_enable_reg_pp0_iter3 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter4 == 1'b1)) | ((exitcond_flatten2_fu_411_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd2];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = (((tmp_9_reg_1590_pp0_iter3_reg == 1'd1) & (out_V_V_full_n == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b1)) | ((exitcond_flatten2_reg_1563_pp0_iter1_reg == 1'd0) & (in_V_V_empty_n == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((tmp_9_reg_1590_pp0_iter3_reg == 1'd1) & (out_V_V_full_n == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b1)) | ((exitcond_flatten2_reg_1563_pp0_iter1_reg == 1'd0) & (in_V_V_empty_n == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((tmp_9_reg_1590_pp0_iter3_reg == 1'd1) & (out_V_V_full_n == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b1)) | ((exitcond_flatten2_reg_1563_pp0_iter1_reg == 1'd0) & (in_V_V_empty_n == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1)));
end

always @ (*) begin
    ap_block_state1 = ((real_start == 1'b0) | (ap_done_reg == 1'b1));
end

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state4_pp0_stage0_iter2 = ((exitcond_flatten2_reg_1563_pp0_iter1_reg == 1'd0) & (in_V_V_empty_n == 1'b0));
end

assign ap_block_state5_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state6_pp0_stage0_iter4 = ((tmp_9_reg_1590_pp0_iter3_reg == 1'd1) & (out_V_V_full_n == 1'b0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_ready = internal_ap_ready;

assign exitcond_flatten2_fu_411_p2 = ((indvar_flatten2_reg_335 == 25'd16777216) ? 1'b1 : 1'b0);

assign exitcond_flatten_fu_423_p2 = ((indvar_flatten_reg_346 == 17'd32768) ? 1'b1 : 1'b0);

assign indvar_flatten_next2_fu_417_p2 = (25'd1 + indvar_flatten2_reg_335);

assign indvar_flatten_next_fu_555_p3 = ((exitcond_flatten_fu_423_p2[0:0] === 1'b1) ? 17'd1 : indvar_flatten_op_fu_549_p2);

assign indvar_flatten_op_fu_549_p2 = (indvar_flatten_reg_346 + 17'd1);

assign macRegisters_0_V_fu_887_p2 = ($signed(tmp_29_fu_870_p1) + $signed(tmp1_fu_881_p2));

assign macRegisters_1_V_fu_907_p2 = (tmp_31_reg_1639 + tmp2_fu_901_p2);

assign macRegisters_2_V_fu_926_p2 = (tmp_33_reg_1654 + tmp3_fu_920_p2);

assign macRegisters_3_V_fu_945_p2 = (tmp_35_reg_1669 + tmp4_fu_939_p2);

assign nm_1_fu_471_p2 = (7'd1 + nm_mid_fu_429_p3);

assign nm_mid2_fu_519_p3 = ((tmp_5_mid_fu_465_p2[0:0] === 1'b1) ? nm_1_fu_471_p2 : nm_mid_fu_429_p3);

assign nm_mid_fu_429_p3 = ((exitcond_flatten_fu_423_p2[0:0] === 1'b1) ? 7'd0 : nm_reg_357);

assign nm_t_mid2_fu_511_p3 = ((tmp_5_mid_fu_465_p2[0:0] === 1'b1) ? tmp_45_fu_491_p1 : nm_t_mid_fu_445_p3);

assign nm_t_mid_fu_445_p3 = ((exitcond_flatten_fu_423_p2[0:0] === 1'b1) ? 6'd0 : tmp_fu_399_p1);

assign not_exitcond_flatten_fu_453_p2 = (exitcond_flatten_fu_423_p2 ^ 1'd1);

assign out_V_V_din = {{{{p_Val2_7_3_reg_1699}, {p_Val2_7_2_reg_1694}}, {p_Val2_7_1_reg_1689}}, {p_Val2_7_reg_1684}};

assign p_08_cast_cast_fu_574_p0 = in_V_V_dout;

assign p_08_cast_fu_570_p0 = in_V_V_dout;

assign p_08_cast_fu_570_p1 = p_08_cast_fu_570_p0;

assign p_Val2_3_fu_722_p0 = weights20_m_weights_1_q0;

assign p_Val2_3_fu_722_p1 = p_08_cast_fu_570_p1;

assign p_Val2_3_fu_722_p2 = ($signed(p_Val2_3_fu_722_p0) * $signed(p_Val2_3_fu_722_p1));

assign p_Val2_4_fu_792_p0 = weights20_m_weights_s_q0;

assign p_Val2_4_fu_792_p1 = p_08_cast_fu_570_p1;

assign p_Val2_4_fu_792_p2 = ($signed(p_Val2_4_fu_792_p0) * $signed(p_Val2_4_fu_792_p1));

assign p_Val2_7_1_fu_1242_p2 = (macRegisters_1_V_fu_907_p2 + tmp_37_fu_1109_p66);

assign p_Val2_7_2_fu_1381_p2 = (macRegisters_2_V_fu_926_p2 + tmp_38_fu_1248_p66);

assign p_Val2_7_3_fu_1520_p2 = (macRegisters_3_V_fu_945_p2 + tmp_39_fu_1387_p66);

assign p_Val2_7_fu_1103_p2 = (macRegisters_0_V_fu_887_p2 + tmp_36_fu_970_p66);

assign p_Val2_s_62_fu_652_p0 = weights20_m_weights_2_q0;

assign p_Val2_s_62_fu_652_p1 = p_08_cast_fu_570_p1;

assign p_Val2_s_62_fu_652_p2 = ($signed(p_Val2_s_62_fu_652_p0) * $signed(p_Val2_s_62_fu_652_p1));

assign p_Val2_s_fu_582_p0 = weights20_m_weights_3_q0;

assign p_Val2_s_fu_582_p1 = p_08_cast_cast_fu_574_p0;

assign p_Val2_s_fu_582_p2 = ($signed(p_Val2_s_fu_582_p0) * $signed(p_Val2_s_fu_582_p1));

assign qb_assign_1_1_fu_893_p2 = (tmp_50_reg_1644 & tmp_16_1_reg_1649);

assign qb_assign_1_2_fu_912_p2 = (tmp_53_reg_1659 & tmp_16_2_reg_1664);

assign qb_assign_1_3_fu_931_p2 = (tmp_56_reg_1674 & tmp_16_3_reg_1679);

assign qb_assign_1_fu_873_p2 = (tmp_47_reg_1629 & tmp_14_reg_1634);

assign sf_1_fu_543_p2 = (sf_mid2_fu_483_p3 + 10'd1);

assign sf_cast_fu_527_p1 = sf_mid2_fu_483_p3;

assign sf_mid2_fu_483_p3 = ((tmp_30_fu_477_p2[0:0] === 1'b1) ? 10'd0 : sf_reg_368);

assign start_out = real_start;

assign tmp1_fu_881_p2 = (tmp_15_fu_877_p1 + macRegisters_0_V_2_fu_254);

assign tmp2_fu_901_p2 = (tmp_17_1_fu_897_p1 + macRegisters_1_V_2_fu_258);

assign tmp3_fu_920_p2 = (tmp_17_2_fu_916_p1 + macRegisters_2_V_2_fu_262);

assign tmp4_fu_939_p2 = (tmp_17_3_fu_935_p1 + macRegisters_3_V_2_fu_266);

assign tmp_11_fu_618_p2 = (tmp_48_fu_614_p1 | tmp_46_fu_588_p3);

assign tmp_12_fu_624_p4 = {{p_Val2_s_fu_582_p2[5:1]}};

assign tmp_13_fu_634_p3 = {{tmp_12_fu_624_p4}, {tmp_11_fu_618_p2}};

assign tmp_14_fu_642_p2 = ((tmp_13_fu_634_p3 != 6'd0) ? 1'b1 : 1'b0);

assign tmp_15_fu_877_p1 = qb_assign_1_fu_873_p2;

assign tmp_16_1_fu_712_p2 = ((tmp_19_fu_704_p3 != 6'd0) ? 1'b1 : 1'b0);

assign tmp_16_2_fu_782_p2 = ((tmp_23_fu_774_p3 != 6'd0) ? 1'b1 : 1'b0);

assign tmp_16_3_fu_852_p2 = ((tmp_27_fu_844_p3 != 6'd0) ? 1'b1 : 1'b0);

assign tmp_17_1_fu_897_p1 = qb_assign_1_1_fu_893_p2;

assign tmp_17_2_fu_916_p1 = qb_assign_1_2_fu_912_p2;

assign tmp_17_3_fu_935_p1 = qb_assign_1_3_fu_931_p2;

assign tmp_17_fu_688_p2 = (tmp_51_fu_684_p1 | tmp_49_fu_658_p3);

assign tmp_18_fu_694_p4 = {{p_Val2_s_62_fu_652_p2[5:1]}};

assign tmp_19_fu_704_p3 = {{tmp_18_fu_694_p4}, {tmp_17_fu_688_p2}};

assign tmp_21_fu_758_p2 = (tmp_54_fu_754_p1 | tmp_52_fu_728_p3);

assign tmp_22_fu_764_p4 = {{p_Val2_3_fu_722_p2[5:1]}};

assign tmp_23_fu_774_p3 = {{tmp_22_fu_764_p4}, {tmp_21_fu_758_p2}};

assign tmp_25_fu_828_p2 = (tmp_57_fu_824_p1 | tmp_55_fu_798_p3);

assign tmp_26_fu_834_p4 = {{p_Val2_4_fu_792_p2[5:1]}};

assign tmp_27_fu_844_p3 = {{tmp_26_fu_834_p4}, {tmp_25_fu_828_p2}};

assign tmp_29_fu_870_p1 = $signed(tmp_28_reg_1624);

assign tmp_30_fu_477_p2 = (tmp_5_mid_fu_465_p2 | exitcond_flatten_fu_423_p2);

assign tmp_3_fu_403_p3 = {{tmp_fu_399_p1}, {9'd0}};

assign tmp_3_mid1_fu_495_p3 = {{tmp_45_fu_491_p1}, {9'd0}};

assign tmp_3_mid2_fu_503_p3 = ((tmp_5_mid_fu_465_p2[0:0] === 1'b1) ? tmp_3_mid1_fu_495_p3 : tmp_3_mid_fu_437_p3);

assign tmp_3_mid_fu_437_p3 = ((exitcond_flatten_fu_423_p2[0:0] === 1'b1) ? 15'd0 : tmp_3_fu_403_p3);

assign tmp_40_fu_459_p2 = ((sf_reg_368 == 10'd512) ? 1'b1 : 1'b0);

assign tmp_45_fu_491_p1 = nm_1_fu_471_p2[5:0];

assign tmp_46_fu_588_p3 = p_Val2_s_fu_582_p2[32'd13];

assign tmp_48_fu_614_p1 = p_Val2_s_fu_582_p2[0:0];

assign tmp_49_fu_658_p3 = p_Val2_s_62_fu_652_p2[32'd14];

assign tmp_51_fu_684_p1 = p_Val2_s_62_fu_652_p2[0:0];

assign tmp_52_fu_728_p3 = p_Val2_3_fu_722_p2[32'd14];

assign tmp_54_fu_754_p1 = p_Val2_3_fu_722_p2[0:0];

assign tmp_55_fu_798_p3 = p_Val2_4_fu_792_p2[32'd14];

assign tmp_57_fu_824_p1 = p_Val2_4_fu_792_p2[0:0];

assign tmp_5_mid_fu_465_p2 = (tmp_40_fu_459_p2 & not_exitcond_flatten_fu_453_p2);

assign tmp_6_fu_531_p2 = (sf_cast_fu_527_p1 + tmp_3_mid2_fu_503_p3);

assign tmp_7_fu_563_p1 = tmp_6_reg_1585;

assign tmp_9_fu_537_p2 = ((sf_mid2_fu_483_p3 == 10'd511) ? 1'b1 : 1'b0);

assign tmp_fu_399_p1 = nm_reg_357[5:0];

assign weights20_m_weights_1_address0 = tmp_7_fu_563_p1;

assign weights20_m_weights_2_address0 = tmp_7_fu_563_p1;

assign weights20_m_weights_3_address0 = tmp_7_fu_563_p1;

assign weights20_m_weights_s_address0 = tmp_7_fu_563_p1;

endmodule //Conv1DMac_new
