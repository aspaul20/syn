-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.2
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity ResizeStream_1 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    start_full_n : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    start_out : OUT STD_LOGIC;
    start_write : OUT STD_LOGIC;
    in_V_V_TDATA : IN STD_LOGIC_VECTOR (63 downto 0);
    in_V_V_TVALID : IN STD_LOGIC;
    in_V_V_TREADY : OUT STD_LOGIC;
    out_V_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
    out_V_V_full_n : IN STD_LOGIC;
    out_V_V_write : OUT STD_LOGIC );
end;


architecture behav of ResizeStream_1 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv19_0 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000000000";
    constant ap_const_lv19_40000 : STD_LOGIC_VECTOR (18 downto 0) := "1000000000000000000";
    constant ap_const_lv19_1 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000000001";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal real_start : STD_LOGIC;
    signal start_once_reg : STD_LOGIC := '0';
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (2 downto 0) := "001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal internal_ap_ready : STD_LOGIC;
    signal in_V_V_0_data_out : STD_LOGIC_VECTOR (63 downto 0);
    signal in_V_V_0_vld_in : STD_LOGIC;
    signal in_V_V_0_vld_out : STD_LOGIC;
    signal in_V_V_0_ack_in : STD_LOGIC;
    signal in_V_V_0_ack_out : STD_LOGIC;
    signal in_V_V_0_payload_A : STD_LOGIC_VECTOR (63 downto 0);
    signal in_V_V_0_payload_B : STD_LOGIC_VECTOR (63 downto 0);
    signal in_V_V_0_sel_rd : STD_LOGIC := '0';
    signal in_V_V_0_sel_wr : STD_LOGIC := '0';
    signal in_V_V_0_sel : STD_LOGIC;
    signal in_V_V_0_load_A : STD_LOGIC;
    signal in_V_V_0_load_B : STD_LOGIC;
    signal in_V_V_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal in_V_V_0_state_cmp_full : STD_LOGIC;
    signal in_V_V_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal out_V_V_blk_n : STD_LOGIC;
    signal i_1_fu_78_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal i_1_reg_92 : STD_LOGIC_VECTOR (18 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal i_reg_61 : STD_LOGIC_VECTOR (18 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal ap_block_state3 : BOOLEAN;
    signal tmp_fu_72_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (2 downto 0);


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((tmp_fu_72_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    in_V_V_0_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                in_V_V_0_sel_rd <= ap_const_logic_0;
            else
                if (((in_V_V_0_ack_out = ap_const_logic_1) and (in_V_V_0_vld_out = ap_const_logic_1))) then 
                                        in_V_V_0_sel_rd <= not(in_V_V_0_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    in_V_V_0_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                in_V_V_0_sel_wr <= ap_const_logic_0;
            else
                if (((in_V_V_0_ack_in = ap_const_logic_1) and (in_V_V_0_vld_in = ap_const_logic_1))) then 
                                        in_V_V_0_sel_wr <= not(in_V_V_0_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    in_V_V_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                in_V_V_0_state <= ap_const_lv2_0;
            else
                if ((((in_V_V_0_state = ap_const_lv2_2) and (in_V_V_0_vld_in = ap_const_logic_0)) or ((in_V_V_0_state = ap_const_lv2_3) and (in_V_V_0_vld_in = ap_const_logic_0) and (in_V_V_0_ack_out = ap_const_logic_1)))) then 
                    in_V_V_0_state <= ap_const_lv2_2;
                elsif ((((in_V_V_0_state = ap_const_lv2_1) and (in_V_V_0_ack_out = ap_const_logic_0)) or ((in_V_V_0_state = ap_const_lv2_3) and (in_V_V_0_ack_out = ap_const_logic_0) and (in_V_V_0_vld_in = ap_const_logic_1)))) then 
                    in_V_V_0_state <= ap_const_lv2_1;
                elsif (((not(((in_V_V_0_vld_in = ap_const_logic_0) and (in_V_V_0_ack_out = ap_const_logic_1))) and not(((in_V_V_0_ack_out = ap_const_logic_0) and (in_V_V_0_vld_in = ap_const_logic_1))) and (in_V_V_0_state = ap_const_lv2_3)) or ((in_V_V_0_state = ap_const_lv2_1) and (in_V_V_0_ack_out = ap_const_logic_1)) or ((in_V_V_0_state = ap_const_lv2_2) and (in_V_V_0_vld_in = ap_const_logic_1)))) then 
                    in_V_V_0_state <= ap_const_lv2_3;
                else 
                    in_V_V_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    start_once_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                start_once_reg <= ap_const_logic_0;
            else
                if (((internal_ap_ready = ap_const_logic_0) and (real_start = ap_const_logic_1))) then 
                    start_once_reg <= ap_const_logic_1;
                elsif ((internal_ap_ready = ap_const_logic_1)) then 
                    start_once_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i_reg_61_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((in_V_V_0_vld_out = ap_const_logic_0) or (out_V_V_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                i_reg_61 <= i_1_reg_92;
            elsif ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                i_reg_61 <= ap_const_lv19_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                i_1_reg_92 <= i_1_fu_78_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((in_V_V_0_load_A = ap_const_logic_1)) then
                in_V_V_0_payload_A <= in_V_V_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((in_V_V_0_load_B = ap_const_logic_1)) then
                in_V_V_0_payload_B <= in_V_V_TDATA;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (real_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, in_V_V_0_vld_out, out_V_V_full_n, ap_CS_fsm_state3, ap_CS_fsm_state2, tmp_fu_72_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((tmp_fu_72_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if ((not(((in_V_V_0_vld_out = ap_const_logic_0) or (out_V_V_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when others =>  
                ap_NS_fsm <= "XXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);

    ap_block_state1_assign_proc : process(real_start, ap_done_reg)
    begin
                ap_block_state1 <= ((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;


    ap_block_state3_assign_proc : process(in_V_V_0_vld_out, out_V_V_full_n)
    begin
                ap_block_state3 <= ((in_V_V_0_vld_out = ap_const_logic_0) or (out_V_V_full_n = ap_const_logic_0));
    end process;


    ap_done_assign_proc : process(ap_done_reg, ap_CS_fsm_state2, tmp_fu_72_p2)
    begin
        if (((tmp_fu_72_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(real_start, ap_CS_fsm_state1)
    begin
        if (((real_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;

    ap_ready <= internal_ap_ready;
    i_1_fu_78_p2 <= std_logic_vector(unsigned(i_reg_61) + unsigned(ap_const_lv19_1));
    in_V_V_0_ack_in <= in_V_V_0_state(1);

    in_V_V_0_ack_out_assign_proc : process(in_V_V_0_vld_out, out_V_V_full_n, ap_CS_fsm_state3)
    begin
        if ((not(((in_V_V_0_vld_out = ap_const_logic_0) or (out_V_V_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            in_V_V_0_ack_out <= ap_const_logic_1;
        else 
            in_V_V_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    in_V_V_0_data_out_assign_proc : process(in_V_V_0_payload_A, in_V_V_0_payload_B, in_V_V_0_sel)
    begin
        if ((in_V_V_0_sel = ap_const_logic_1)) then 
            in_V_V_0_data_out <= in_V_V_0_payload_B;
        else 
            in_V_V_0_data_out <= in_V_V_0_payload_A;
        end if; 
    end process;

    in_V_V_0_load_A <= (in_V_V_0_state_cmp_full and not(in_V_V_0_sel_wr));
    in_V_V_0_load_B <= (in_V_V_0_state_cmp_full and in_V_V_0_sel_wr);
    in_V_V_0_sel <= in_V_V_0_sel_rd;
    in_V_V_0_state_cmp_full <= '0' when (in_V_V_0_state = ap_const_lv2_1) else '1';
    in_V_V_0_vld_in <= in_V_V_TVALID;
    in_V_V_0_vld_out <= in_V_V_0_state(0);

    in_V_V_TDATA_blk_n_assign_proc : process(in_V_V_0_state, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            in_V_V_TDATA_blk_n <= in_V_V_0_state(0);
        else 
            in_V_V_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    in_V_V_TREADY <= in_V_V_0_state(1);

    internal_ap_ready_assign_proc : process(ap_CS_fsm_state2, tmp_fu_72_p2)
    begin
        if (((tmp_fu_72_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            internal_ap_ready <= ap_const_logic_1;
        else 
            internal_ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    out_V_V_blk_n_assign_proc : process(out_V_V_full_n, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            out_V_V_blk_n <= out_V_V_full_n;
        else 
            out_V_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    out_V_V_din <= in_V_V_0_data_out(8 - 1 downto 0);

    out_V_V_write_assign_proc : process(in_V_V_0_vld_out, out_V_V_full_n, ap_CS_fsm_state3)
    begin
        if ((not(((in_V_V_0_vld_out = ap_const_logic_0) or (out_V_V_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            out_V_V_write <= ap_const_logic_1;
        else 
            out_V_V_write <= ap_const_logic_0;
        end if; 
    end process;


    real_start_assign_proc : process(ap_start, start_full_n, start_once_reg)
    begin
        if (((start_once_reg = ap_const_logic_0) and (start_full_n = ap_const_logic_0))) then 
            real_start <= ap_const_logic_0;
        else 
            real_start <= ap_start;
        end if; 
    end process;

    start_out <= real_start;

    start_write_assign_proc : process(real_start, start_once_reg)
    begin
        if (((start_once_reg = ap_const_logic_0) and (real_start = ap_const_logic_1))) then 
            start_write <= ap_const_logic_1;
        else 
            start_write <= ap_const_logic_0;
        end if; 
    end process;

    tmp_fu_72_p2 <= "1" when (i_reg_61 = ap_const_lv19_40000) else "0";
end behav;
