// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module Conv1DMac_new_1 (
        ap_clk,
        ap_rst,
        ap_start,
        start_full_n,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        start_out,
        start_write,
        in_V_V_dout,
        in_V_V_empty_n,
        in_V_V_read,
        out_V_V_din,
        out_V_V_full_n,
        out_V_V_write
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_pp0_stage0 = 3'd2;
parameter    ap_ST_fsm_state7 = 3'd4;

input   ap_clk;
input   ap_rst;
input   ap_start;
input   start_full_n;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output   start_out;
output   start_write;
input  [7:0] in_V_V_dout;
input   in_V_V_empty_n;
output   in_V_V_read;
output  [31:0] out_V_V_din;
input   out_V_V_full_n;
output   out_V_V_write;

reg ap_done;
reg ap_idle;
reg start_write;
reg in_V_V_read;
reg out_V_V_write;

reg    real_start;
reg    start_once_reg;
reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    internal_ap_ready;
wire   [13:0] weights21_m_weights_3_address0;
reg    weights21_m_weights_3_ce0;
wire   [5:0] weights21_m_weights_3_q0;
wire   [13:0] weights21_m_weights_2_address0;
reg    weights21_m_weights_2_ce0;
wire   [5:0] weights21_m_weights_2_q0;
wire   [13:0] weights21_m_weights_1_address0;
reg    weights21_m_weights_1_ce0;
wire   [6:0] weights21_m_weights_1_q0;
wire   [13:0] weights21_m_weights_s_address0;
reg    weights21_m_weights_s_ce0;
wire   [5:0] weights21_m_weights_s_q0;
reg    in_V_V_blk_n;
reg    ap_enable_reg_pp0_iter2;
wire    ap_block_pp0_stage0;
reg   [0:0] exitcond_flatten1_reg_1547;
reg   [0:0] exitcond_flatten1_reg_1547_pp0_iter1_reg;
reg    out_V_V_blk_n;
reg    ap_enable_reg_pp0_iter4;
reg   [0:0] tmp_6_reg_1574;
reg   [0:0] tmp_6_reg_1574_pp0_iter3_reg;
reg   [23:0] indvar_flatten1_reg_311;
reg   [15:0] indvar_flatten_reg_322;
reg   [6:0] nm_reg_333;
reg   [8:0] sf_reg_344;
wire   [0:0] exitcond_flatten1_fu_387_p2;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_block_state2_pp0_stage0_iter0;
wire    ap_block_state3_pp0_stage0_iter1;
reg    ap_block_state4_pp0_stage0_iter2;
wire    ap_block_state5_pp0_stage0_iter3;
reg    ap_block_state6_pp0_stage0_iter4;
reg    ap_block_pp0_stage0_11001;
wire   [23:0] indvar_flatten_next1_fu_393_p2;
reg    ap_enable_reg_pp0_iter0;
wire   [5:0] nm_t_mid2_fu_487_p3;
reg   [5:0] nm_t_mid2_reg_1556;
reg   [5:0] nm_t_mid2_reg_1556_pp0_iter1_reg;
reg   [5:0] nm_t_mid2_reg_1556_pp0_iter2_reg;
wire   [6:0] nm_mid2_fu_495_p3;
wire   [13:0] tmp_4_fu_507_p2;
reg   [13:0] tmp_4_reg_1569;
wire   [0:0] tmp_6_fu_513_p2;
reg   [0:0] tmp_6_reg_1574_pp0_iter1_reg;
reg   [0:0] tmp_6_reg_1574_pp0_iter2_reg;
wire   [8:0] sf_1_fu_519_p2;
wire   [15:0] indvar_flatten_next_fu_531_p3;
reg   [6:0] tmp_8_reg_1608;
reg   [0:0] tmp_23_reg_1613;
wire   [0:0] tmp_13_fu_618_p2;
reg   [0:0] tmp_13_reg_1618;
reg   [6:0] tmp_15_reg_1623;
reg   [0:0] tmp_38_reg_1628;
wire   [0:0] tmp_40_1_fu_688_p2;
reg   [0:0] tmp_40_1_reg_1633;
reg   [7:0] tmp_21_reg_1638;
reg   [0:0] tmp_41_reg_1643;
wire   [0:0] tmp_40_2_fu_758_p2;
reg   [0:0] tmp_40_2_reg_1648;
reg   [6:0] tmp_26_reg_1653;
reg   [0:0] tmp_44_reg_1658;
wire   [0:0] tmp_40_3_fu_828_p2;
reg   [0:0] tmp_40_3_reg_1663;
wire   [7:0] p_Val2_2_fu_1087_p2;
reg   [7:0] p_Val2_2_reg_1668;
wire   [7:0] p_Val2_2_1_fu_1226_p2;
reg   [7:0] p_Val2_2_1_reg_1673;
wire   [7:0] p_Val2_2_2_fu_1365_p2;
reg   [7:0] p_Val2_2_2_reg_1678;
wire   [7:0] p_Val2_2_3_fu_1504_p2;
reg   [7:0] p_Val2_2_3_reg_1683;
reg    ap_block_state1;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state2;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter3;
wire   [63:0] tmp_5_fu_539_p1;
reg    ap_block_pp0_stage0_01001;
reg   [7:0] macRegisters_0_V_1_fu_230;
wire   [7:0] macRegisters_0_V_fu_863_p2;
reg   [7:0] macRegisters_1_V_1_fu_234;
wire   [7:0] macRegisters_1_V_fu_886_p2;
reg   [7:0] macRegisters_2_V_1_fu_238;
wire   [7:0] macRegisters_2_V_fu_906_p2;
reg   [7:0] macRegisters_3_V_1_fu_242;
wire   [7:0] macRegisters_3_V_fu_928_p2;
wire   [5:0] tmp_fu_375_p1;
wire   [0:0] exitcond_flatten_fu_399_p2;
wire   [13:0] tmp_2_fu_379_p3;
wire   [0:0] tmp_3_fu_435_p2;
wire   [0:0] not_exitcond_flatten_fu_429_p2;
wire   [6:0] nm_mid_fu_405_p3;
wire   [0:0] tmp_3_mid_fu_441_p2;
wire   [0:0] tmp_1_fu_453_p2;
wire   [6:0] nm_1_fu_447_p2;
wire   [5:0] tmp_10_fu_467_p1;
wire   [13:0] tmp_2_mid1_fu_471_p3;
wire   [13:0] tmp_2_mid_fu_413_p3;
wire   [5:0] nm_t_mid_fu_421_p3;
wire   [8:0] sf_mid2_fu_459_p3;
wire   [13:0] sf_cast_fu_503_p1;
wire   [13:0] tmp_2_mid2_fu_479_p3;
wire   [15:0] indvar_flatten_op_fu_525_p2;
wire  signed [7:0] p_08_cast_fu_546_p0;
wire  signed [7:0] p_08_cast_cast_fu_550_p0;
wire  signed [5:0] p_Val2_s_fu_558_p0;
wire  signed [7:0] p_Val2_s_fu_558_p1;
wire  signed [13:0] p_08_cast_cast_fu_550_p1;
wire   [13:0] p_Val2_s_fu_558_p2;
wire   [0:0] tmp_29_fu_590_p1;
wire   [0:0] tmp_18_fu_564_p3;
wire   [4:0] tmp_11_fu_600_p4;
wire   [0:0] tmp_7_fu_594_p2;
wire   [5:0] tmp_12_fu_610_p3;
wire  signed [5:0] p_Val2_s_56_fu_628_p0;
wire  signed [7:0] p_Val2_s_56_fu_628_p1;
wire   [13:0] p_Val2_s_56_fu_628_p2;
wire   [0:0] tmp_39_fu_660_p1;
wire   [0:0] tmp_37_fu_634_p3;
wire   [4:0] tmp_19_fu_670_p4;
wire   [0:0] tmp_17_fu_664_p2;
wire   [5:0] tmp_20_fu_680_p3;
wire  signed [6:0] p_Val2_5_fu_698_p0;
wire  signed [7:0] p_Val2_5_fu_698_p1;
wire   [14:0] p_Val2_5_fu_698_p2;
wire   [0:0] tmp_42_fu_730_p1;
wire   [0:0] tmp_40_fu_704_p3;
wire   [4:0] tmp_24_fu_740_p4;
wire   [0:0] tmp_22_fu_734_p2;
wire   [5:0] tmp_25_fu_750_p3;
wire  signed [5:0] p_Val2_3_fu_768_p0;
wire  signed [7:0] p_Val2_3_fu_768_p1;
wire   [13:0] p_Val2_3_fu_768_p2;
wire   [0:0] tmp_45_fu_800_p1;
wire   [0:0] tmp_43_fu_774_p3;
wire   [4:0] tmp_30_fu_810_p4;
wire   [0:0] tmp_28_fu_804_p2;
wire   [5:0] tmp_31_fu_820_p3;
wire   [0:0] qb_assign_2_fu_849_p2;
wire   [7:0] tmp_14_fu_853_p1;
wire  signed [7:0] tmp_9_fu_846_p1;
wire   [7:0] tmp1_fu_857_p2;
wire   [0:0] qb_assign_2_1_fu_872_p2;
wire   [7:0] tmp_41_1_fu_876_p1;
wire  signed [7:0] tmp_16_fu_869_p1;
wire   [7:0] tmp2_fu_880_p2;
wire   [0:0] qb_assign_2_2_fu_892_p2;
wire   [7:0] tmp_41_2_fu_896_p1;
wire   [7:0] tmp3_fu_900_p2;
wire   [0:0] qb_assign_2_3_fu_914_p2;
wire   [7:0] tmp_41_3_fu_918_p1;
wire  signed [7:0] tmp_27_fu_911_p1;
wire   [7:0] tmp4_fu_922_p2;
wire   [7:0] tmp_32_fu_954_p66;
wire   [7:0] tmp_33_fu_1093_p66;
wire   [7:0] tmp_34_fu_1232_p66;
wire   [7:0] tmp_35_fu_1371_p66;
wire    ap_CS_fsm_state7;
reg   [2:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;

// power-on initialization
initial begin
#0 start_once_reg = 1'b0;
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 3'd1;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
end

Conv1DMac_new_1_wibs #(
    .DataWidth( 6 ),
    .AddressRange( 16384 ),
    .AddressWidth( 14 ))
weights21_m_weights_3_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(weights21_m_weights_3_address0),
    .ce0(weights21_m_weights_3_ce0),
    .q0(weights21_m_weights_3_q0)
);

Conv1DMac_new_1_wjbC #(
    .DataWidth( 6 ),
    .AddressRange( 16384 ),
    .AddressWidth( 14 ))
weights21_m_weights_2_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(weights21_m_weights_2_address0),
    .ce0(weights21_m_weights_2_ce0),
    .q0(weights21_m_weights_2_q0)
);

Conv1DMac_new_1_wkbM #(
    .DataWidth( 7 ),
    .AddressRange( 16384 ),
    .AddressWidth( 14 ))
weights21_m_weights_1_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(weights21_m_weights_1_address0),
    .ce0(weights21_m_weights_1_ce0),
    .q0(weights21_m_weights_1_q0)
);

Conv1DMac_new_1_wlbW #(
    .DataWidth( 6 ),
    .AddressRange( 16384 ),
    .AddressWidth( 14 ))
weights21_m_weights_s_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(weights21_m_weights_s_address0),
    .ce0(weights21_m_weights_s_ce0),
    .q0(weights21_m_weights_s_q0)
);

computeS4_1_mux_6g8j_x #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 8 ),
    .din3_WIDTH( 8 ),
    .din4_WIDTH( 8 ),
    .din5_WIDTH( 8 ),
    .din6_WIDTH( 8 ),
    .din7_WIDTH( 8 ),
    .din8_WIDTH( 8 ),
    .din9_WIDTH( 8 ),
    .din10_WIDTH( 8 ),
    .din11_WIDTH( 8 ),
    .din12_WIDTH( 8 ),
    .din13_WIDTH( 8 ),
    .din14_WIDTH( 8 ),
    .din15_WIDTH( 8 ),
    .din16_WIDTH( 8 ),
    .din17_WIDTH( 8 ),
    .din18_WIDTH( 8 ),
    .din19_WIDTH( 8 ),
    .din20_WIDTH( 8 ),
    .din21_WIDTH( 8 ),
    .din22_WIDTH( 8 ),
    .din23_WIDTH( 8 ),
    .din24_WIDTH( 8 ),
    .din25_WIDTH( 8 ),
    .din26_WIDTH( 8 ),
    .din27_WIDTH( 8 ),
    .din28_WIDTH( 8 ),
    .din29_WIDTH( 8 ),
    .din30_WIDTH( 8 ),
    .din31_WIDTH( 8 ),
    .din32_WIDTH( 8 ),
    .din33_WIDTH( 8 ),
    .din34_WIDTH( 8 ),
    .din35_WIDTH( 8 ),
    .din36_WIDTH( 8 ),
    .din37_WIDTH( 8 ),
    .din38_WIDTH( 8 ),
    .din39_WIDTH( 8 ),
    .din40_WIDTH( 8 ),
    .din41_WIDTH( 8 ),
    .din42_WIDTH( 8 ),
    .din43_WIDTH( 8 ),
    .din44_WIDTH( 8 ),
    .din45_WIDTH( 8 ),
    .din46_WIDTH( 8 ),
    .din47_WIDTH( 8 ),
    .din48_WIDTH( 8 ),
    .din49_WIDTH( 8 ),
    .din50_WIDTH( 8 ),
    .din51_WIDTH( 8 ),
    .din52_WIDTH( 8 ),
    .din53_WIDTH( 8 ),
    .din54_WIDTH( 8 ),
    .din55_WIDTH( 8 ),
    .din56_WIDTH( 8 ),
    .din57_WIDTH( 8 ),
    .din58_WIDTH( 8 ),
    .din59_WIDTH( 8 ),
    .din60_WIDTH( 8 ),
    .din61_WIDTH( 8 ),
    .din62_WIDTH( 8 ),
    .din63_WIDTH( 8 ),
    .din64_WIDTH( 6 ),
    .dout_WIDTH( 8 ))
computeS4_1_mux_6g8j_x_U27(
    .din0(8'd0),
    .din1(8'd252),
    .din2(8'd8),
    .din3(8'd248),
    .din4(8'd251),
    .din5(8'd5),
    .din6(8'd244),
    .din7(8'd6),
    .din8(8'd3),
    .din9(8'd1),
    .din10(8'd255),
    .din11(8'd6),
    .din12(8'd242),
    .din13(8'd248),
    .din14(8'd13),
    .din15(8'd253),
    .din16(8'd244),
    .din17(8'd5),
    .din18(8'd1),
    .din19(8'd244),
    .din20(8'd10),
    .din21(8'd249),
    .din22(8'd9),
    .din23(8'd8),
    .din24(8'd252),
    .din25(8'd248),
    .din26(8'd0),
    .din27(8'd17),
    .din28(8'd255),
    .din29(8'd244),
    .din30(8'd6),
    .din31(8'd6),
    .din32(8'd1),
    .din33(8'd7),
    .din34(8'd245),
    .din35(8'd252),
    .din36(8'd7),
    .din37(8'd233),
    .din38(8'd6),
    .din39(8'd238),
    .din40(8'd2),
    .din41(8'd248),
    .din42(8'd1),
    .din43(8'd18),
    .din44(8'd4),
    .din45(8'd250),
    .din46(8'd252),
    .din47(8'd7),
    .din48(8'd6),
    .din49(8'd18),
    .din50(8'd255),
    .din51(8'd16),
    .din52(8'd7),
    .din53(8'd224),
    .din54(8'd254),
    .din55(8'd251),
    .din56(8'd237),
    .din57(8'd253),
    .din58(8'd2),
    .din59(8'd250),
    .din60(8'd1),
    .din61(8'd237),
    .din62(8'd243),
    .din63(8'd251),
    .din64(nm_t_mid2_reg_1556_pp0_iter2_reg),
    .dout(tmp_32_fu_954_p66)
);

computeS4_1_mux_6g8j_x #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 8 ),
    .din3_WIDTH( 8 ),
    .din4_WIDTH( 8 ),
    .din5_WIDTH( 8 ),
    .din6_WIDTH( 8 ),
    .din7_WIDTH( 8 ),
    .din8_WIDTH( 8 ),
    .din9_WIDTH( 8 ),
    .din10_WIDTH( 8 ),
    .din11_WIDTH( 8 ),
    .din12_WIDTH( 8 ),
    .din13_WIDTH( 8 ),
    .din14_WIDTH( 8 ),
    .din15_WIDTH( 8 ),
    .din16_WIDTH( 8 ),
    .din17_WIDTH( 8 ),
    .din18_WIDTH( 8 ),
    .din19_WIDTH( 8 ),
    .din20_WIDTH( 8 ),
    .din21_WIDTH( 8 ),
    .din22_WIDTH( 8 ),
    .din23_WIDTH( 8 ),
    .din24_WIDTH( 8 ),
    .din25_WIDTH( 8 ),
    .din26_WIDTH( 8 ),
    .din27_WIDTH( 8 ),
    .din28_WIDTH( 8 ),
    .din29_WIDTH( 8 ),
    .din30_WIDTH( 8 ),
    .din31_WIDTH( 8 ),
    .din32_WIDTH( 8 ),
    .din33_WIDTH( 8 ),
    .din34_WIDTH( 8 ),
    .din35_WIDTH( 8 ),
    .din36_WIDTH( 8 ),
    .din37_WIDTH( 8 ),
    .din38_WIDTH( 8 ),
    .din39_WIDTH( 8 ),
    .din40_WIDTH( 8 ),
    .din41_WIDTH( 8 ),
    .din42_WIDTH( 8 ),
    .din43_WIDTH( 8 ),
    .din44_WIDTH( 8 ),
    .din45_WIDTH( 8 ),
    .din46_WIDTH( 8 ),
    .din47_WIDTH( 8 ),
    .din48_WIDTH( 8 ),
    .din49_WIDTH( 8 ),
    .din50_WIDTH( 8 ),
    .din51_WIDTH( 8 ),
    .din52_WIDTH( 8 ),
    .din53_WIDTH( 8 ),
    .din54_WIDTH( 8 ),
    .din55_WIDTH( 8 ),
    .din56_WIDTH( 8 ),
    .din57_WIDTH( 8 ),
    .din58_WIDTH( 8 ),
    .din59_WIDTH( 8 ),
    .din60_WIDTH( 8 ),
    .din61_WIDTH( 8 ),
    .din62_WIDTH( 8 ),
    .din63_WIDTH( 8 ),
    .din64_WIDTH( 6 ),
    .dout_WIDTH( 8 ))
computeS4_1_mux_6g8j_x_U28(
    .din0(8'd3),
    .din1(8'd221),
    .din2(8'd237),
    .din3(8'd243),
    .din4(8'd3),
    .din5(8'd251),
    .din6(8'd13),
    .din7(8'd13),
    .din8(8'd206),
    .din9(8'd240),
    .din10(8'd254),
    .din11(8'd0),
    .din12(8'd255),
    .din13(8'd6),
    .din14(8'd3),
    .din15(8'd10),
    .din16(8'd14),
    .din17(8'd232),
    .din18(8'd242),
    .din19(8'd1),
    .din20(8'd249),
    .din21(8'd11),
    .din22(8'd249),
    .din23(8'd2),
    .din24(8'd0),
    .din25(8'd5),
    .din26(8'd1),
    .din27(8'd3),
    .din28(8'd255),
    .din29(8'd6),
    .din30(8'd236),
    .din31(8'd253),
    .din32(8'd228),
    .din33(8'd3),
    .din34(8'd22),
    .din35(8'd5),
    .din36(8'd2),
    .din37(8'd9),
    .din38(8'd3),
    .din39(8'd255),
    .din40(8'd253),
    .din41(8'd11),
    .din42(8'd252),
    .din43(8'd244),
    .din44(8'd244),
    .din45(8'd8),
    .din46(8'd3),
    .din47(8'd254),
    .din48(8'd254),
    .din49(8'd5),
    .din50(8'd231),
    .din51(8'd249),
    .din52(8'd254),
    .din53(8'd6),
    .din54(8'd251),
    .din55(8'd220),
    .din56(8'd249),
    .din57(8'd14),
    .din58(8'd6),
    .din59(8'd243),
    .din60(8'd246),
    .din61(8'd14),
    .din62(8'd6),
    .din63(8'd2),
    .din64(nm_t_mid2_reg_1556_pp0_iter2_reg),
    .dout(tmp_33_fu_1093_p66)
);

computeS4_1_mux_6g8j_x #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 8 ),
    .din3_WIDTH( 8 ),
    .din4_WIDTH( 8 ),
    .din5_WIDTH( 8 ),
    .din6_WIDTH( 8 ),
    .din7_WIDTH( 8 ),
    .din8_WIDTH( 8 ),
    .din9_WIDTH( 8 ),
    .din10_WIDTH( 8 ),
    .din11_WIDTH( 8 ),
    .din12_WIDTH( 8 ),
    .din13_WIDTH( 8 ),
    .din14_WIDTH( 8 ),
    .din15_WIDTH( 8 ),
    .din16_WIDTH( 8 ),
    .din17_WIDTH( 8 ),
    .din18_WIDTH( 8 ),
    .din19_WIDTH( 8 ),
    .din20_WIDTH( 8 ),
    .din21_WIDTH( 8 ),
    .din22_WIDTH( 8 ),
    .din23_WIDTH( 8 ),
    .din24_WIDTH( 8 ),
    .din25_WIDTH( 8 ),
    .din26_WIDTH( 8 ),
    .din27_WIDTH( 8 ),
    .din28_WIDTH( 8 ),
    .din29_WIDTH( 8 ),
    .din30_WIDTH( 8 ),
    .din31_WIDTH( 8 ),
    .din32_WIDTH( 8 ),
    .din33_WIDTH( 8 ),
    .din34_WIDTH( 8 ),
    .din35_WIDTH( 8 ),
    .din36_WIDTH( 8 ),
    .din37_WIDTH( 8 ),
    .din38_WIDTH( 8 ),
    .din39_WIDTH( 8 ),
    .din40_WIDTH( 8 ),
    .din41_WIDTH( 8 ),
    .din42_WIDTH( 8 ),
    .din43_WIDTH( 8 ),
    .din44_WIDTH( 8 ),
    .din45_WIDTH( 8 ),
    .din46_WIDTH( 8 ),
    .din47_WIDTH( 8 ),
    .din48_WIDTH( 8 ),
    .din49_WIDTH( 8 ),
    .din50_WIDTH( 8 ),
    .din51_WIDTH( 8 ),
    .din52_WIDTH( 8 ),
    .din53_WIDTH( 8 ),
    .din54_WIDTH( 8 ),
    .din55_WIDTH( 8 ),
    .din56_WIDTH( 8 ),
    .din57_WIDTH( 8 ),
    .din58_WIDTH( 8 ),
    .din59_WIDTH( 8 ),
    .din60_WIDTH( 8 ),
    .din61_WIDTH( 8 ),
    .din62_WIDTH( 8 ),
    .din63_WIDTH( 8 ),
    .din64_WIDTH( 6 ),
    .dout_WIDTH( 8 ))
computeS4_1_mux_6g8j_x_U29(
    .din0(8'd19),
    .din1(8'd10),
    .din2(8'd17),
    .din3(8'd251),
    .din4(8'd0),
    .din5(8'd232),
    .din6(8'd0),
    .din7(8'd225),
    .din8(8'd4),
    .din9(8'd7),
    .din10(8'd249),
    .din11(8'd254),
    .din12(8'd7),
    .din13(8'd238),
    .din14(8'd2),
    .din15(8'd16),
    .din16(8'd254),
    .din17(8'd254),
    .din18(8'd246),
    .din19(8'd252),
    .din20(8'd254),
    .din21(8'd0),
    .din22(8'd3),
    .din23(8'd254),
    .din24(8'd3),
    .din25(8'd7),
    .din26(8'd250),
    .din27(8'd246),
    .din28(8'd11),
    .din29(8'd11),
    .din30(8'd9),
    .din31(8'd255),
    .din32(8'd252),
    .din33(8'd2),
    .din34(8'd6),
    .din35(8'd7),
    .din36(8'd4),
    .din37(8'd14),
    .din38(8'd5),
    .din39(8'd248),
    .din40(8'd15),
    .din41(8'd5),
    .din42(8'd254),
    .din43(8'd254),
    .din44(8'd2),
    .din45(8'd2),
    .din46(8'd15),
    .din47(8'd3),
    .din48(8'd240),
    .din49(8'd241),
    .din50(8'd253),
    .din51(8'd245),
    .din52(8'd202),
    .din53(8'd249),
    .din54(8'd3),
    .din55(8'd1),
    .din56(8'd14),
    .din57(8'd2),
    .din58(8'd249),
    .din59(8'd3),
    .din60(8'd0),
    .din61(8'd244),
    .din62(8'd7),
    .din63(8'd255),
    .din64(nm_t_mid2_reg_1556_pp0_iter2_reg),
    .dout(tmp_34_fu_1232_p66)
);

computeS4_1_mux_6g8j_x #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 8 ),
    .din3_WIDTH( 8 ),
    .din4_WIDTH( 8 ),
    .din5_WIDTH( 8 ),
    .din6_WIDTH( 8 ),
    .din7_WIDTH( 8 ),
    .din8_WIDTH( 8 ),
    .din9_WIDTH( 8 ),
    .din10_WIDTH( 8 ),
    .din11_WIDTH( 8 ),
    .din12_WIDTH( 8 ),
    .din13_WIDTH( 8 ),
    .din14_WIDTH( 8 ),
    .din15_WIDTH( 8 ),
    .din16_WIDTH( 8 ),
    .din17_WIDTH( 8 ),
    .din18_WIDTH( 8 ),
    .din19_WIDTH( 8 ),
    .din20_WIDTH( 8 ),
    .din21_WIDTH( 8 ),
    .din22_WIDTH( 8 ),
    .din23_WIDTH( 8 ),
    .din24_WIDTH( 8 ),
    .din25_WIDTH( 8 ),
    .din26_WIDTH( 8 ),
    .din27_WIDTH( 8 ),
    .din28_WIDTH( 8 ),
    .din29_WIDTH( 8 ),
    .din30_WIDTH( 8 ),
    .din31_WIDTH( 8 ),
    .din32_WIDTH( 8 ),
    .din33_WIDTH( 8 ),
    .din34_WIDTH( 8 ),
    .din35_WIDTH( 8 ),
    .din36_WIDTH( 8 ),
    .din37_WIDTH( 8 ),
    .din38_WIDTH( 8 ),
    .din39_WIDTH( 8 ),
    .din40_WIDTH( 8 ),
    .din41_WIDTH( 8 ),
    .din42_WIDTH( 8 ),
    .din43_WIDTH( 8 ),
    .din44_WIDTH( 8 ),
    .din45_WIDTH( 8 ),
    .din46_WIDTH( 8 ),
    .din47_WIDTH( 8 ),
    .din48_WIDTH( 8 ),
    .din49_WIDTH( 8 ),
    .din50_WIDTH( 8 ),
    .din51_WIDTH( 8 ),
    .din52_WIDTH( 8 ),
    .din53_WIDTH( 8 ),
    .din54_WIDTH( 8 ),
    .din55_WIDTH( 8 ),
    .din56_WIDTH( 8 ),
    .din57_WIDTH( 8 ),
    .din58_WIDTH( 8 ),
    .din59_WIDTH( 8 ),
    .din60_WIDTH( 8 ),
    .din61_WIDTH( 8 ),
    .din62_WIDTH( 8 ),
    .din63_WIDTH( 8 ),
    .din64_WIDTH( 6 ),
    .dout_WIDTH( 8 ))
computeS4_1_mux_6g8j_x_U30(
    .din0(8'd241),
    .din1(8'd1),
    .din2(8'd241),
    .din3(8'd19),
    .din4(8'd241),
    .din5(8'd5),
    .din6(8'd4),
    .din7(8'd2),
    .din8(8'd241),
    .din9(8'd4),
    .din10(8'd2),
    .din11(8'd4),
    .din12(8'd244),
    .din13(8'd4),
    .din14(8'd13),
    .din15(8'd2),
    .din16(8'd252),
    .din17(8'd9),
    .din18(8'd238),
    .din19(8'd10),
    .din20(8'd11),
    .din21(8'd5),
    .din22(8'd240),
    .din23(8'd235),
    .din24(8'd0),
    .din25(8'd251),
    .din26(8'd4),
    .din27(8'd4),
    .din28(8'd0),
    .din29(8'd5),
    .din30(8'd252),
    .din31(8'd2),
    .din32(8'd3),
    .din33(8'd254),
    .din34(8'd2),
    .din35(8'd240),
    .din36(8'd236),
    .din37(8'd0),
    .din38(8'd240),
    .din39(8'd0),
    .din40(8'd6),
    .din41(8'd2),
    .din42(8'd16),
    .din43(8'd249),
    .din44(8'd0),
    .din45(8'd10),
    .din46(8'd2),
    .din47(8'd251),
    .din48(8'd8),
    .din49(8'd228),
    .din50(8'd1),
    .din51(8'd24),
    .din52(8'd248),
    .din53(8'd251),
    .din54(8'd5),
    .din55(8'd251),
    .din56(8'd255),
    .din57(8'd5),
    .din58(8'd242),
    .din59(8'd7),
    .din60(8'd238),
    .din61(8'd241),
    .din62(8'd3),
    .din63(8'd249),
    .din64(nm_t_mid2_reg_1556_pp0_iter2_reg),
    .dout(tmp_35_fu_1371_p66)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state7)) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state2) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state2)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state2);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter4 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((internal_ap_ready == 1'b0) & (real_start == 1'b1))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_flatten1_fu_387_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        indvar_flatten1_reg_311 <= indvar_flatten_next1_fu_393_p2;
    end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        indvar_flatten1_reg_311 <= 24'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_flatten1_fu_387_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        indvar_flatten_reg_322 <= indvar_flatten_next_fu_531_p3;
    end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        indvar_flatten_reg_322 <= 16'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_6_reg_1574_pp0_iter2_reg == 1'd0) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        macRegisters_0_V_1_fu_230 <= macRegisters_0_V_fu_863_p2;
    end else if (((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1)) | ((tmp_6_reg_1574_pp0_iter2_reg == 1'd1) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001)))) begin
        macRegisters_0_V_1_fu_230 <= 8'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_6_reg_1574_pp0_iter2_reg == 1'd0) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        macRegisters_1_V_1_fu_234 <= macRegisters_1_V_fu_886_p2;
    end else if (((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1)) | ((tmp_6_reg_1574_pp0_iter2_reg == 1'd1) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001)))) begin
        macRegisters_1_V_1_fu_234 <= 8'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_6_reg_1574_pp0_iter2_reg == 1'd0) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        macRegisters_2_V_1_fu_238 <= macRegisters_2_V_fu_906_p2;
    end else if (((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1)) | ((tmp_6_reg_1574_pp0_iter2_reg == 1'd1) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001)))) begin
        macRegisters_2_V_1_fu_238 <= 8'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_6_reg_1574_pp0_iter2_reg == 1'd0) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        macRegisters_3_V_1_fu_242 <= macRegisters_3_V_fu_928_p2;
    end else if (((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1)) | ((tmp_6_reg_1574_pp0_iter2_reg == 1'd1) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001)))) begin
        macRegisters_3_V_1_fu_242 <= 8'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_flatten1_fu_387_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        nm_reg_333 <= nm_mid2_fu_495_p3;
    end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        nm_reg_333 <= 7'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_flatten1_fu_387_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        sf_reg_344 <= sf_1_fu_519_p2;
    end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        sf_reg_344 <= 9'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        exitcond_flatten1_reg_1547 <= exitcond_flatten1_fu_387_p2;
        exitcond_flatten1_reg_1547_pp0_iter1_reg <= exitcond_flatten1_reg_1547;
        nm_t_mid2_reg_1556_pp0_iter1_reg <= nm_t_mid2_reg_1556;
        tmp_6_reg_1574_pp0_iter1_reg <= tmp_6_reg_1574;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_flatten1_fu_387_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        nm_t_mid2_reg_1556 <= nm_t_mid2_fu_487_p3;
        tmp_4_reg_1569 <= tmp_4_fu_507_p2;
        tmp_6_reg_1574 <= tmp_6_fu_513_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        nm_t_mid2_reg_1556_pp0_iter2_reg <= nm_t_mid2_reg_1556_pp0_iter1_reg;
        tmp_6_reg_1574_pp0_iter2_reg <= tmp_6_reg_1574_pp0_iter1_reg;
        tmp_6_reg_1574_pp0_iter3_reg <= tmp_6_reg_1574_pp0_iter2_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_6_reg_1574_pp0_iter2_reg == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        p_Val2_2_1_reg_1673 <= p_Val2_2_1_fu_1226_p2;
        p_Val2_2_2_reg_1678 <= p_Val2_2_2_fu_1365_p2;
        p_Val2_2_3_reg_1683 <= p_Val2_2_3_fu_1504_p2;
        p_Val2_2_reg_1668 <= p_Val2_2_fu_1087_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_flatten1_reg_1547_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        tmp_13_reg_1618 <= tmp_13_fu_618_p2;
        tmp_15_reg_1623 <= {{p_Val2_s_56_fu_628_p2[13:7]}};
        tmp_21_reg_1638 <= {{p_Val2_5_fu_698_p2[14:7]}};
        tmp_23_reg_1613 <= p_Val2_s_fu_558_p2[32'd6];
        tmp_26_reg_1653 <= {{p_Val2_3_fu_768_p2[13:7]}};
        tmp_38_reg_1628 <= p_Val2_s_56_fu_628_p2[32'd6];
        tmp_40_1_reg_1633 <= tmp_40_1_fu_688_p2;
        tmp_40_2_reg_1648 <= tmp_40_2_fu_758_p2;
        tmp_40_3_reg_1663 <= tmp_40_3_fu_828_p2;
        tmp_41_reg_1643 <= p_Val2_5_fu_698_p2[32'd6];
        tmp_44_reg_1658 <= p_Val2_3_fu_768_p2[32'd6];
        tmp_8_reg_1608 <= {{p_Val2_s_fu_558_p2[13:7]}};
    end
end

always @ (*) begin
    if ((exitcond_flatten1_fu_387_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((real_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond_flatten1_reg_1547_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        in_V_V_blk_n = in_V_V_empty_n;
    end else begin
        in_V_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((exitcond_flatten1_reg_1547_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        in_V_V_read = 1'b1;
    end else begin
        in_V_V_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        internal_ap_ready = 1'b1;
    end else begin
        internal_ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_6_reg_1574_pp0_iter3_reg == 1'd1) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        out_V_V_blk_n = out_V_V_full_n;
    end else begin
        out_V_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((tmp_6_reg_1574_pp0_iter3_reg == 1'd1) & (ap_enable_reg_pp0_iter4 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        out_V_V_write = 1'b1;
    end else begin
        out_V_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (start_full_n == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (real_start == 1'b1))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        weights21_m_weights_1_ce0 = 1'b1;
    end else begin
        weights21_m_weights_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        weights21_m_weights_2_ce0 = 1'b1;
    end else begin
        weights21_m_weights_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        weights21_m_weights_3_ce0 = 1'b1;
    end else begin
        weights21_m_weights_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        weights21_m_weights_s_ce0 = 1'b1;
    end else begin
        weights21_m_weights_s_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((exitcond_flatten1_fu_387_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1)) & ~((ap_enable_reg_pp0_iter3 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter4 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((ap_enable_reg_pp0_iter3 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter4 == 1'b1)) | ((exitcond_flatten1_fu_387_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd2];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = (((tmp_6_reg_1574_pp0_iter3_reg == 1'd1) & (out_V_V_full_n == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b1)) | ((exitcond_flatten1_reg_1547_pp0_iter1_reg == 1'd0) & (in_V_V_empty_n == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((tmp_6_reg_1574_pp0_iter3_reg == 1'd1) & (out_V_V_full_n == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b1)) | ((exitcond_flatten1_reg_1547_pp0_iter1_reg == 1'd0) & (in_V_V_empty_n == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((tmp_6_reg_1574_pp0_iter3_reg == 1'd1) & (out_V_V_full_n == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b1)) | ((exitcond_flatten1_reg_1547_pp0_iter1_reg == 1'd0) & (in_V_V_empty_n == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1)));
end

always @ (*) begin
    ap_block_state1 = ((real_start == 1'b0) | (ap_done_reg == 1'b1));
end

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state4_pp0_stage0_iter2 = ((exitcond_flatten1_reg_1547_pp0_iter1_reg == 1'd0) & (in_V_V_empty_n == 1'b0));
end

assign ap_block_state5_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state6_pp0_stage0_iter4 = ((tmp_6_reg_1574_pp0_iter3_reg == 1'd1) & (out_V_V_full_n == 1'b0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_ready = internal_ap_ready;

assign exitcond_flatten1_fu_387_p2 = ((indvar_flatten1_reg_311 == 24'd8388608) ? 1'b1 : 1'b0);

assign exitcond_flatten_fu_399_p2 = ((indvar_flatten_reg_322 == 16'd16384) ? 1'b1 : 1'b0);

assign indvar_flatten_next1_fu_393_p2 = (24'd1 + indvar_flatten1_reg_311);

assign indvar_flatten_next_fu_531_p3 = ((exitcond_flatten_fu_399_p2[0:0] === 1'b1) ? 16'd1 : indvar_flatten_op_fu_525_p2);

assign indvar_flatten_op_fu_525_p2 = (indvar_flatten_reg_322 + 16'd1);

assign macRegisters_0_V_fu_863_p2 = ($signed(tmp_9_fu_846_p1) + $signed(tmp1_fu_857_p2));

assign macRegisters_1_V_fu_886_p2 = ($signed(tmp_16_fu_869_p1) + $signed(tmp2_fu_880_p2));

assign macRegisters_2_V_fu_906_p2 = (tmp_21_reg_1638 + tmp3_fu_900_p2);

assign macRegisters_3_V_fu_928_p2 = ($signed(tmp_27_fu_911_p1) + $signed(tmp4_fu_922_p2));

assign nm_1_fu_447_p2 = (7'd1 + nm_mid_fu_405_p3);

assign nm_mid2_fu_495_p3 = ((tmp_3_mid_fu_441_p2[0:0] === 1'b1) ? nm_1_fu_447_p2 : nm_mid_fu_405_p3);

assign nm_mid_fu_405_p3 = ((exitcond_flatten_fu_399_p2[0:0] === 1'b1) ? 7'd0 : nm_reg_333);

assign nm_t_mid2_fu_487_p3 = ((tmp_3_mid_fu_441_p2[0:0] === 1'b1) ? tmp_10_fu_467_p1 : nm_t_mid_fu_421_p3);

assign nm_t_mid_fu_421_p3 = ((exitcond_flatten_fu_399_p2[0:0] === 1'b1) ? 6'd0 : tmp_fu_375_p1);

assign not_exitcond_flatten_fu_429_p2 = (exitcond_flatten_fu_399_p2 ^ 1'd1);

assign out_V_V_din = {{{{p_Val2_2_3_reg_1683}, {p_Val2_2_2_reg_1678}}, {p_Val2_2_1_reg_1673}}, {p_Val2_2_reg_1668}};

assign p_08_cast_cast_fu_550_p0 = in_V_V_dout;

assign p_08_cast_cast_fu_550_p1 = p_08_cast_cast_fu_550_p0;

assign p_08_cast_fu_546_p0 = in_V_V_dout;

assign p_Val2_2_1_fu_1226_p2 = (macRegisters_1_V_fu_886_p2 + tmp_33_fu_1093_p66);

assign p_Val2_2_2_fu_1365_p2 = (macRegisters_2_V_fu_906_p2 + tmp_34_fu_1232_p66);

assign p_Val2_2_3_fu_1504_p2 = (macRegisters_3_V_fu_928_p2 + tmp_35_fu_1371_p66);

assign p_Val2_2_fu_1087_p2 = (macRegisters_0_V_fu_863_p2 + tmp_32_fu_954_p66);

assign p_Val2_3_fu_768_p0 = weights21_m_weights_s_q0;

assign p_Val2_3_fu_768_p1 = p_08_cast_cast_fu_550_p1;

assign p_Val2_3_fu_768_p2 = ($signed(p_Val2_3_fu_768_p0) * $signed(p_Val2_3_fu_768_p1));

assign p_Val2_5_fu_698_p0 = weights21_m_weights_1_q0;

assign p_Val2_5_fu_698_p1 = p_08_cast_fu_546_p0;

assign p_Val2_5_fu_698_p2 = ($signed(p_Val2_5_fu_698_p0) * $signed(p_Val2_5_fu_698_p1));

assign p_Val2_s_56_fu_628_p0 = weights21_m_weights_2_q0;

assign p_Val2_s_56_fu_628_p1 = p_08_cast_cast_fu_550_p1;

assign p_Val2_s_56_fu_628_p2 = ($signed(p_Val2_s_56_fu_628_p0) * $signed(p_Val2_s_56_fu_628_p1));

assign p_Val2_s_fu_558_p0 = weights21_m_weights_3_q0;

assign p_Val2_s_fu_558_p1 = p_08_cast_cast_fu_550_p1;

assign p_Val2_s_fu_558_p2 = ($signed(p_Val2_s_fu_558_p0) * $signed(p_Val2_s_fu_558_p1));

assign qb_assign_2_1_fu_872_p2 = (tmp_40_1_reg_1633 & tmp_38_reg_1628);

assign qb_assign_2_2_fu_892_p2 = (tmp_41_reg_1643 & tmp_40_2_reg_1648);

assign qb_assign_2_3_fu_914_p2 = (tmp_44_reg_1658 & tmp_40_3_reg_1663);

assign qb_assign_2_fu_849_p2 = (tmp_23_reg_1613 & tmp_13_reg_1618);

assign sf_1_fu_519_p2 = (sf_mid2_fu_459_p3 + 9'd1);

assign sf_cast_fu_503_p1 = sf_mid2_fu_459_p3;

assign sf_mid2_fu_459_p3 = ((tmp_1_fu_453_p2[0:0] === 1'b1) ? 9'd0 : sf_reg_344);

assign start_out = real_start;

assign tmp1_fu_857_p2 = (tmp_14_fu_853_p1 + macRegisters_0_V_1_fu_230);

assign tmp2_fu_880_p2 = (tmp_41_1_fu_876_p1 + macRegisters_1_V_1_fu_234);

assign tmp3_fu_900_p2 = (tmp_41_2_fu_896_p1 + macRegisters_2_V_1_fu_238);

assign tmp4_fu_922_p2 = (tmp_41_3_fu_918_p1 + macRegisters_3_V_1_fu_242);

assign tmp_10_fu_467_p1 = nm_1_fu_447_p2[5:0];

assign tmp_11_fu_600_p4 = {{p_Val2_s_fu_558_p2[5:1]}};

assign tmp_12_fu_610_p3 = {{tmp_11_fu_600_p4}, {tmp_7_fu_594_p2}};

assign tmp_13_fu_618_p2 = ((tmp_12_fu_610_p3 != 6'd0) ? 1'b1 : 1'b0);

assign tmp_14_fu_853_p1 = qb_assign_2_fu_849_p2;

assign tmp_16_fu_869_p1 = $signed(tmp_15_reg_1623);

assign tmp_17_fu_664_p2 = (tmp_39_fu_660_p1 | tmp_37_fu_634_p3);

assign tmp_18_fu_564_p3 = p_Val2_s_fu_558_p2[32'd13];

assign tmp_19_fu_670_p4 = {{p_Val2_s_56_fu_628_p2[5:1]}};

assign tmp_1_fu_453_p2 = (tmp_3_mid_fu_441_p2 | exitcond_flatten_fu_399_p2);

assign tmp_20_fu_680_p3 = {{tmp_19_fu_670_p4}, {tmp_17_fu_664_p2}};

assign tmp_22_fu_734_p2 = (tmp_42_fu_730_p1 | tmp_40_fu_704_p3);

assign tmp_24_fu_740_p4 = {{p_Val2_5_fu_698_p2[5:1]}};

assign tmp_25_fu_750_p3 = {{tmp_24_fu_740_p4}, {tmp_22_fu_734_p2}};

assign tmp_27_fu_911_p1 = $signed(tmp_26_reg_1653);

assign tmp_28_fu_804_p2 = (tmp_45_fu_800_p1 | tmp_43_fu_774_p3);

assign tmp_29_fu_590_p1 = p_Val2_s_fu_558_p2[0:0];

assign tmp_2_fu_379_p3 = {{tmp_fu_375_p1}, {8'd0}};

assign tmp_2_mid1_fu_471_p3 = {{tmp_10_fu_467_p1}, {8'd0}};

assign tmp_2_mid2_fu_479_p3 = ((tmp_3_mid_fu_441_p2[0:0] === 1'b1) ? tmp_2_mid1_fu_471_p3 : tmp_2_mid_fu_413_p3);

assign tmp_2_mid_fu_413_p3 = ((exitcond_flatten_fu_399_p2[0:0] === 1'b1) ? 14'd0 : tmp_2_fu_379_p3);

assign tmp_30_fu_810_p4 = {{p_Val2_3_fu_768_p2[5:1]}};

assign tmp_31_fu_820_p3 = {{tmp_30_fu_810_p4}, {tmp_28_fu_804_p2}};

assign tmp_37_fu_634_p3 = p_Val2_s_56_fu_628_p2[32'd13];

assign tmp_39_fu_660_p1 = p_Val2_s_56_fu_628_p2[0:0];

assign tmp_3_fu_435_p2 = ((sf_reg_344 == 9'd256) ? 1'b1 : 1'b0);

assign tmp_3_mid_fu_441_p2 = (tmp_3_fu_435_p2 & not_exitcond_flatten_fu_429_p2);

assign tmp_40_1_fu_688_p2 = ((tmp_20_fu_680_p3 != 6'd0) ? 1'b1 : 1'b0);

assign tmp_40_2_fu_758_p2 = ((tmp_25_fu_750_p3 != 6'd0) ? 1'b1 : 1'b0);

assign tmp_40_3_fu_828_p2 = ((tmp_31_fu_820_p3 != 6'd0) ? 1'b1 : 1'b0);

assign tmp_40_fu_704_p3 = p_Val2_5_fu_698_p2[32'd14];

assign tmp_41_1_fu_876_p1 = qb_assign_2_1_fu_872_p2;

assign tmp_41_2_fu_896_p1 = qb_assign_2_2_fu_892_p2;

assign tmp_41_3_fu_918_p1 = qb_assign_2_3_fu_914_p2;

assign tmp_42_fu_730_p1 = p_Val2_5_fu_698_p2[0:0];

assign tmp_43_fu_774_p3 = p_Val2_3_fu_768_p2[32'd13];

assign tmp_45_fu_800_p1 = p_Val2_3_fu_768_p2[0:0];

assign tmp_4_fu_507_p2 = (sf_cast_fu_503_p1 + tmp_2_mid2_fu_479_p3);

assign tmp_5_fu_539_p1 = tmp_4_reg_1569;

assign tmp_6_fu_513_p2 = ((sf_mid2_fu_459_p3 == 9'd255) ? 1'b1 : 1'b0);

assign tmp_7_fu_594_p2 = (tmp_29_fu_590_p1 | tmp_18_fu_564_p3);

assign tmp_9_fu_846_p1 = $signed(tmp_8_reg_1608);

assign tmp_fu_375_p1 = nm_reg_333[5:0];

assign weights21_m_weights_1_address0 = tmp_5_fu_539_p1;

assign weights21_m_weights_2_address0 = tmp_5_fu_539_p1;

assign weights21_m_weights_3_address0 = tmp_5_fu_539_p1;

assign weights21_m_weights_s_address0 = tmp_5_fu_539_p1;

endmodule //Conv1DMac_new_1
