// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module Conv1DMac_new_1 (
        ap_clk,
        ap_rst,
        ap_start,
        start_full_n,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        start_out,
        start_write,
        in_V_V_dout,
        in_V_V_empty_n,
        in_V_V_read,
        out_V_V_din,
        out_V_V_full_n,
        out_V_V_write
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_pp0_stage0 = 3'd2;
parameter    ap_ST_fsm_state7 = 3'd4;

input   ap_clk;
input   ap_rst;
input   ap_start;
input   start_full_n;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output   start_out;
output   start_write;
input  [7:0] in_V_V_dout;
input   in_V_V_empty_n;
output   in_V_V_read;
output  [31:0] out_V_V_din;
input   out_V_V_full_n;
output   out_V_V_write;

reg ap_done;
reg ap_idle;
reg start_write;
reg in_V_V_read;
reg out_V_V_write;

reg    real_start;
reg    start_once_reg;
reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    internal_ap_ready;
wire   [13:0] weights15_m_weights_3_address0;
reg    weights15_m_weights_3_ce0;
wire   [5:0] weights15_m_weights_3_q0;
wire   [13:0] weights15_m_weights_2_address0;
reg    weights15_m_weights_2_ce0;
wire   [6:0] weights15_m_weights_2_q0;
wire   [13:0] weights15_m_weights_1_address0;
reg    weights15_m_weights_1_ce0;
wire   [5:0] weights15_m_weights_1_q0;
wire   [13:0] weights15_m_weights_s_address0;
reg    weights15_m_weights_s_ce0;
wire   [5:0] weights15_m_weights_s_q0;
reg    in_V_V_blk_n;
reg    ap_enable_reg_pp0_iter2;
wire    ap_block_pp0_stage0;
reg   [0:0] exitcond_flatten_reg_1527;
reg   [0:0] exitcond_flatten_reg_1527_pp0_iter1_reg;
reg    out_V_V_blk_n;
reg    ap_enable_reg_pp0_iter4;
reg   [0:0] tmp_249_reg_1554;
reg   [0:0] tmp_249_reg_1554_pp0_iter3_reg;
reg   [24:0] indvar_flatten3_reg_291;
reg   [15:0] indvar_flatten_reg_302;
reg   [6:0] nm_reg_313;
reg   [8:0] sf_reg_324;
wire   [0:0] exitcond_flatten_fu_367_p2;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_block_state2_pp0_stage0_iter0;
wire    ap_block_state3_pp0_stage0_iter1;
reg    ap_block_state4_pp0_stage0_iter2;
wire    ap_block_state5_pp0_stage0_iter3;
reg    ap_block_state6_pp0_stage0_iter4;
reg    ap_block_pp0_stage0_11001;
wire   [24:0] indvar_flatten_next1_fu_373_p2;
reg    ap_enable_reg_pp0_iter0;
wire   [5:0] nm_t_mid2_fu_467_p3;
reg   [5:0] nm_t_mid2_reg_1536;
reg   [5:0] nm_t_mid2_reg_1536_pp0_iter1_reg;
reg   [5:0] nm_t_mid2_reg_1536_pp0_iter2_reg;
wire   [6:0] nm_mid2_fu_475_p3;
wire   [13:0] tmp_229_fu_487_p2;
reg   [13:0] tmp_229_reg_1549;
wire   [0:0] tmp_249_fu_493_p2;
reg   [0:0] tmp_249_reg_1554_pp0_iter1_reg;
reg   [0:0] tmp_249_reg_1554_pp0_iter2_reg;
wire   [8:0] sf_2_fu_499_p2;
wire   [15:0] indvar_flatten_next_fu_511_p3;
reg   [6:0] tmp_164_reg_1588;
reg   [0:0] tmp_1011_reg_1593;
wire   [0:0] tmp_235_fu_598_p2;
reg   [0:0] tmp_235_reg_1598;
reg   [7:0] tmp_167_reg_1603;
reg   [0:0] tmp_1014_reg_1608;
wire   [0:0] tmp_279_1_fu_668_p2;
reg   [0:0] tmp_279_1_reg_1613;
reg   [6:0] tmp_169_reg_1618;
reg   [0:0] tmp_1017_reg_1623;
wire   [0:0] tmp_279_2_fu_738_p2;
reg   [0:0] tmp_279_2_reg_1628;
reg   [6:0] tmp_172_reg_1633;
reg   [0:0] tmp_1020_reg_1638;
wire   [0:0] tmp_279_3_fu_808_p2;
reg   [0:0] tmp_279_3_reg_1643;
wire   [7:0] p_Val2_s_fu_1067_p2;
reg   [7:0] p_Val2_s_reg_1648;
wire   [7:0] p_Val2_23_1_fu_1206_p2;
reg   [7:0] p_Val2_23_1_reg_1653;
wire   [7:0] p_Val2_23_2_fu_1345_p2;
reg   [7:0] p_Val2_23_2_reg_1658;
wire   [7:0] p_Val2_23_3_fu_1484_p2;
reg   [7:0] p_Val2_23_3_reg_1663;
reg    ap_block_state1;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state2;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter3;
wire   [63:0] tmp_230_fu_519_p1;
reg    ap_block_pp0_stage0_01001;
reg   [7:0] macRegisters_0_V_8_fu_210;
wire   [7:0] macRegisters_0_V_fu_843_p2;
reg   [7:0] macRegisters_1_V_8_fu_214;
wire   [7:0] macRegisters_1_V_fu_863_p2;
reg   [7:0] macRegisters_2_V_8_fu_218;
wire   [7:0] macRegisters_2_V_fu_885_p2;
reg   [7:0] macRegisters_3_V_8_fu_222;
wire   [7:0] macRegisters_3_V_fu_908_p2;
wire   [5:0] tmp_fu_355_p1;
wire   [0:0] exitcond_flatten3_fu_379_p2;
wire   [13:0] tmp_s_fu_359_p3;
wire   [0:0] tmp_888_fu_415_p2;
wire   [0:0] not_exitcond_flatten_fu_409_p2;
wire   [6:0] nm_mid_fu_385_p3;
wire   [0:0] tmp_259_mid_fu_421_p2;
wire   [0:0] tmp_865_fu_433_p2;
wire   [6:0] nm_2_fu_427_p2;
wire   [5:0] tmp_1009_fu_447_p1;
wire   [13:0] tmp_258_mid1_fu_451_p3;
wire   [13:0] tmp_258_mid_fu_393_p3;
wire   [5:0] nm_t_mid_fu_401_p3;
wire   [8:0] sf_mid2_fu_439_p3;
wire   [13:0] sf_cast1_fu_483_p1;
wire   [13:0] tmp_258_mid2_fu_459_p3;
wire   [15:0] indvar_flatten_op_fu_505_p2;
wire  signed [7:0] p_08_cast4_fu_526_p0;
wire  signed [7:0] p_08_cast4_cast_fu_530_p0;
wire  signed [5:0] p_Val2_s_187_fu_538_p0;
wire  signed [7:0] p_Val2_s_187_fu_538_p1;
wire  signed [13:0] p_08_cast4_cast_fu_530_p1;
wire   [13:0] p_Val2_s_187_fu_538_p2;
wire   [0:0] tmp_1012_fu_570_p1;
wire   [0:0] tmp_1010_fu_544_p3;
wire   [4:0] tmp_233_fu_580_p4;
wire   [0:0] tmp_232_fu_574_p2;
wire   [5:0] tmp_234_fu_590_p3;
wire  signed [6:0] p_Val2_1_fu_608_p0;
wire  signed [7:0] p_Val2_1_fu_608_p1;
wire   [14:0] p_Val2_1_fu_608_p2;
wire   [0:0] tmp_1015_fu_640_p1;
wire   [0:0] tmp_1013_fu_614_p3;
wire   [4:0] tmp_239_fu_650_p4;
wire   [0:0] tmp_238_fu_644_p2;
wire   [5:0] tmp_240_fu_660_p3;
wire  signed [5:0] p_Val2_2_fu_678_p0;
wire  signed [7:0] p_Val2_2_fu_678_p1;
wire   [13:0] p_Val2_2_fu_678_p2;
wire   [0:0] tmp_1018_fu_710_p1;
wire   [0:0] tmp_1016_fu_684_p3;
wire   [4:0] tmp_243_fu_720_p4;
wire   [0:0] tmp_242_fu_714_p2;
wire   [5:0] tmp_244_fu_730_p3;
wire  signed [5:0] p_Val2_3_fu_748_p0;
wire  signed [7:0] p_Val2_3_fu_748_p1;
wire   [13:0] p_Val2_3_fu_748_p2;
wire   [0:0] tmp_1021_fu_780_p1;
wire   [0:0] tmp_1019_fu_754_p3;
wire   [4:0] tmp_247_fu_790_p4;
wire   [0:0] tmp_246_fu_784_p2;
wire   [5:0] tmp_248_fu_800_p3;
wire   [0:0] qb_assign_2_fu_829_p2;
wire   [7:0] tmp_236_fu_833_p1;
wire  signed [7:0] tmp_165_fu_826_p1;
wire   [7:0] tmp1_fu_837_p2;
wire   [0:0] qb_assign_2_1_fu_849_p2;
wire   [7:0] tmp_280_1_fu_853_p1;
wire   [7:0] tmp2_fu_857_p2;
wire   [0:0] qb_assign_2_2_fu_871_p2;
wire   [7:0] tmp_280_2_fu_875_p1;
wire  signed [7:0] tmp_170_fu_868_p1;
wire   [7:0] tmp3_fu_879_p2;
wire   [0:0] qb_assign_2_3_fu_894_p2;
wire   [7:0] tmp_280_3_fu_898_p1;
wire  signed [7:0] tmp_173_fu_891_p1;
wire   [7:0] tmp4_fu_902_p2;
wire   [7:0] tmp_174_fu_934_p66;
wire   [7:0] tmp_175_fu_1073_p66;
wire   [7:0] tmp_176_fu_1212_p66;
wire   [7:0] tmp_177_fu_1351_p66;
wire    ap_CS_fsm_state7;
reg   [2:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;

// power-on initialization
initial begin
#0 start_once_reg = 1'b0;
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 3'd1;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
end

Conv1DMac_new_1_wPgM #(
    .DataWidth( 6 ),
    .AddressRange( 16384 ),
    .AddressWidth( 14 ))
weights15_m_weights_3_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(weights15_m_weights_3_address0),
    .ce0(weights15_m_weights_3_ce0),
    .q0(weights15_m_weights_3_q0)
);

Conv1DMac_new_1_wQgW #(
    .DataWidth( 7 ),
    .AddressRange( 16384 ),
    .AddressWidth( 14 ))
weights15_m_weights_2_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(weights15_m_weights_2_address0),
    .ce0(weights15_m_weights_2_ce0),
    .q0(weights15_m_weights_2_q0)
);

Conv1DMac_new_1_wRg6 #(
    .DataWidth( 6 ),
    .AddressRange( 16384 ),
    .AddressWidth( 14 ))
weights15_m_weights_1_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(weights15_m_weights_1_address0),
    .ce0(weights15_m_weights_1_ce0),
    .q0(weights15_m_weights_1_q0)
);

Conv1DMac_new_1_wShg #(
    .DataWidth( 6 ),
    .AddressRange( 16384 ),
    .AddressWidth( 14 ))
weights15_m_weights_s_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(weights15_m_weights_s_address0),
    .ce0(weights15_m_weights_s_ce0),
    .q0(weights15_m_weights_s_q0)
);

computeS3_mux_646yd2_x_x_x_x #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 8 ),
    .din3_WIDTH( 8 ),
    .din4_WIDTH( 8 ),
    .din5_WIDTH( 8 ),
    .din6_WIDTH( 8 ),
    .din7_WIDTH( 8 ),
    .din8_WIDTH( 8 ),
    .din9_WIDTH( 8 ),
    .din10_WIDTH( 8 ),
    .din11_WIDTH( 8 ),
    .din12_WIDTH( 8 ),
    .din13_WIDTH( 8 ),
    .din14_WIDTH( 8 ),
    .din15_WIDTH( 8 ),
    .din16_WIDTH( 8 ),
    .din17_WIDTH( 8 ),
    .din18_WIDTH( 8 ),
    .din19_WIDTH( 8 ),
    .din20_WIDTH( 8 ),
    .din21_WIDTH( 8 ),
    .din22_WIDTH( 8 ),
    .din23_WIDTH( 8 ),
    .din24_WIDTH( 8 ),
    .din25_WIDTH( 8 ),
    .din26_WIDTH( 8 ),
    .din27_WIDTH( 8 ),
    .din28_WIDTH( 8 ),
    .din29_WIDTH( 8 ),
    .din30_WIDTH( 8 ),
    .din31_WIDTH( 8 ),
    .din32_WIDTH( 8 ),
    .din33_WIDTH( 8 ),
    .din34_WIDTH( 8 ),
    .din35_WIDTH( 8 ),
    .din36_WIDTH( 8 ),
    .din37_WIDTH( 8 ),
    .din38_WIDTH( 8 ),
    .din39_WIDTH( 8 ),
    .din40_WIDTH( 8 ),
    .din41_WIDTH( 8 ),
    .din42_WIDTH( 8 ),
    .din43_WIDTH( 8 ),
    .din44_WIDTH( 8 ),
    .din45_WIDTH( 8 ),
    .din46_WIDTH( 8 ),
    .din47_WIDTH( 8 ),
    .din48_WIDTH( 8 ),
    .din49_WIDTH( 8 ),
    .din50_WIDTH( 8 ),
    .din51_WIDTH( 8 ),
    .din52_WIDTH( 8 ),
    .din53_WIDTH( 8 ),
    .din54_WIDTH( 8 ),
    .din55_WIDTH( 8 ),
    .din56_WIDTH( 8 ),
    .din57_WIDTH( 8 ),
    .din58_WIDTH( 8 ),
    .din59_WIDTH( 8 ),
    .din60_WIDTH( 8 ),
    .din61_WIDTH( 8 ),
    .din62_WIDTH( 8 ),
    .din63_WIDTH( 8 ),
    .din64_WIDTH( 6 ),
    .dout_WIDTH( 8 ))
computeS3_mux_646yd2_x_x_x_x_U107(
    .din0(8'd0),
    .din1(8'd8),
    .din2(8'd0),
    .din3(8'd0),
    .din4(8'd0),
    .din5(8'd0),
    .din6(8'd249),
    .din7(8'd0),
    .din8(8'd0),
    .din9(8'd0),
    .din10(8'd251),
    .din11(8'd0),
    .din12(8'd0),
    .din13(8'd0),
    .din14(8'd0),
    .din15(8'd0),
    .din16(8'd0),
    .din17(8'd0),
    .din18(8'd0),
    .din19(8'd0),
    .din20(8'd0),
    .din21(8'd0),
    .din22(8'd0),
    .din23(8'd0),
    .din24(8'd0),
    .din25(8'd0),
    .din26(8'd0),
    .din27(8'd0),
    .din28(8'd0),
    .din29(8'd23),
    .din30(8'd16),
    .din31(8'd0),
    .din32(8'd0),
    .din33(8'd0),
    .din34(8'd254),
    .din35(8'd15),
    .din36(8'd0),
    .din37(8'd4),
    .din38(8'd0),
    .din39(8'd248),
    .din40(8'd240),
    .din41(8'd43),
    .din42(8'd0),
    .din43(8'd0),
    .din44(8'd0),
    .din45(8'd0),
    .din46(8'd0),
    .din47(8'd9),
    .din48(8'd0),
    .din49(8'd0),
    .din50(8'd254),
    .din51(8'd0),
    .din52(8'd255),
    .din53(8'd30),
    .din54(8'd0),
    .din55(8'd0),
    .din56(8'd0),
    .din57(8'd0),
    .din58(8'd1),
    .din59(8'd6),
    .din60(8'd0),
    .din61(8'd253),
    .din62(8'd0),
    .din63(8'd0),
    .din64(nm_t_mid2_reg_1536_pp0_iter2_reg),
    .dout(tmp_174_fu_934_p66)
);

computeS3_mux_646yd2_x_x_x_x #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 8 ),
    .din3_WIDTH( 8 ),
    .din4_WIDTH( 8 ),
    .din5_WIDTH( 8 ),
    .din6_WIDTH( 8 ),
    .din7_WIDTH( 8 ),
    .din8_WIDTH( 8 ),
    .din9_WIDTH( 8 ),
    .din10_WIDTH( 8 ),
    .din11_WIDTH( 8 ),
    .din12_WIDTH( 8 ),
    .din13_WIDTH( 8 ),
    .din14_WIDTH( 8 ),
    .din15_WIDTH( 8 ),
    .din16_WIDTH( 8 ),
    .din17_WIDTH( 8 ),
    .din18_WIDTH( 8 ),
    .din19_WIDTH( 8 ),
    .din20_WIDTH( 8 ),
    .din21_WIDTH( 8 ),
    .din22_WIDTH( 8 ),
    .din23_WIDTH( 8 ),
    .din24_WIDTH( 8 ),
    .din25_WIDTH( 8 ),
    .din26_WIDTH( 8 ),
    .din27_WIDTH( 8 ),
    .din28_WIDTH( 8 ),
    .din29_WIDTH( 8 ),
    .din30_WIDTH( 8 ),
    .din31_WIDTH( 8 ),
    .din32_WIDTH( 8 ),
    .din33_WIDTH( 8 ),
    .din34_WIDTH( 8 ),
    .din35_WIDTH( 8 ),
    .din36_WIDTH( 8 ),
    .din37_WIDTH( 8 ),
    .din38_WIDTH( 8 ),
    .din39_WIDTH( 8 ),
    .din40_WIDTH( 8 ),
    .din41_WIDTH( 8 ),
    .din42_WIDTH( 8 ),
    .din43_WIDTH( 8 ),
    .din44_WIDTH( 8 ),
    .din45_WIDTH( 8 ),
    .din46_WIDTH( 8 ),
    .din47_WIDTH( 8 ),
    .din48_WIDTH( 8 ),
    .din49_WIDTH( 8 ),
    .din50_WIDTH( 8 ),
    .din51_WIDTH( 8 ),
    .din52_WIDTH( 8 ),
    .din53_WIDTH( 8 ),
    .din54_WIDTH( 8 ),
    .din55_WIDTH( 8 ),
    .din56_WIDTH( 8 ),
    .din57_WIDTH( 8 ),
    .din58_WIDTH( 8 ),
    .din59_WIDTH( 8 ),
    .din60_WIDTH( 8 ),
    .din61_WIDTH( 8 ),
    .din62_WIDTH( 8 ),
    .din63_WIDTH( 8 ),
    .din64_WIDTH( 6 ),
    .dout_WIDTH( 8 ))
computeS3_mux_646yd2_x_x_x_x_U108(
    .din0(8'd28),
    .din1(8'd0),
    .din2(8'd0),
    .din3(8'd17),
    .din4(8'd0),
    .din5(8'd0),
    .din6(8'd248),
    .din7(8'd0),
    .din8(8'd0),
    .din9(8'd247),
    .din10(8'd0),
    .din11(8'd1),
    .din12(8'd0),
    .din13(8'd0),
    .din14(8'd0),
    .din15(8'd0),
    .din16(8'd0),
    .din17(8'd0),
    .din18(8'd0),
    .din19(8'd0),
    .din20(8'd3),
    .din21(8'd9),
    .din22(8'd0),
    .din23(8'd0),
    .din24(8'd0),
    .din25(8'd5),
    .din26(8'd244),
    .din27(8'd0),
    .din28(8'd241),
    .din29(8'd245),
    .din30(8'd0),
    .din31(8'd0),
    .din32(8'd0),
    .din33(8'd0),
    .din34(8'd0),
    .din35(8'd0),
    .din36(8'd0),
    .din37(8'd0),
    .din38(8'd26),
    .din39(8'd14),
    .din40(8'd0),
    .din41(8'd0),
    .din42(8'd8),
    .din43(8'd245),
    .din44(8'd0),
    .din45(8'd0),
    .din46(8'd0),
    .din47(8'd0),
    .din48(8'd0),
    .din49(8'd0),
    .din50(8'd0),
    .din51(8'd0),
    .din52(8'd0),
    .din53(8'd252),
    .din54(8'd0),
    .din55(8'd0),
    .din56(8'd0),
    .din57(8'd0),
    .din58(8'd0),
    .din59(8'd0),
    .din60(8'd10),
    .din61(8'd0),
    .din62(8'd0),
    .din63(8'd0),
    .din64(nm_t_mid2_reg_1536_pp0_iter2_reg),
    .dout(tmp_175_fu_1073_p66)
);

computeS3_mux_646yd2_x_x_x_x #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 8 ),
    .din3_WIDTH( 8 ),
    .din4_WIDTH( 8 ),
    .din5_WIDTH( 8 ),
    .din6_WIDTH( 8 ),
    .din7_WIDTH( 8 ),
    .din8_WIDTH( 8 ),
    .din9_WIDTH( 8 ),
    .din10_WIDTH( 8 ),
    .din11_WIDTH( 8 ),
    .din12_WIDTH( 8 ),
    .din13_WIDTH( 8 ),
    .din14_WIDTH( 8 ),
    .din15_WIDTH( 8 ),
    .din16_WIDTH( 8 ),
    .din17_WIDTH( 8 ),
    .din18_WIDTH( 8 ),
    .din19_WIDTH( 8 ),
    .din20_WIDTH( 8 ),
    .din21_WIDTH( 8 ),
    .din22_WIDTH( 8 ),
    .din23_WIDTH( 8 ),
    .din24_WIDTH( 8 ),
    .din25_WIDTH( 8 ),
    .din26_WIDTH( 8 ),
    .din27_WIDTH( 8 ),
    .din28_WIDTH( 8 ),
    .din29_WIDTH( 8 ),
    .din30_WIDTH( 8 ),
    .din31_WIDTH( 8 ),
    .din32_WIDTH( 8 ),
    .din33_WIDTH( 8 ),
    .din34_WIDTH( 8 ),
    .din35_WIDTH( 8 ),
    .din36_WIDTH( 8 ),
    .din37_WIDTH( 8 ),
    .din38_WIDTH( 8 ),
    .din39_WIDTH( 8 ),
    .din40_WIDTH( 8 ),
    .din41_WIDTH( 8 ),
    .din42_WIDTH( 8 ),
    .din43_WIDTH( 8 ),
    .din44_WIDTH( 8 ),
    .din45_WIDTH( 8 ),
    .din46_WIDTH( 8 ),
    .din47_WIDTH( 8 ),
    .din48_WIDTH( 8 ),
    .din49_WIDTH( 8 ),
    .din50_WIDTH( 8 ),
    .din51_WIDTH( 8 ),
    .din52_WIDTH( 8 ),
    .din53_WIDTH( 8 ),
    .din54_WIDTH( 8 ),
    .din55_WIDTH( 8 ),
    .din56_WIDTH( 8 ),
    .din57_WIDTH( 8 ),
    .din58_WIDTH( 8 ),
    .din59_WIDTH( 8 ),
    .din60_WIDTH( 8 ),
    .din61_WIDTH( 8 ),
    .din62_WIDTH( 8 ),
    .din63_WIDTH( 8 ),
    .din64_WIDTH( 6 ),
    .dout_WIDTH( 8 ))
computeS3_mux_646yd2_x_x_x_x_U109(
    .din0(8'd0),
    .din1(8'd2),
    .din2(8'd0),
    .din3(8'd0),
    .din4(8'd0),
    .din5(8'd0),
    .din6(8'd0),
    .din7(8'd0),
    .din8(8'd0),
    .din9(8'd0),
    .din10(8'd0),
    .din11(8'd0),
    .din12(8'd0),
    .din13(8'd0),
    .din14(8'd0),
    .din15(8'd0),
    .din16(8'd0),
    .din17(8'd0),
    .din18(8'd0),
    .din19(8'd254),
    .din20(8'd3),
    .din21(8'd0),
    .din22(8'd16),
    .din23(8'd0),
    .din24(8'd0),
    .din25(8'd0),
    .din26(8'd0),
    .din27(8'd244),
    .din28(8'd0),
    .din29(8'd0),
    .din30(8'd34),
    .din31(8'd3),
    .din32(8'd0),
    .din33(8'd0),
    .din34(8'd0),
    .din35(8'd0),
    .din36(8'd0),
    .din37(8'd0),
    .din38(8'd253),
    .din39(8'd249),
    .din40(8'd0),
    .din41(8'd0),
    .din42(8'd0),
    .din43(8'd0),
    .din44(8'd0),
    .din45(8'd246),
    .din46(8'd0),
    .din47(8'd0),
    .din48(8'd0),
    .din49(8'd0),
    .din50(8'd0),
    .din51(8'd0),
    .din52(8'd28),
    .din53(8'd0),
    .din54(8'd0),
    .din55(8'd0),
    .din56(8'd253),
    .din57(8'd0),
    .din58(8'd0),
    .din59(8'd0),
    .din60(8'd24),
    .din61(8'd0),
    .din62(8'd0),
    .din63(8'd0),
    .din64(nm_t_mid2_reg_1536_pp0_iter2_reg),
    .dout(tmp_176_fu_1212_p66)
);

computeS3_mux_646yd2_x_x_x_x #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 8 ),
    .din3_WIDTH( 8 ),
    .din4_WIDTH( 8 ),
    .din5_WIDTH( 8 ),
    .din6_WIDTH( 8 ),
    .din7_WIDTH( 8 ),
    .din8_WIDTH( 8 ),
    .din9_WIDTH( 8 ),
    .din10_WIDTH( 8 ),
    .din11_WIDTH( 8 ),
    .din12_WIDTH( 8 ),
    .din13_WIDTH( 8 ),
    .din14_WIDTH( 8 ),
    .din15_WIDTH( 8 ),
    .din16_WIDTH( 8 ),
    .din17_WIDTH( 8 ),
    .din18_WIDTH( 8 ),
    .din19_WIDTH( 8 ),
    .din20_WIDTH( 8 ),
    .din21_WIDTH( 8 ),
    .din22_WIDTH( 8 ),
    .din23_WIDTH( 8 ),
    .din24_WIDTH( 8 ),
    .din25_WIDTH( 8 ),
    .din26_WIDTH( 8 ),
    .din27_WIDTH( 8 ),
    .din28_WIDTH( 8 ),
    .din29_WIDTH( 8 ),
    .din30_WIDTH( 8 ),
    .din31_WIDTH( 8 ),
    .din32_WIDTH( 8 ),
    .din33_WIDTH( 8 ),
    .din34_WIDTH( 8 ),
    .din35_WIDTH( 8 ),
    .din36_WIDTH( 8 ),
    .din37_WIDTH( 8 ),
    .din38_WIDTH( 8 ),
    .din39_WIDTH( 8 ),
    .din40_WIDTH( 8 ),
    .din41_WIDTH( 8 ),
    .din42_WIDTH( 8 ),
    .din43_WIDTH( 8 ),
    .din44_WIDTH( 8 ),
    .din45_WIDTH( 8 ),
    .din46_WIDTH( 8 ),
    .din47_WIDTH( 8 ),
    .din48_WIDTH( 8 ),
    .din49_WIDTH( 8 ),
    .din50_WIDTH( 8 ),
    .din51_WIDTH( 8 ),
    .din52_WIDTH( 8 ),
    .din53_WIDTH( 8 ),
    .din54_WIDTH( 8 ),
    .din55_WIDTH( 8 ),
    .din56_WIDTH( 8 ),
    .din57_WIDTH( 8 ),
    .din58_WIDTH( 8 ),
    .din59_WIDTH( 8 ),
    .din60_WIDTH( 8 ),
    .din61_WIDTH( 8 ),
    .din62_WIDTH( 8 ),
    .din63_WIDTH( 8 ),
    .din64_WIDTH( 6 ),
    .dout_WIDTH( 8 ))
computeS3_mux_646yd2_x_x_x_x_U110(
    .din0(8'd253),
    .din1(8'd0),
    .din2(8'd0),
    .din3(8'd25),
    .din4(8'd0),
    .din5(8'd0),
    .din6(8'd0),
    .din7(8'd252),
    .din8(8'd0),
    .din9(8'd0),
    .din10(8'd0),
    .din11(8'd253),
    .din12(8'd254),
    .din13(8'd0),
    .din14(8'd33),
    .din15(8'd0),
    .din16(8'd0),
    .din17(8'd0),
    .din18(8'd0),
    .din19(8'd0),
    .din20(8'd0),
    .din21(8'd0),
    .din22(8'd0),
    .din23(8'd0),
    .din24(8'd0),
    .din25(8'd0),
    .din26(8'd0),
    .din27(8'd0),
    .din28(8'd0),
    .din29(8'd0),
    .din30(8'd0),
    .din31(8'd0),
    .din32(8'd0),
    .din33(8'd0),
    .din34(8'd0),
    .din35(8'd15),
    .din36(8'd0),
    .din37(8'd0),
    .din38(8'd0),
    .din39(8'd35),
    .din40(8'd0),
    .din41(8'd0),
    .din42(8'd0),
    .din43(8'd0),
    .din44(8'd0),
    .din45(8'd0),
    .din46(8'd0),
    .din47(8'd23),
    .din48(8'd0),
    .din49(8'd31),
    .din50(8'd0),
    .din51(8'd0),
    .din52(8'd0),
    .din53(8'd0),
    .din54(8'd0),
    .din55(8'd0),
    .din56(8'd0),
    .din57(8'd25),
    .din58(8'd9),
    .din59(8'd19),
    .din60(8'd0),
    .din61(8'd0),
    .din62(8'd34),
    .din63(8'd20),
    .din64(nm_t_mid2_reg_1536_pp0_iter2_reg),
    .dout(tmp_177_fu_1351_p66)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state7)) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state2) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state2)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state2);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter4 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((internal_ap_ready == 1'b0) & (real_start == 1'b1))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_flatten_fu_367_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        indvar_flatten3_reg_291 <= indvar_flatten_next1_fu_373_p2;
    end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        indvar_flatten3_reg_291 <= 25'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_flatten_fu_367_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        indvar_flatten_reg_302 <= indvar_flatten_next_fu_511_p3;
    end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        indvar_flatten_reg_302 <= 16'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_249_reg_1554_pp0_iter2_reg == 1'd0) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        macRegisters_0_V_8_fu_210 <= macRegisters_0_V_fu_843_p2;
    end else if (((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1)) | ((tmp_249_reg_1554_pp0_iter2_reg == 1'd1) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001)))) begin
        macRegisters_0_V_8_fu_210 <= 8'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_249_reg_1554_pp0_iter2_reg == 1'd0) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        macRegisters_1_V_8_fu_214 <= macRegisters_1_V_fu_863_p2;
    end else if (((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1)) | ((tmp_249_reg_1554_pp0_iter2_reg == 1'd1) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001)))) begin
        macRegisters_1_V_8_fu_214 <= 8'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_249_reg_1554_pp0_iter2_reg == 1'd0) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        macRegisters_2_V_8_fu_218 <= macRegisters_2_V_fu_885_p2;
    end else if (((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1)) | ((tmp_249_reg_1554_pp0_iter2_reg == 1'd1) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001)))) begin
        macRegisters_2_V_8_fu_218 <= 8'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_249_reg_1554_pp0_iter2_reg == 1'd0) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        macRegisters_3_V_8_fu_222 <= macRegisters_3_V_fu_908_p2;
    end else if (((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1)) | ((tmp_249_reg_1554_pp0_iter2_reg == 1'd1) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001)))) begin
        macRegisters_3_V_8_fu_222 <= 8'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_flatten_fu_367_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        nm_reg_313 <= nm_mid2_fu_475_p3;
    end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        nm_reg_313 <= 7'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_flatten_fu_367_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        sf_reg_324 <= sf_2_fu_499_p2;
    end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        sf_reg_324 <= 9'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        exitcond_flatten_reg_1527 <= exitcond_flatten_fu_367_p2;
        exitcond_flatten_reg_1527_pp0_iter1_reg <= exitcond_flatten_reg_1527;
        nm_t_mid2_reg_1536_pp0_iter1_reg <= nm_t_mid2_reg_1536;
        tmp_249_reg_1554_pp0_iter1_reg <= tmp_249_reg_1554;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_flatten_fu_367_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        nm_t_mid2_reg_1536 <= nm_t_mid2_fu_467_p3;
        tmp_229_reg_1549 <= tmp_229_fu_487_p2;
        tmp_249_reg_1554 <= tmp_249_fu_493_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        nm_t_mid2_reg_1536_pp0_iter2_reg <= nm_t_mid2_reg_1536_pp0_iter1_reg;
        tmp_249_reg_1554_pp0_iter2_reg <= tmp_249_reg_1554_pp0_iter1_reg;
        tmp_249_reg_1554_pp0_iter3_reg <= tmp_249_reg_1554_pp0_iter2_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_249_reg_1554_pp0_iter2_reg == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        p_Val2_23_1_reg_1653 <= p_Val2_23_1_fu_1206_p2;
        p_Val2_23_2_reg_1658 <= p_Val2_23_2_fu_1345_p2;
        p_Val2_23_3_reg_1663 <= p_Val2_23_3_fu_1484_p2;
        p_Val2_s_reg_1648 <= p_Val2_s_fu_1067_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_flatten_reg_1527_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        tmp_1011_reg_1593 <= p_Val2_s_187_fu_538_p2[32'd6];
        tmp_1014_reg_1608 <= p_Val2_1_fu_608_p2[32'd6];
        tmp_1017_reg_1623 <= p_Val2_2_fu_678_p2[32'd6];
        tmp_1020_reg_1638 <= p_Val2_3_fu_748_p2[32'd6];
        tmp_164_reg_1588 <= {{p_Val2_s_187_fu_538_p2[13:7]}};
        tmp_167_reg_1603 <= {{p_Val2_1_fu_608_p2[14:7]}};
        tmp_169_reg_1618 <= {{p_Val2_2_fu_678_p2[13:7]}};
        tmp_172_reg_1633 <= {{p_Val2_3_fu_748_p2[13:7]}};
        tmp_235_reg_1598 <= tmp_235_fu_598_p2;
        tmp_279_1_reg_1613 <= tmp_279_1_fu_668_p2;
        tmp_279_2_reg_1628 <= tmp_279_2_fu_738_p2;
        tmp_279_3_reg_1643 <= tmp_279_3_fu_808_p2;
    end
end

always @ (*) begin
    if ((exitcond_flatten_fu_367_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((real_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond_flatten_reg_1527_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        in_V_V_blk_n = in_V_V_empty_n;
    end else begin
        in_V_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((exitcond_flatten_reg_1527_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        in_V_V_read = 1'b1;
    end else begin
        in_V_V_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        internal_ap_ready = 1'b1;
    end else begin
        internal_ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_249_reg_1554_pp0_iter3_reg == 1'd1) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        out_V_V_blk_n = out_V_V_full_n;
    end else begin
        out_V_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((tmp_249_reg_1554_pp0_iter3_reg == 1'd1) & (ap_enable_reg_pp0_iter4 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        out_V_V_write = 1'b1;
    end else begin
        out_V_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (start_full_n == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (real_start == 1'b1))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        weights15_m_weights_1_ce0 = 1'b1;
    end else begin
        weights15_m_weights_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        weights15_m_weights_2_ce0 = 1'b1;
    end else begin
        weights15_m_weights_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        weights15_m_weights_3_ce0 = 1'b1;
    end else begin
        weights15_m_weights_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        weights15_m_weights_s_ce0 = 1'b1;
    end else begin
        weights15_m_weights_s_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((exitcond_flatten_fu_367_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1)) & ~((ap_enable_reg_pp0_iter3 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter4 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((ap_enable_reg_pp0_iter3 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter4 == 1'b1)) | ((exitcond_flatten_fu_367_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd2];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = (((tmp_249_reg_1554_pp0_iter3_reg == 1'd1) & (out_V_V_full_n == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b1)) | ((exitcond_flatten_reg_1527_pp0_iter1_reg == 1'd0) & (in_V_V_empty_n == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((tmp_249_reg_1554_pp0_iter3_reg == 1'd1) & (out_V_V_full_n == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b1)) | ((exitcond_flatten_reg_1527_pp0_iter1_reg == 1'd0) & (in_V_V_empty_n == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((tmp_249_reg_1554_pp0_iter3_reg == 1'd1) & (out_V_V_full_n == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b1)) | ((exitcond_flatten_reg_1527_pp0_iter1_reg == 1'd0) & (in_V_V_empty_n == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1)));
end

always @ (*) begin
    ap_block_state1 = ((real_start == 1'b0) | (ap_done_reg == 1'b1));
end

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state4_pp0_stage0_iter2 = ((exitcond_flatten_reg_1527_pp0_iter1_reg == 1'd0) & (in_V_V_empty_n == 1'b0));
end

assign ap_block_state5_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state6_pp0_stage0_iter4 = ((tmp_249_reg_1554_pp0_iter3_reg == 1'd1) & (out_V_V_full_n == 1'b0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_ready = internal_ap_ready;

assign exitcond_flatten3_fu_379_p2 = ((indvar_flatten_reg_302 == 16'd16384) ? 1'b1 : 1'b0);

assign exitcond_flatten_fu_367_p2 = ((indvar_flatten3_reg_291 == 25'd16777216) ? 1'b1 : 1'b0);

assign indvar_flatten_next1_fu_373_p2 = (25'd1 + indvar_flatten3_reg_291);

assign indvar_flatten_next_fu_511_p3 = ((exitcond_flatten3_fu_379_p2[0:0] === 1'b1) ? 16'd1 : indvar_flatten_op_fu_505_p2);

assign indvar_flatten_op_fu_505_p2 = (indvar_flatten_reg_302 + 16'd1);

assign macRegisters_0_V_fu_843_p2 = ($signed(tmp_165_fu_826_p1) + $signed(tmp1_fu_837_p2));

assign macRegisters_1_V_fu_863_p2 = (tmp_167_reg_1603 + tmp2_fu_857_p2);

assign macRegisters_2_V_fu_885_p2 = ($signed(tmp_170_fu_868_p1) + $signed(tmp3_fu_879_p2));

assign macRegisters_3_V_fu_908_p2 = ($signed(tmp_173_fu_891_p1) + $signed(tmp4_fu_902_p2));

assign nm_2_fu_427_p2 = (7'd1 + nm_mid_fu_385_p3);

assign nm_mid2_fu_475_p3 = ((tmp_259_mid_fu_421_p2[0:0] === 1'b1) ? nm_2_fu_427_p2 : nm_mid_fu_385_p3);

assign nm_mid_fu_385_p3 = ((exitcond_flatten3_fu_379_p2[0:0] === 1'b1) ? 7'd0 : nm_reg_313);

assign nm_t_mid2_fu_467_p3 = ((tmp_259_mid_fu_421_p2[0:0] === 1'b1) ? tmp_1009_fu_447_p1 : nm_t_mid_fu_401_p3);

assign nm_t_mid_fu_401_p3 = ((exitcond_flatten3_fu_379_p2[0:0] === 1'b1) ? 6'd0 : tmp_fu_355_p1);

assign not_exitcond_flatten_fu_409_p2 = (exitcond_flatten3_fu_379_p2 ^ 1'd1);

assign out_V_V_din = {{{{p_Val2_23_3_reg_1663}, {p_Val2_23_2_reg_1658}}, {p_Val2_23_1_reg_1653}}, {p_Val2_s_reg_1648}};

assign p_08_cast4_cast_fu_530_p0 = in_V_V_dout;

assign p_08_cast4_cast_fu_530_p1 = p_08_cast4_cast_fu_530_p0;

assign p_08_cast4_fu_526_p0 = in_V_V_dout;

assign p_Val2_1_fu_608_p0 = weights15_m_weights_2_q0;

assign p_Val2_1_fu_608_p1 = p_08_cast4_fu_526_p0;

assign p_Val2_1_fu_608_p2 = ($signed(p_Val2_1_fu_608_p0) * $signed(p_Val2_1_fu_608_p1));

assign p_Val2_23_1_fu_1206_p2 = (macRegisters_1_V_fu_863_p2 + tmp_175_fu_1073_p66);

assign p_Val2_23_2_fu_1345_p2 = (macRegisters_2_V_fu_885_p2 + tmp_176_fu_1212_p66);

assign p_Val2_23_3_fu_1484_p2 = (macRegisters_3_V_fu_908_p2 + tmp_177_fu_1351_p66);

assign p_Val2_2_fu_678_p0 = weights15_m_weights_1_q0;

assign p_Val2_2_fu_678_p1 = p_08_cast4_cast_fu_530_p1;

assign p_Val2_2_fu_678_p2 = ($signed(p_Val2_2_fu_678_p0) * $signed(p_Val2_2_fu_678_p1));

assign p_Val2_3_fu_748_p0 = weights15_m_weights_s_q0;

assign p_Val2_3_fu_748_p1 = p_08_cast4_cast_fu_530_p1;

assign p_Val2_3_fu_748_p2 = ($signed(p_Val2_3_fu_748_p0) * $signed(p_Val2_3_fu_748_p1));

assign p_Val2_s_187_fu_538_p0 = weights15_m_weights_3_q0;

assign p_Val2_s_187_fu_538_p1 = p_08_cast4_cast_fu_530_p1;

assign p_Val2_s_187_fu_538_p2 = ($signed(p_Val2_s_187_fu_538_p0) * $signed(p_Val2_s_187_fu_538_p1));

assign p_Val2_s_fu_1067_p2 = (macRegisters_0_V_fu_843_p2 + tmp_174_fu_934_p66);

assign qb_assign_2_1_fu_849_p2 = (tmp_279_1_reg_1613 & tmp_1014_reg_1608);

assign qb_assign_2_2_fu_871_p2 = (tmp_279_2_reg_1628 & tmp_1017_reg_1623);

assign qb_assign_2_3_fu_894_p2 = (tmp_279_3_reg_1643 & tmp_1020_reg_1638);

assign qb_assign_2_fu_829_p2 = (tmp_235_reg_1598 & tmp_1011_reg_1593);

assign sf_2_fu_499_p2 = (sf_mid2_fu_439_p3 + 9'd1);

assign sf_cast1_fu_483_p1 = sf_mid2_fu_439_p3;

assign sf_mid2_fu_439_p3 = ((tmp_865_fu_433_p2[0:0] === 1'b1) ? 9'd0 : sf_reg_324);

assign start_out = real_start;

assign tmp1_fu_837_p2 = (tmp_236_fu_833_p1 + macRegisters_0_V_8_fu_210);

assign tmp2_fu_857_p2 = (tmp_280_1_fu_853_p1 + macRegisters_1_V_8_fu_214);

assign tmp3_fu_879_p2 = (tmp_280_2_fu_875_p1 + macRegisters_2_V_8_fu_218);

assign tmp4_fu_902_p2 = (tmp_280_3_fu_898_p1 + macRegisters_3_V_8_fu_222);

assign tmp_1009_fu_447_p1 = nm_2_fu_427_p2[5:0];

assign tmp_1010_fu_544_p3 = p_Val2_s_187_fu_538_p2[32'd13];

assign tmp_1012_fu_570_p1 = p_Val2_s_187_fu_538_p2[0:0];

assign tmp_1013_fu_614_p3 = p_Val2_1_fu_608_p2[32'd14];

assign tmp_1015_fu_640_p1 = p_Val2_1_fu_608_p2[0:0];

assign tmp_1016_fu_684_p3 = p_Val2_2_fu_678_p2[32'd13];

assign tmp_1018_fu_710_p1 = p_Val2_2_fu_678_p2[0:0];

assign tmp_1019_fu_754_p3 = p_Val2_3_fu_748_p2[32'd13];

assign tmp_1021_fu_780_p1 = p_Val2_3_fu_748_p2[0:0];

assign tmp_165_fu_826_p1 = $signed(tmp_164_reg_1588);

assign tmp_170_fu_868_p1 = $signed(tmp_169_reg_1618);

assign tmp_173_fu_891_p1 = $signed(tmp_172_reg_1633);

assign tmp_229_fu_487_p2 = (sf_cast1_fu_483_p1 + tmp_258_mid2_fu_459_p3);

assign tmp_230_fu_519_p1 = tmp_229_reg_1549;

assign tmp_232_fu_574_p2 = (tmp_1012_fu_570_p1 | tmp_1010_fu_544_p3);

assign tmp_233_fu_580_p4 = {{p_Val2_s_187_fu_538_p2[5:1]}};

assign tmp_234_fu_590_p3 = {{tmp_233_fu_580_p4}, {tmp_232_fu_574_p2}};

assign tmp_235_fu_598_p2 = ((tmp_234_fu_590_p3 != 6'd0) ? 1'b1 : 1'b0);

assign tmp_236_fu_833_p1 = qb_assign_2_fu_829_p2;

assign tmp_238_fu_644_p2 = (tmp_1015_fu_640_p1 | tmp_1013_fu_614_p3);

assign tmp_239_fu_650_p4 = {{p_Val2_1_fu_608_p2[5:1]}};

assign tmp_240_fu_660_p3 = {{tmp_239_fu_650_p4}, {tmp_238_fu_644_p2}};

assign tmp_242_fu_714_p2 = (tmp_1018_fu_710_p1 | tmp_1016_fu_684_p3);

assign tmp_243_fu_720_p4 = {{p_Val2_2_fu_678_p2[5:1]}};

assign tmp_244_fu_730_p3 = {{tmp_243_fu_720_p4}, {tmp_242_fu_714_p2}};

assign tmp_246_fu_784_p2 = (tmp_1021_fu_780_p1 | tmp_1019_fu_754_p3);

assign tmp_247_fu_790_p4 = {{p_Val2_3_fu_748_p2[5:1]}};

assign tmp_248_fu_800_p3 = {{tmp_247_fu_790_p4}, {tmp_246_fu_784_p2}};

assign tmp_249_fu_493_p2 = ((sf_mid2_fu_439_p3 == 9'd255) ? 1'b1 : 1'b0);

assign tmp_258_mid1_fu_451_p3 = {{tmp_1009_fu_447_p1}, {8'd0}};

assign tmp_258_mid2_fu_459_p3 = ((tmp_259_mid_fu_421_p2[0:0] === 1'b1) ? tmp_258_mid1_fu_451_p3 : tmp_258_mid_fu_393_p3);

assign tmp_258_mid_fu_393_p3 = ((exitcond_flatten3_fu_379_p2[0:0] === 1'b1) ? 14'd0 : tmp_s_fu_359_p3);

assign tmp_259_mid_fu_421_p2 = (tmp_888_fu_415_p2 & not_exitcond_flatten_fu_409_p2);

assign tmp_279_1_fu_668_p2 = ((tmp_240_fu_660_p3 != 6'd0) ? 1'b1 : 1'b0);

assign tmp_279_2_fu_738_p2 = ((tmp_244_fu_730_p3 != 6'd0) ? 1'b1 : 1'b0);

assign tmp_279_3_fu_808_p2 = ((tmp_248_fu_800_p3 != 6'd0) ? 1'b1 : 1'b0);

assign tmp_280_1_fu_853_p1 = qb_assign_2_1_fu_849_p2;

assign tmp_280_2_fu_875_p1 = qb_assign_2_2_fu_871_p2;

assign tmp_280_3_fu_898_p1 = qb_assign_2_3_fu_894_p2;

assign tmp_865_fu_433_p2 = (tmp_259_mid_fu_421_p2 | exitcond_flatten3_fu_379_p2);

assign tmp_888_fu_415_p2 = ((sf_reg_324 == 9'd256) ? 1'b1 : 1'b0);

assign tmp_fu_355_p1 = nm_reg_313[5:0];

assign tmp_s_fu_359_p3 = {{tmp_fu_355_p1}, {8'd0}};

assign weights15_m_weights_1_address0 = tmp_230_fu_519_p1;

assign weights15_m_weights_2_address0 = tmp_230_fu_519_p1;

assign weights15_m_weights_3_address0 = tmp_230_fu_519_p1;

assign weights15_m_weights_s_address0 = tmp_230_fu_519_p1;

endmodule //Conv1DMac_new_1
