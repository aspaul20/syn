-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.2
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity Conv1DMac_new421 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    start_full_n : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    start_out : OUT STD_LOGIC;
    start_write : OUT STD_LOGIC;
    in_V_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
    in_V_V_empty_n : IN STD_LOGIC;
    in_V_V_read : OUT STD_LOGIC;
    out_V_V_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    out_V_V_full_n : IN STD_LOGIC;
    out_V_V_write : OUT STD_LOGIC );
end;


architecture behav of Conv1DMac_new421 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv21_0 : STD_LOGIC_VECTOR (20 downto 0) := "000000000000000000000";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv21_100000 : STD_LOGIC_VECTOR (20 downto 0) := "100000000000000000000";
    constant ap_const_lv21_1 : STD_LOGIC_VECTOR (20 downto 0) := "000000000000000000001";
    constant ap_const_lv16_4000 : STD_LOGIC_VECTOR (15 downto 0) := "0100000000000000";
    constant ap_const_lv14_0 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000000";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv9_100 : STD_LOGIC_VECTOR (8 downto 0) := "100000000";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv9_FF : STD_LOGIC_VECTOR (8 downto 0) := "011111111";
    constant ap_const_lv9_1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_const_lv16_1 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000001";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv8_A : STD_LOGIC_VECTOR (7 downto 0) := "00001010";
    constant ap_const_lv8_5 : STD_LOGIC_VECTOR (7 downto 0) := "00000101";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv8_7 : STD_LOGIC_VECTOR (7 downto 0) := "00000111";
    constant ap_const_lv8_D : STD_LOGIC_VECTOR (7 downto 0) := "00001101";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv8_FB : STD_LOGIC_VECTOR (7 downto 0) := "11111011";
    constant ap_const_lv8_8 : STD_LOGIC_VECTOR (7 downto 0) := "00001000";
    constant ap_const_lv8_FC : STD_LOGIC_VECTOR (7 downto 0) := "11111100";
    constant ap_const_lv8_F5 : STD_LOGIC_VECTOR (7 downto 0) := "11110101";
    constant ap_const_lv8_10 : STD_LOGIC_VECTOR (7 downto 0) := "00010000";
    constant ap_const_lv8_2 : STD_LOGIC_VECTOR (7 downto 0) := "00000010";
    constant ap_const_lv8_FD : STD_LOGIC_VECTOR (7 downto 0) := "11111101";
    constant ap_const_lv8_4 : STD_LOGIC_VECTOR (7 downto 0) := "00000100";
    constant ap_const_lv8_FE : STD_LOGIC_VECTOR (7 downto 0) := "11111110";
    constant ap_const_lv8_3 : STD_LOGIC_VECTOR (7 downto 0) := "00000011";
    constant ap_const_lv8_C : STD_LOGIC_VECTOR (7 downto 0) := "00001100";
    constant ap_const_lv8_9 : STD_LOGIC_VECTOR (7 downto 0) := "00001001";
    constant ap_const_lv8_FA : STD_LOGIC_VECTOR (7 downto 0) := "11111010";
    constant ap_const_lv8_B : STD_LOGIC_VECTOR (7 downto 0) := "00001011";
    constant ap_const_lv8_F : STD_LOGIC_VECTOR (7 downto 0) := "00001111";
    constant ap_const_lv8_12 : STD_LOGIC_VECTOR (7 downto 0) := "00010010";
    constant ap_const_lv8_F9 : STD_LOGIC_VECTOR (7 downto 0) := "11111001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";

    signal real_start : STD_LOGIC;
    signal start_once_reg : STD_LOGIC := '0';
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (2 downto 0) := "001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal internal_ap_ready : STD_LOGIC;
    signal weights18_m_weights_3_address0 : STD_LOGIC_VECTOR (13 downto 0);
    signal weights18_m_weights_3_ce0 : STD_LOGIC;
    signal weights18_m_weights_3_q0 : STD_LOGIC_VECTOR (5 downto 0);
    signal weights18_m_weights_2_address0 : STD_LOGIC_VECTOR (13 downto 0);
    signal weights18_m_weights_2_ce0 : STD_LOGIC;
    signal weights18_m_weights_2_q0 : STD_LOGIC_VECTOR (5 downto 0);
    signal weights18_m_weights_1_address0 : STD_LOGIC_VECTOR (13 downto 0);
    signal weights18_m_weights_1_ce0 : STD_LOGIC;
    signal weights18_m_weights_1_q0 : STD_LOGIC_VECTOR (5 downto 0);
    signal weights18_m_weights_s_address0 : STD_LOGIC_VECTOR (13 downto 0);
    signal weights18_m_weights_s_ce0 : STD_LOGIC;
    signal weights18_m_weights_s_q0 : STD_LOGIC_VECTOR (5 downto 0);
    signal in_V_V_blk_n : STD_LOGIC;
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal exitcond_flatten5_reg_1487 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_flatten5_reg_1487_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal out_V_V_blk_n : STD_LOGIC;
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal tmp_88_reg_1514 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_88_reg_1514_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal indvar_flatten5_reg_251 : STD_LOGIC_VECTOR (20 downto 0);
    signal indvar_flatten_reg_262 : STD_LOGIC_VECTOR (15 downto 0);
    signal nm_reg_273 : STD_LOGIC_VECTOR (6 downto 0);
    signal sf_reg_284 : STD_LOGIC_VECTOR (8 downto 0);
    signal exitcond_flatten5_fu_327_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_block_state2_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal indvar_flatten_next5_fu_333_p2 : STD_LOGIC_VECTOR (20 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal nm_t_mid2_fu_427_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal nm_t_mid2_reg_1496 : STD_LOGIC_VECTOR (5 downto 0);
    signal nm_t_mid2_reg_1496_pp0_iter1_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal nm_t_mid2_reg_1496_pp0_iter2_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal nm_mid2_fu_435_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_68_fu_447_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_68_reg_1509 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_88_fu_453_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_88_reg_1514_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_88_reg_1514_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal sf_1_fu_459_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal indvar_flatten_next_fu_471_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_51_reg_1548 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_913_reg_1553 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_86_fu_554_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_86_reg_1558 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_54_reg_1563 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_916_reg_1568 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_255_1_fu_624_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_255_1_reg_1573 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_57_reg_1578 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_919_reg_1583 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_255_2_fu_694_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_255_2_reg_1588 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_60_reg_1593 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_922_reg_1598 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_255_3_fu_764_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_255_3_reg_1603 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Val2_5_fu_1027_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Val2_5_reg_1608 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Val2_21_1_fu_1166_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Val2_21_1_reg_1613 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Val2_21_2_fu_1305_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Val2_21_2_reg_1618 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Val2_21_3_fu_1444_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Val2_21_3_reg_1623 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state2 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal tmp_85_fu_479_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal macRegisters_0_V_1_fu_170 : STD_LOGIC_VECTOR (7 downto 0);
    signal macRegisters_0_V_fu_799_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal macRegisters_1_V_1_fu_174 : STD_LOGIC_VECTOR (7 downto 0);
    signal macRegisters_1_V_fu_822_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal macRegisters_2_V_1_fu_178 : STD_LOGIC_VECTOR (7 downto 0);
    signal macRegisters_2_V_fu_845_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal macRegisters_3_V_1_fu_182 : STD_LOGIC_VECTOR (7 downto 0);
    signal macRegisters_3_V_fu_868_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_fu_315_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal exitcond_flatten_fu_339_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_s_fu_319_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_881_fu_375_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal not_exitcond_flatten_fu_369_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal nm_mid_fu_345_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_86_mid_fu_381_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_851_fu_393_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal nm_1_fu_387_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_911_fu_407_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_85_mid1_fu_411_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_85_mid_fu_353_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal nm_t_mid_fu_361_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal sf_mid2_fu_399_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal sf_cast1_fu_443_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_85_mid2_fu_419_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal indvar_flatten_op_fu_465_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Val2_s_fu_494_p0 : STD_LOGIC_VECTOR (5 downto 0);
    signal p_Val2_s_fu_494_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_08_cast_cast_fu_486_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal p_Val2_s_fu_494_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_914_fu_526_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_912_fu_500_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_71_fu_536_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_70_fu_530_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_72_fu_546_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal p_Val2_1_fu_564_p0 : STD_LOGIC_VECTOR (5 downto 0);
    signal p_Val2_1_fu_564_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Val2_1_fu_564_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_917_fu_596_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_915_fu_570_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_75_fu_606_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_74_fu_600_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_76_fu_616_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal p_Val2_2_fu_634_p0 : STD_LOGIC_VECTOR (5 downto 0);
    signal p_Val2_2_fu_634_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Val2_2_fu_634_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_920_fu_666_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_918_fu_640_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_79_fu_676_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_78_fu_670_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_80_fu_686_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal p_Val2_3_fu_704_p0 : STD_LOGIC_VECTOR (5 downto 0);
    signal p_Val2_3_fu_704_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Val2_3_fu_704_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_923_fu_736_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_921_fu_710_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_83_fu_746_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_82_fu_740_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_84_fu_756_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal qb_assign_1_fu_785_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_87_fu_789_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_52_fu_782_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp1_fu_793_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal qb_assign_1_1_fu_808_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_256_1_fu_812_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_55_fu_805_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp2_fu_816_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal qb_assign_1_2_fu_831_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_256_2_fu_835_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_58_fu_828_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp3_fu_839_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal qb_assign_1_3_fu_854_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_256_3_fu_858_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_61_fu_851_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp4_fu_862_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_62_fu_894_p66 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_63_fu_1033_p66 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_64_fu_1172_p66 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_65_fu_1311_p66 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;

    component computeS3_mux_646yd2_x_x_x_x_x_x_x IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        din5_WIDTH : INTEGER;
        din6_WIDTH : INTEGER;
        din7_WIDTH : INTEGER;
        din8_WIDTH : INTEGER;
        din9_WIDTH : INTEGER;
        din10_WIDTH : INTEGER;
        din11_WIDTH : INTEGER;
        din12_WIDTH : INTEGER;
        din13_WIDTH : INTEGER;
        din14_WIDTH : INTEGER;
        din15_WIDTH : INTEGER;
        din16_WIDTH : INTEGER;
        din17_WIDTH : INTEGER;
        din18_WIDTH : INTEGER;
        din19_WIDTH : INTEGER;
        din20_WIDTH : INTEGER;
        din21_WIDTH : INTEGER;
        din22_WIDTH : INTEGER;
        din23_WIDTH : INTEGER;
        din24_WIDTH : INTEGER;
        din25_WIDTH : INTEGER;
        din26_WIDTH : INTEGER;
        din27_WIDTH : INTEGER;
        din28_WIDTH : INTEGER;
        din29_WIDTH : INTEGER;
        din30_WIDTH : INTEGER;
        din31_WIDTH : INTEGER;
        din32_WIDTH : INTEGER;
        din33_WIDTH : INTEGER;
        din34_WIDTH : INTEGER;
        din35_WIDTH : INTEGER;
        din36_WIDTH : INTEGER;
        din37_WIDTH : INTEGER;
        din38_WIDTH : INTEGER;
        din39_WIDTH : INTEGER;
        din40_WIDTH : INTEGER;
        din41_WIDTH : INTEGER;
        din42_WIDTH : INTEGER;
        din43_WIDTH : INTEGER;
        din44_WIDTH : INTEGER;
        din45_WIDTH : INTEGER;
        din46_WIDTH : INTEGER;
        din47_WIDTH : INTEGER;
        din48_WIDTH : INTEGER;
        din49_WIDTH : INTEGER;
        din50_WIDTH : INTEGER;
        din51_WIDTH : INTEGER;
        din52_WIDTH : INTEGER;
        din53_WIDTH : INTEGER;
        din54_WIDTH : INTEGER;
        din55_WIDTH : INTEGER;
        din56_WIDTH : INTEGER;
        din57_WIDTH : INTEGER;
        din58_WIDTH : INTEGER;
        din59_WIDTH : INTEGER;
        din60_WIDTH : INTEGER;
        din61_WIDTH : INTEGER;
        din62_WIDTH : INTEGER;
        din63_WIDTH : INTEGER;
        din64_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        din2 : IN STD_LOGIC_VECTOR (7 downto 0);
        din3 : IN STD_LOGIC_VECTOR (7 downto 0);
        din4 : IN STD_LOGIC_VECTOR (7 downto 0);
        din5 : IN STD_LOGIC_VECTOR (7 downto 0);
        din6 : IN STD_LOGIC_VECTOR (7 downto 0);
        din7 : IN STD_LOGIC_VECTOR (7 downto 0);
        din8 : IN STD_LOGIC_VECTOR (7 downto 0);
        din9 : IN STD_LOGIC_VECTOR (7 downto 0);
        din10 : IN STD_LOGIC_VECTOR (7 downto 0);
        din11 : IN STD_LOGIC_VECTOR (7 downto 0);
        din12 : IN STD_LOGIC_VECTOR (7 downto 0);
        din13 : IN STD_LOGIC_VECTOR (7 downto 0);
        din14 : IN STD_LOGIC_VECTOR (7 downto 0);
        din15 : IN STD_LOGIC_VECTOR (7 downto 0);
        din16 : IN STD_LOGIC_VECTOR (7 downto 0);
        din17 : IN STD_LOGIC_VECTOR (7 downto 0);
        din18 : IN STD_LOGIC_VECTOR (7 downto 0);
        din19 : IN STD_LOGIC_VECTOR (7 downto 0);
        din20 : IN STD_LOGIC_VECTOR (7 downto 0);
        din21 : IN STD_LOGIC_VECTOR (7 downto 0);
        din22 : IN STD_LOGIC_VECTOR (7 downto 0);
        din23 : IN STD_LOGIC_VECTOR (7 downto 0);
        din24 : IN STD_LOGIC_VECTOR (7 downto 0);
        din25 : IN STD_LOGIC_VECTOR (7 downto 0);
        din26 : IN STD_LOGIC_VECTOR (7 downto 0);
        din27 : IN STD_LOGIC_VECTOR (7 downto 0);
        din28 : IN STD_LOGIC_VECTOR (7 downto 0);
        din29 : IN STD_LOGIC_VECTOR (7 downto 0);
        din30 : IN STD_LOGIC_VECTOR (7 downto 0);
        din31 : IN STD_LOGIC_VECTOR (7 downto 0);
        din32 : IN STD_LOGIC_VECTOR (7 downto 0);
        din33 : IN STD_LOGIC_VECTOR (7 downto 0);
        din34 : IN STD_LOGIC_VECTOR (7 downto 0);
        din35 : IN STD_LOGIC_VECTOR (7 downto 0);
        din36 : IN STD_LOGIC_VECTOR (7 downto 0);
        din37 : IN STD_LOGIC_VECTOR (7 downto 0);
        din38 : IN STD_LOGIC_VECTOR (7 downto 0);
        din39 : IN STD_LOGIC_VECTOR (7 downto 0);
        din40 : IN STD_LOGIC_VECTOR (7 downto 0);
        din41 : IN STD_LOGIC_VECTOR (7 downto 0);
        din42 : IN STD_LOGIC_VECTOR (7 downto 0);
        din43 : IN STD_LOGIC_VECTOR (7 downto 0);
        din44 : IN STD_LOGIC_VECTOR (7 downto 0);
        din45 : IN STD_LOGIC_VECTOR (7 downto 0);
        din46 : IN STD_LOGIC_VECTOR (7 downto 0);
        din47 : IN STD_LOGIC_VECTOR (7 downto 0);
        din48 : IN STD_LOGIC_VECTOR (7 downto 0);
        din49 : IN STD_LOGIC_VECTOR (7 downto 0);
        din50 : IN STD_LOGIC_VECTOR (7 downto 0);
        din51 : IN STD_LOGIC_VECTOR (7 downto 0);
        din52 : IN STD_LOGIC_VECTOR (7 downto 0);
        din53 : IN STD_LOGIC_VECTOR (7 downto 0);
        din54 : IN STD_LOGIC_VECTOR (7 downto 0);
        din55 : IN STD_LOGIC_VECTOR (7 downto 0);
        din56 : IN STD_LOGIC_VECTOR (7 downto 0);
        din57 : IN STD_LOGIC_VECTOR (7 downto 0);
        din58 : IN STD_LOGIC_VECTOR (7 downto 0);
        din59 : IN STD_LOGIC_VECTOR (7 downto 0);
        din60 : IN STD_LOGIC_VECTOR (7 downto 0);
        din61 : IN STD_LOGIC_VECTOR (7 downto 0);
        din62 : IN STD_LOGIC_VECTOR (7 downto 0);
        din63 : IN STD_LOGIC_VECTOR (7 downto 0);
        din64 : IN STD_LOGIC_VECTOR (5 downto 0);
        dout : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component Conv1DMac_new421_5jm IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (13 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (5 downto 0) );
    end component;


    component Conv1DMac_new421_6jw IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (13 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (5 downto 0) );
    end component;


    component Conv1DMac_new421_7jG IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (13 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (5 downto 0) );
    end component;


    component Conv1DMac_new421_8jQ IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (13 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (5 downto 0) );
    end component;



begin
    weights18_m_weights_3_U : component Conv1DMac_new421_5jm
    generic map (
        DataWidth => 6,
        AddressRange => 16384,
        AddressWidth => 14)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => weights18_m_weights_3_address0,
        ce0 => weights18_m_weights_3_ce0,
        q0 => weights18_m_weights_3_q0);

    weights18_m_weights_2_U : component Conv1DMac_new421_6jw
    generic map (
        DataWidth => 6,
        AddressRange => 16384,
        AddressWidth => 14)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => weights18_m_weights_2_address0,
        ce0 => weights18_m_weights_2_ce0,
        q0 => weights18_m_weights_2_q0);

    weights18_m_weights_1_U : component Conv1DMac_new421_7jG
    generic map (
        DataWidth => 6,
        AddressRange => 16384,
        AddressWidth => 14)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => weights18_m_weights_1_address0,
        ce0 => weights18_m_weights_1_ce0,
        q0 => weights18_m_weights_1_q0);

    weights18_m_weights_s_U : component Conv1DMac_new421_8jQ
    generic map (
        DataWidth => 6,
        AddressRange => 16384,
        AddressWidth => 14)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => weights18_m_weights_s_address0,
        ce0 => weights18_m_weights_s_ce0,
        q0 => weights18_m_weights_s_q0);

    computeS3_mux_646yd2_x_x_x_x_x_x_x_U168 : component computeS3_mux_646yd2_x_x_x_x_x_x_x
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 8,
        din3_WIDTH => 8,
        din4_WIDTH => 8,
        din5_WIDTH => 8,
        din6_WIDTH => 8,
        din7_WIDTH => 8,
        din8_WIDTH => 8,
        din9_WIDTH => 8,
        din10_WIDTH => 8,
        din11_WIDTH => 8,
        din12_WIDTH => 8,
        din13_WIDTH => 8,
        din14_WIDTH => 8,
        din15_WIDTH => 8,
        din16_WIDTH => 8,
        din17_WIDTH => 8,
        din18_WIDTH => 8,
        din19_WIDTH => 8,
        din20_WIDTH => 8,
        din21_WIDTH => 8,
        din22_WIDTH => 8,
        din23_WIDTH => 8,
        din24_WIDTH => 8,
        din25_WIDTH => 8,
        din26_WIDTH => 8,
        din27_WIDTH => 8,
        din28_WIDTH => 8,
        din29_WIDTH => 8,
        din30_WIDTH => 8,
        din31_WIDTH => 8,
        din32_WIDTH => 8,
        din33_WIDTH => 8,
        din34_WIDTH => 8,
        din35_WIDTH => 8,
        din36_WIDTH => 8,
        din37_WIDTH => 8,
        din38_WIDTH => 8,
        din39_WIDTH => 8,
        din40_WIDTH => 8,
        din41_WIDTH => 8,
        din42_WIDTH => 8,
        din43_WIDTH => 8,
        din44_WIDTH => 8,
        din45_WIDTH => 8,
        din46_WIDTH => 8,
        din47_WIDTH => 8,
        din48_WIDTH => 8,
        din49_WIDTH => 8,
        din50_WIDTH => 8,
        din51_WIDTH => 8,
        din52_WIDTH => 8,
        din53_WIDTH => 8,
        din54_WIDTH => 8,
        din55_WIDTH => 8,
        din56_WIDTH => 8,
        din57_WIDTH => 8,
        din58_WIDTH => 8,
        din59_WIDTH => 8,
        din60_WIDTH => 8,
        din61_WIDTH => 8,
        din62_WIDTH => 8,
        din63_WIDTH => 8,
        din64_WIDTH => 6,
        dout_WIDTH => 8)
    port map (
        din0 => ap_const_lv8_0,
        din1 => ap_const_lv8_0,
        din2 => ap_const_lv8_0,
        din3 => ap_const_lv8_0,
        din4 => ap_const_lv8_0,
        din5 => ap_const_lv8_0,
        din6 => ap_const_lv8_A,
        din7 => ap_const_lv8_0,
        din8 => ap_const_lv8_0,
        din9 => ap_const_lv8_0,
        din10 => ap_const_lv8_0,
        din11 => ap_const_lv8_0,
        din12 => ap_const_lv8_0,
        din13 => ap_const_lv8_5,
        din14 => ap_const_lv8_0,
        din15 => ap_const_lv8_0,
        din16 => ap_const_lv8_0,
        din17 => ap_const_lv8_1,
        din18 => ap_const_lv8_0,
        din19 => ap_const_lv8_7,
        din20 => ap_const_lv8_0,
        din21 => ap_const_lv8_0,
        din22 => ap_const_lv8_D,
        din23 => ap_const_lv8_0,
        din24 => ap_const_lv8_FF,
        din25 => ap_const_lv8_0,
        din26 => ap_const_lv8_0,
        din27 => ap_const_lv8_FB,
        din28 => ap_const_lv8_0,
        din29 => ap_const_lv8_0,
        din30 => ap_const_lv8_0,
        din31 => ap_const_lv8_0,
        din32 => ap_const_lv8_0,
        din33 => ap_const_lv8_0,
        din34 => ap_const_lv8_0,
        din35 => ap_const_lv8_0,
        din36 => ap_const_lv8_8,
        din37 => ap_const_lv8_0,
        din38 => ap_const_lv8_0,
        din39 => ap_const_lv8_0,
        din40 => ap_const_lv8_0,
        din41 => ap_const_lv8_0,
        din42 => ap_const_lv8_0,
        din43 => ap_const_lv8_0,
        din44 => ap_const_lv8_0,
        din45 => ap_const_lv8_0,
        din46 => ap_const_lv8_0,
        din47 => ap_const_lv8_0,
        din48 => ap_const_lv8_FC,
        din49 => ap_const_lv8_0,
        din50 => ap_const_lv8_0,
        din51 => ap_const_lv8_0,
        din52 => ap_const_lv8_A,
        din53 => ap_const_lv8_0,
        din54 => ap_const_lv8_F5,
        din55 => ap_const_lv8_0,
        din56 => ap_const_lv8_0,
        din57 => ap_const_lv8_FF,
        din58 => ap_const_lv8_0,
        din59 => ap_const_lv8_0,
        din60 => ap_const_lv8_10,
        din61 => ap_const_lv8_0,
        din62 => ap_const_lv8_0,
        din63 => ap_const_lv8_0,
        din64 => nm_t_mid2_reg_1496_pp0_iter2_reg,
        dout => tmp_62_fu_894_p66);

    computeS3_mux_646yd2_x_x_x_x_x_x_x_U169 : component computeS3_mux_646yd2_x_x_x_x_x_x_x
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 8,
        din3_WIDTH => 8,
        din4_WIDTH => 8,
        din5_WIDTH => 8,
        din6_WIDTH => 8,
        din7_WIDTH => 8,
        din8_WIDTH => 8,
        din9_WIDTH => 8,
        din10_WIDTH => 8,
        din11_WIDTH => 8,
        din12_WIDTH => 8,
        din13_WIDTH => 8,
        din14_WIDTH => 8,
        din15_WIDTH => 8,
        din16_WIDTH => 8,
        din17_WIDTH => 8,
        din18_WIDTH => 8,
        din19_WIDTH => 8,
        din20_WIDTH => 8,
        din21_WIDTH => 8,
        din22_WIDTH => 8,
        din23_WIDTH => 8,
        din24_WIDTH => 8,
        din25_WIDTH => 8,
        din26_WIDTH => 8,
        din27_WIDTH => 8,
        din28_WIDTH => 8,
        din29_WIDTH => 8,
        din30_WIDTH => 8,
        din31_WIDTH => 8,
        din32_WIDTH => 8,
        din33_WIDTH => 8,
        din34_WIDTH => 8,
        din35_WIDTH => 8,
        din36_WIDTH => 8,
        din37_WIDTH => 8,
        din38_WIDTH => 8,
        din39_WIDTH => 8,
        din40_WIDTH => 8,
        din41_WIDTH => 8,
        din42_WIDTH => 8,
        din43_WIDTH => 8,
        din44_WIDTH => 8,
        din45_WIDTH => 8,
        din46_WIDTH => 8,
        din47_WIDTH => 8,
        din48_WIDTH => 8,
        din49_WIDTH => 8,
        din50_WIDTH => 8,
        din51_WIDTH => 8,
        din52_WIDTH => 8,
        din53_WIDTH => 8,
        din54_WIDTH => 8,
        din55_WIDTH => 8,
        din56_WIDTH => 8,
        din57_WIDTH => 8,
        din58_WIDTH => 8,
        din59_WIDTH => 8,
        din60_WIDTH => 8,
        din61_WIDTH => 8,
        din62_WIDTH => 8,
        din63_WIDTH => 8,
        din64_WIDTH => 6,
        dout_WIDTH => 8)
    port map (
        din0 => ap_const_lv8_0,
        din1 => ap_const_lv8_0,
        din2 => ap_const_lv8_0,
        din3 => ap_const_lv8_F5,
        din4 => ap_const_lv8_0,
        din5 => ap_const_lv8_2,
        din6 => ap_const_lv8_A,
        din7 => ap_const_lv8_0,
        din8 => ap_const_lv8_0,
        din9 => ap_const_lv8_0,
        din10 => ap_const_lv8_0,
        din11 => ap_const_lv8_0,
        din12 => ap_const_lv8_FD,
        din13 => ap_const_lv8_0,
        din14 => ap_const_lv8_0,
        din15 => ap_const_lv8_1,
        din16 => ap_const_lv8_0,
        din17 => ap_const_lv8_0,
        din18 => ap_const_lv8_0,
        din19 => ap_const_lv8_0,
        din20 => ap_const_lv8_8,
        din21 => ap_const_lv8_0,
        din22 => ap_const_lv8_0,
        din23 => ap_const_lv8_0,
        din24 => ap_const_lv8_D,
        din25 => ap_const_lv8_4,
        din26 => ap_const_lv8_0,
        din27 => ap_const_lv8_0,
        din28 => ap_const_lv8_0,
        din29 => ap_const_lv8_0,
        din30 => ap_const_lv8_FC,
        din31 => ap_const_lv8_0,
        din32 => ap_const_lv8_FE,
        din33 => ap_const_lv8_0,
        din34 => ap_const_lv8_0,
        din35 => ap_const_lv8_0,
        din36 => ap_const_lv8_3,
        din37 => ap_const_lv8_C,
        din38 => ap_const_lv8_0,
        din39 => ap_const_lv8_0,
        din40 => ap_const_lv8_0,
        din41 => ap_const_lv8_0,
        din42 => ap_const_lv8_0,
        din43 => ap_const_lv8_0,
        din44 => ap_const_lv8_0,
        din45 => ap_const_lv8_0,
        din46 => ap_const_lv8_0,
        din47 => ap_const_lv8_9,
        din48 => ap_const_lv8_0,
        din49 => ap_const_lv8_0,
        din50 => ap_const_lv8_FA,
        din51 => ap_const_lv8_0,
        din52 => ap_const_lv8_FB,
        din53 => ap_const_lv8_0,
        din54 => ap_const_lv8_0,
        din55 => ap_const_lv8_0,
        din56 => ap_const_lv8_0,
        din57 => ap_const_lv8_0,
        din58 => ap_const_lv8_0,
        din59 => ap_const_lv8_0,
        din60 => ap_const_lv8_0,
        din61 => ap_const_lv8_0,
        din62 => ap_const_lv8_0,
        din63 => ap_const_lv8_0,
        din64 => nm_t_mid2_reg_1496_pp0_iter2_reg,
        dout => tmp_63_fu_1033_p66);

    computeS3_mux_646yd2_x_x_x_x_x_x_x_U170 : component computeS3_mux_646yd2_x_x_x_x_x_x_x
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 8,
        din3_WIDTH => 8,
        din4_WIDTH => 8,
        din5_WIDTH => 8,
        din6_WIDTH => 8,
        din7_WIDTH => 8,
        din8_WIDTH => 8,
        din9_WIDTH => 8,
        din10_WIDTH => 8,
        din11_WIDTH => 8,
        din12_WIDTH => 8,
        din13_WIDTH => 8,
        din14_WIDTH => 8,
        din15_WIDTH => 8,
        din16_WIDTH => 8,
        din17_WIDTH => 8,
        din18_WIDTH => 8,
        din19_WIDTH => 8,
        din20_WIDTH => 8,
        din21_WIDTH => 8,
        din22_WIDTH => 8,
        din23_WIDTH => 8,
        din24_WIDTH => 8,
        din25_WIDTH => 8,
        din26_WIDTH => 8,
        din27_WIDTH => 8,
        din28_WIDTH => 8,
        din29_WIDTH => 8,
        din30_WIDTH => 8,
        din31_WIDTH => 8,
        din32_WIDTH => 8,
        din33_WIDTH => 8,
        din34_WIDTH => 8,
        din35_WIDTH => 8,
        din36_WIDTH => 8,
        din37_WIDTH => 8,
        din38_WIDTH => 8,
        din39_WIDTH => 8,
        din40_WIDTH => 8,
        din41_WIDTH => 8,
        din42_WIDTH => 8,
        din43_WIDTH => 8,
        din44_WIDTH => 8,
        din45_WIDTH => 8,
        din46_WIDTH => 8,
        din47_WIDTH => 8,
        din48_WIDTH => 8,
        din49_WIDTH => 8,
        din50_WIDTH => 8,
        din51_WIDTH => 8,
        din52_WIDTH => 8,
        din53_WIDTH => 8,
        din54_WIDTH => 8,
        din55_WIDTH => 8,
        din56_WIDTH => 8,
        din57_WIDTH => 8,
        din58_WIDTH => 8,
        din59_WIDTH => 8,
        din60_WIDTH => 8,
        din61_WIDTH => 8,
        din62_WIDTH => 8,
        din63_WIDTH => 8,
        din64_WIDTH => 6,
        dout_WIDTH => 8)
    port map (
        din0 => ap_const_lv8_0,
        din1 => ap_const_lv8_1,
        din2 => ap_const_lv8_B,
        din3 => ap_const_lv8_1,
        din4 => ap_const_lv8_0,
        din5 => ap_const_lv8_0,
        din6 => ap_const_lv8_0,
        din7 => ap_const_lv8_9,
        din8 => ap_const_lv8_10,
        din9 => ap_const_lv8_5,
        din10 => ap_const_lv8_0,
        din11 => ap_const_lv8_0,
        din12 => ap_const_lv8_0,
        din13 => ap_const_lv8_0,
        din14 => ap_const_lv8_0,
        din15 => ap_const_lv8_0,
        din16 => ap_const_lv8_B,
        din17 => ap_const_lv8_0,
        din18 => ap_const_lv8_0,
        din19 => ap_const_lv8_0,
        din20 => ap_const_lv8_A,
        din21 => ap_const_lv8_0,
        din22 => ap_const_lv8_C,
        din23 => ap_const_lv8_0,
        din24 => ap_const_lv8_0,
        din25 => ap_const_lv8_FF,
        din26 => ap_const_lv8_0,
        din27 => ap_const_lv8_0,
        din28 => ap_const_lv8_FF,
        din29 => ap_const_lv8_0,
        din30 => ap_const_lv8_0,
        din31 => ap_const_lv8_0,
        din32 => ap_const_lv8_0,
        din33 => ap_const_lv8_0,
        din34 => ap_const_lv8_0,
        din35 => ap_const_lv8_0,
        din36 => ap_const_lv8_0,
        din37 => ap_const_lv8_0,
        din38 => ap_const_lv8_0,
        din39 => ap_const_lv8_0,
        din40 => ap_const_lv8_0,
        din41 => ap_const_lv8_0,
        din42 => ap_const_lv8_0,
        din43 => ap_const_lv8_0,
        din44 => ap_const_lv8_0,
        din45 => ap_const_lv8_3,
        din46 => ap_const_lv8_0,
        din47 => ap_const_lv8_0,
        din48 => ap_const_lv8_FF,
        din49 => ap_const_lv8_FB,
        din50 => ap_const_lv8_0,
        din51 => ap_const_lv8_0,
        din52 => ap_const_lv8_0,
        din53 => ap_const_lv8_FD,
        din54 => ap_const_lv8_0,
        din55 => ap_const_lv8_0,
        din56 => ap_const_lv8_0,
        din57 => ap_const_lv8_1,
        din58 => ap_const_lv8_0,
        din59 => ap_const_lv8_0,
        din60 => ap_const_lv8_B,
        din61 => ap_const_lv8_0,
        din62 => ap_const_lv8_0,
        din63 => ap_const_lv8_0,
        din64 => nm_t_mid2_reg_1496_pp0_iter2_reg,
        dout => tmp_64_fu_1172_p66);

    computeS3_mux_646yd2_x_x_x_x_x_x_x_U171 : component computeS3_mux_646yd2_x_x_x_x_x_x_x
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 8,
        din3_WIDTH => 8,
        din4_WIDTH => 8,
        din5_WIDTH => 8,
        din6_WIDTH => 8,
        din7_WIDTH => 8,
        din8_WIDTH => 8,
        din9_WIDTH => 8,
        din10_WIDTH => 8,
        din11_WIDTH => 8,
        din12_WIDTH => 8,
        din13_WIDTH => 8,
        din14_WIDTH => 8,
        din15_WIDTH => 8,
        din16_WIDTH => 8,
        din17_WIDTH => 8,
        din18_WIDTH => 8,
        din19_WIDTH => 8,
        din20_WIDTH => 8,
        din21_WIDTH => 8,
        din22_WIDTH => 8,
        din23_WIDTH => 8,
        din24_WIDTH => 8,
        din25_WIDTH => 8,
        din26_WIDTH => 8,
        din27_WIDTH => 8,
        din28_WIDTH => 8,
        din29_WIDTH => 8,
        din30_WIDTH => 8,
        din31_WIDTH => 8,
        din32_WIDTH => 8,
        din33_WIDTH => 8,
        din34_WIDTH => 8,
        din35_WIDTH => 8,
        din36_WIDTH => 8,
        din37_WIDTH => 8,
        din38_WIDTH => 8,
        din39_WIDTH => 8,
        din40_WIDTH => 8,
        din41_WIDTH => 8,
        din42_WIDTH => 8,
        din43_WIDTH => 8,
        din44_WIDTH => 8,
        din45_WIDTH => 8,
        din46_WIDTH => 8,
        din47_WIDTH => 8,
        din48_WIDTH => 8,
        din49_WIDTH => 8,
        din50_WIDTH => 8,
        din51_WIDTH => 8,
        din52_WIDTH => 8,
        din53_WIDTH => 8,
        din54_WIDTH => 8,
        din55_WIDTH => 8,
        din56_WIDTH => 8,
        din57_WIDTH => 8,
        din58_WIDTH => 8,
        din59_WIDTH => 8,
        din60_WIDTH => 8,
        din61_WIDTH => 8,
        din62_WIDTH => 8,
        din63_WIDTH => 8,
        din64_WIDTH => 6,
        dout_WIDTH => 8)
    port map (
        din0 => ap_const_lv8_0,
        din1 => ap_const_lv8_4,
        din2 => ap_const_lv8_0,
        din3 => ap_const_lv8_0,
        din4 => ap_const_lv8_FF,
        din5 => ap_const_lv8_FC,
        din6 => ap_const_lv8_0,
        din7 => ap_const_lv8_0,
        din8 => ap_const_lv8_2,
        din9 => ap_const_lv8_0,
        din10 => ap_const_lv8_0,
        din11 => ap_const_lv8_0,
        din12 => ap_const_lv8_0,
        din13 => ap_const_lv8_0,
        din14 => ap_const_lv8_FD,
        din15 => ap_const_lv8_F,
        din16 => ap_const_lv8_FE,
        din17 => ap_const_lv8_B,
        din18 => ap_const_lv8_10,
        din19 => ap_const_lv8_0,
        din20 => ap_const_lv8_FF,
        din21 => ap_const_lv8_0,
        din22 => ap_const_lv8_12,
        din23 => ap_const_lv8_0,
        din24 => ap_const_lv8_0,
        din25 => ap_const_lv8_0,
        din26 => ap_const_lv8_0,
        din27 => ap_const_lv8_0,
        din28 => ap_const_lv8_0,
        din29 => ap_const_lv8_0,
        din30 => ap_const_lv8_4,
        din31 => ap_const_lv8_C,
        din32 => ap_const_lv8_0,
        din33 => ap_const_lv8_1,
        din34 => ap_const_lv8_0,
        din35 => ap_const_lv8_12,
        din36 => ap_const_lv8_0,
        din37 => ap_const_lv8_0,
        din38 => ap_const_lv8_1,
        din39 => ap_const_lv8_0,
        din40 => ap_const_lv8_0,
        din41 => ap_const_lv8_A,
        din42 => ap_const_lv8_0,
        din43 => ap_const_lv8_D,
        din44 => ap_const_lv8_F9,
        din45 => ap_const_lv8_0,
        din46 => ap_const_lv8_0,
        din47 => ap_const_lv8_0,
        din48 => ap_const_lv8_FE,
        din49 => ap_const_lv8_3,
        din50 => ap_const_lv8_0,
        din51 => ap_const_lv8_0,
        din52 => ap_const_lv8_0,
        din53 => ap_const_lv8_0,
        din54 => ap_const_lv8_0,
        din55 => ap_const_lv8_0,
        din56 => ap_const_lv8_0,
        din57 => ap_const_lv8_2,
        din58 => ap_const_lv8_FC,
        din59 => ap_const_lv8_0,
        din60 => ap_const_lv8_0,
        din61 => ap_const_lv8_0,
        din62 => ap_const_lv8_0,
        din63 => ap_const_lv8_0,
        din64 => nm_t_mid2_reg_1496_pp0_iter2_reg,
        dout => tmp_65_fu_1311_p66);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2)) then 
                        ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state2);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                elsif ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    start_once_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                start_once_reg <= ap_const_logic_0;
            else
                if (((internal_ap_ready = ap_const_logic_0) and (real_start = ap_const_logic_1))) then 
                    start_once_reg <= ap_const_logic_1;
                elsif ((internal_ap_ready = ap_const_logic_1)) then 
                    start_once_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    indvar_flatten5_reg_251_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_flatten5_fu_327_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                indvar_flatten5_reg_251 <= indvar_flatten_next5_fu_333_p2;
            elsif ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                indvar_flatten5_reg_251 <= ap_const_lv21_0;
            end if; 
        end if;
    end process;

    indvar_flatten_reg_262_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_flatten5_fu_327_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                indvar_flatten_reg_262 <= indvar_flatten_next_fu_471_p3;
            elsif ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                indvar_flatten_reg_262 <= ap_const_lv16_0;
            end if; 
        end if;
    end process;

    macRegisters_0_V_1_fu_170_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_88_reg_1514_pp0_iter2_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                macRegisters_0_V_1_fu_170 <= macRegisters_0_V_fu_799_p2;
            elsif (((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((tmp_88_reg_1514_pp0_iter2_reg = ap_const_lv1_1) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)))) then 
                macRegisters_0_V_1_fu_170 <= ap_const_lv8_0;
            end if; 
        end if;
    end process;

    macRegisters_1_V_1_fu_174_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_88_reg_1514_pp0_iter2_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                macRegisters_1_V_1_fu_174 <= macRegisters_1_V_fu_822_p2;
            elsif (((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((tmp_88_reg_1514_pp0_iter2_reg = ap_const_lv1_1) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)))) then 
                macRegisters_1_V_1_fu_174 <= ap_const_lv8_0;
            end if; 
        end if;
    end process;

    macRegisters_2_V_1_fu_178_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_88_reg_1514_pp0_iter2_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                macRegisters_2_V_1_fu_178 <= macRegisters_2_V_fu_845_p2;
            elsif (((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((tmp_88_reg_1514_pp0_iter2_reg = ap_const_lv1_1) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)))) then 
                macRegisters_2_V_1_fu_178 <= ap_const_lv8_0;
            end if; 
        end if;
    end process;

    macRegisters_3_V_1_fu_182_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_88_reg_1514_pp0_iter2_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                macRegisters_3_V_1_fu_182 <= macRegisters_3_V_fu_868_p2;
            elsif (((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((tmp_88_reg_1514_pp0_iter2_reg = ap_const_lv1_1) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)))) then 
                macRegisters_3_V_1_fu_182 <= ap_const_lv8_0;
            end if; 
        end if;
    end process;

    nm_reg_273_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_flatten5_fu_327_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                nm_reg_273 <= nm_mid2_fu_435_p3;
            elsif ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                nm_reg_273 <= ap_const_lv7_0;
            end if; 
        end if;
    end process;

    sf_reg_284_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_flatten5_fu_327_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                sf_reg_284 <= sf_1_fu_459_p2;
            elsif ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                sf_reg_284 <= ap_const_lv9_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                exitcond_flatten5_reg_1487 <= exitcond_flatten5_fu_327_p2;
                exitcond_flatten5_reg_1487_pp0_iter1_reg <= exitcond_flatten5_reg_1487;
                nm_t_mid2_reg_1496_pp0_iter1_reg <= nm_t_mid2_reg_1496;
                tmp_88_reg_1514_pp0_iter1_reg <= tmp_88_reg_1514;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_flatten5_fu_327_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                nm_t_mid2_reg_1496 <= nm_t_mid2_fu_427_p3;
                tmp_68_reg_1509 <= tmp_68_fu_447_p2;
                tmp_88_reg_1514 <= tmp_88_fu_453_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                nm_t_mid2_reg_1496_pp0_iter2_reg <= nm_t_mid2_reg_1496_pp0_iter1_reg;
                tmp_88_reg_1514_pp0_iter2_reg <= tmp_88_reg_1514_pp0_iter1_reg;
                tmp_88_reg_1514_pp0_iter3_reg <= tmp_88_reg_1514_pp0_iter2_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_88_reg_1514_pp0_iter2_reg = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                p_Val2_21_1_reg_1613 <= p_Val2_21_1_fu_1166_p2;
                p_Val2_21_2_reg_1618 <= p_Val2_21_2_fu_1305_p2;
                p_Val2_21_3_reg_1623 <= p_Val2_21_3_fu_1444_p2;
                p_Val2_5_reg_1608 <= p_Val2_5_fu_1027_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_flatten5_reg_1487_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                tmp_255_1_reg_1573 <= tmp_255_1_fu_624_p2;
                tmp_255_2_reg_1588 <= tmp_255_2_fu_694_p2;
                tmp_255_3_reg_1603 <= tmp_255_3_fu_764_p2;
                tmp_51_reg_1548 <= p_Val2_s_fu_494_p2(13 downto 7);
                tmp_54_reg_1563 <= p_Val2_1_fu_564_p2(13 downto 7);
                tmp_57_reg_1578 <= p_Val2_2_fu_634_p2(13 downto 7);
                tmp_60_reg_1593 <= p_Val2_3_fu_704_p2(13 downto 7);
                tmp_86_reg_1558 <= tmp_86_fu_554_p2;
                tmp_913_reg_1553 <= p_Val2_s_fu_494_p2(6 downto 6);
                tmp_916_reg_1568 <= p_Val2_1_fu_564_p2(6 downto 6);
                tmp_919_reg_1583 <= p_Val2_2_fu_634_p2(6 downto 6);
                tmp_922_reg_1598 <= p_Val2_3_fu_704_p2(6 downto 6);
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (real_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, ap_enable_reg_pp0_iter4, exitcond_flatten5_fu_327_p2, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter3)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((exitcond_flatten5_fu_327_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) and not(((ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((((ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1)) or ((exitcond_flatten5_fu_327_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXX";
        end case;
    end process;
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(1);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state7 <= ap_CS_fsm(2);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(in_V_V_empty_n, out_V_V_full_n, ap_enable_reg_pp0_iter2, exitcond_flatten5_reg_1487_pp0_iter1_reg, ap_enable_reg_pp0_iter4, tmp_88_reg_1514_pp0_iter3_reg)
    begin
                ap_block_pp0_stage0_01001 <= (((tmp_88_reg_1514_pp0_iter3_reg = ap_const_lv1_1) and (out_V_V_full_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1)) or ((exitcond_flatten5_reg_1487_pp0_iter1_reg = ap_const_lv1_0) and (in_V_V_empty_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(in_V_V_empty_n, out_V_V_full_n, ap_enable_reg_pp0_iter2, exitcond_flatten5_reg_1487_pp0_iter1_reg, ap_enable_reg_pp0_iter4, tmp_88_reg_1514_pp0_iter3_reg)
    begin
                ap_block_pp0_stage0_11001 <= (((tmp_88_reg_1514_pp0_iter3_reg = ap_const_lv1_1) and (out_V_V_full_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1)) or ((exitcond_flatten5_reg_1487_pp0_iter1_reg = ap_const_lv1_0) and (in_V_V_empty_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(in_V_V_empty_n, out_V_V_full_n, ap_enable_reg_pp0_iter2, exitcond_flatten5_reg_1487_pp0_iter1_reg, ap_enable_reg_pp0_iter4, tmp_88_reg_1514_pp0_iter3_reg)
    begin
                ap_block_pp0_stage0_subdone <= (((tmp_88_reg_1514_pp0_iter3_reg = ap_const_lv1_1) and (out_V_V_full_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1)) or ((exitcond_flatten5_reg_1487_pp0_iter1_reg = ap_const_lv1_0) and (in_V_V_empty_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)));
    end process;


    ap_block_state1_assign_proc : process(real_start, ap_done_reg)
    begin
                ap_block_state1 <= ((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;

        ap_block_state2_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state4_pp0_stage0_iter2_assign_proc : process(in_V_V_empty_n, exitcond_flatten5_reg_1487_pp0_iter1_reg)
    begin
                ap_block_state4_pp0_stage0_iter2 <= ((exitcond_flatten5_reg_1487_pp0_iter1_reg = ap_const_lv1_0) and (in_V_V_empty_n = ap_const_logic_0));
    end process;

        ap_block_state5_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state6_pp0_stage0_iter4_assign_proc : process(out_V_V_full_n, tmp_88_reg_1514_pp0_iter3_reg)
    begin
                ap_block_state6_pp0_stage0_iter4 <= ((tmp_88_reg_1514_pp0_iter3_reg = ap_const_lv1_1) and (out_V_V_full_n = ap_const_logic_0));
    end process;


    ap_condition_pp0_exit_iter0_state2_assign_proc : process(exitcond_flatten5_fu_327_p2)
    begin
        if ((exitcond_flatten5_fu_327_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_done_reg, ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(real_start, ap_CS_fsm_state1)
    begin
        if (((real_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter3)
    begin
        if (((ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_ready <= internal_ap_ready;
    exitcond_flatten5_fu_327_p2 <= "1" when (indvar_flatten5_reg_251 = ap_const_lv21_100000) else "0";
    exitcond_flatten_fu_339_p2 <= "1" when (indvar_flatten_reg_262 = ap_const_lv16_4000) else "0";

    in_V_V_blk_n_assign_proc : process(in_V_V_empty_n, ap_enable_reg_pp0_iter2, ap_block_pp0_stage0, exitcond_flatten5_reg_1487_pp0_iter1_reg)
    begin
        if (((exitcond_flatten5_reg_1487_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            in_V_V_blk_n <= in_V_V_empty_n;
        else 
            in_V_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    in_V_V_read_assign_proc : process(ap_enable_reg_pp0_iter2, exitcond_flatten5_reg_1487_pp0_iter1_reg, ap_block_pp0_stage0_11001)
    begin
        if (((exitcond_flatten5_reg_1487_pp0_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            in_V_V_read <= ap_const_logic_1;
        else 
            in_V_V_read <= ap_const_logic_0;
        end if; 
    end process;

    indvar_flatten_next5_fu_333_p2 <= std_logic_vector(unsigned(ap_const_lv21_1) + unsigned(indvar_flatten5_reg_251));
    indvar_flatten_next_fu_471_p3 <= 
        ap_const_lv16_1 when (exitcond_flatten_fu_339_p2(0) = '1') else 
        indvar_flatten_op_fu_465_p2;
    indvar_flatten_op_fu_465_p2 <= std_logic_vector(unsigned(indvar_flatten_reg_262) + unsigned(ap_const_lv16_1));

    internal_ap_ready_assign_proc : process(ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            internal_ap_ready <= ap_const_logic_1;
        else 
            internal_ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    macRegisters_0_V_fu_799_p2 <= std_logic_vector(signed(tmp_52_fu_782_p1) + signed(tmp1_fu_793_p2));
    macRegisters_1_V_fu_822_p2 <= std_logic_vector(signed(tmp_55_fu_805_p1) + signed(tmp2_fu_816_p2));
    macRegisters_2_V_fu_845_p2 <= std_logic_vector(signed(tmp_58_fu_828_p1) + signed(tmp3_fu_839_p2));
    macRegisters_3_V_fu_868_p2 <= std_logic_vector(signed(tmp_61_fu_851_p1) + signed(tmp4_fu_862_p2));
    nm_1_fu_387_p2 <= std_logic_vector(unsigned(ap_const_lv7_1) + unsigned(nm_mid_fu_345_p3));
    nm_mid2_fu_435_p3 <= 
        nm_1_fu_387_p2 when (tmp_86_mid_fu_381_p2(0) = '1') else 
        nm_mid_fu_345_p3;
    nm_mid_fu_345_p3 <= 
        ap_const_lv7_0 when (exitcond_flatten_fu_339_p2(0) = '1') else 
        nm_reg_273;
    nm_t_mid2_fu_427_p3 <= 
        tmp_911_fu_407_p1 when (tmp_86_mid_fu_381_p2(0) = '1') else 
        nm_t_mid_fu_361_p3;
    nm_t_mid_fu_361_p3 <= 
        ap_const_lv6_0 when (exitcond_flatten_fu_339_p2(0) = '1') else 
        tmp_fu_315_p1;
    not_exitcond_flatten_fu_369_p2 <= (exitcond_flatten_fu_339_p2 xor ap_const_lv1_1);

    out_V_V_blk_n_assign_proc : process(out_V_V_full_n, ap_block_pp0_stage0, ap_enable_reg_pp0_iter4, tmp_88_reg_1514_pp0_iter3_reg)
    begin
        if (((tmp_88_reg_1514_pp0_iter3_reg = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1))) then 
            out_V_V_blk_n <= out_V_V_full_n;
        else 
            out_V_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    out_V_V_din <= (((p_Val2_21_3_reg_1623 & p_Val2_21_2_reg_1618) & p_Val2_21_1_reg_1613) & p_Val2_5_reg_1608);

    out_V_V_write_assign_proc : process(ap_enable_reg_pp0_iter4, tmp_88_reg_1514_pp0_iter3_reg, ap_block_pp0_stage0_11001)
    begin
        if (((tmp_88_reg_1514_pp0_iter3_reg = ap_const_lv1_1) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            out_V_V_write <= ap_const_logic_1;
        else 
            out_V_V_write <= ap_const_logic_0;
        end if; 
    end process;

        p_08_cast_cast_fu_486_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(in_V_V_dout),14));

    p_Val2_1_fu_564_p0 <= weights18_m_weights_2_q0;
    p_Val2_1_fu_564_p1 <= p_08_cast_cast_fu_486_p1(8 - 1 downto 0);
    p_Val2_1_fu_564_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(p_Val2_1_fu_564_p0) * signed(p_Val2_1_fu_564_p1))), 14));
    p_Val2_21_1_fu_1166_p2 <= std_logic_vector(unsigned(macRegisters_1_V_fu_822_p2) + unsigned(tmp_63_fu_1033_p66));
    p_Val2_21_2_fu_1305_p2 <= std_logic_vector(unsigned(macRegisters_2_V_fu_845_p2) + unsigned(tmp_64_fu_1172_p66));
    p_Val2_21_3_fu_1444_p2 <= std_logic_vector(unsigned(macRegisters_3_V_fu_868_p2) + unsigned(tmp_65_fu_1311_p66));
    p_Val2_2_fu_634_p0 <= weights18_m_weights_1_q0;
    p_Val2_2_fu_634_p1 <= p_08_cast_cast_fu_486_p1(8 - 1 downto 0);
    p_Val2_2_fu_634_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(p_Val2_2_fu_634_p0) * signed(p_Val2_2_fu_634_p1))), 14));
    p_Val2_3_fu_704_p0 <= weights18_m_weights_s_q0;
    p_Val2_3_fu_704_p1 <= p_08_cast_cast_fu_486_p1(8 - 1 downto 0);
    p_Val2_3_fu_704_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(p_Val2_3_fu_704_p0) * signed(p_Val2_3_fu_704_p1))), 14));
    p_Val2_5_fu_1027_p2 <= std_logic_vector(unsigned(macRegisters_0_V_fu_799_p2) + unsigned(tmp_62_fu_894_p66));
    p_Val2_s_fu_494_p0 <= weights18_m_weights_3_q0;
    p_Val2_s_fu_494_p1 <= p_08_cast_cast_fu_486_p1(8 - 1 downto 0);
    p_Val2_s_fu_494_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(p_Val2_s_fu_494_p0) * signed(p_Val2_s_fu_494_p1))), 14));
    qb_assign_1_1_fu_808_p2 <= (tmp_916_reg_1568 and tmp_255_1_reg_1573);
    qb_assign_1_2_fu_831_p2 <= (tmp_919_reg_1583 and tmp_255_2_reg_1588);
    qb_assign_1_3_fu_854_p2 <= (tmp_922_reg_1598 and tmp_255_3_reg_1603);
    qb_assign_1_fu_785_p2 <= (tmp_913_reg_1553 and tmp_86_reg_1558);

    real_start_assign_proc : process(ap_start, start_full_n, start_once_reg)
    begin
        if (((start_once_reg = ap_const_logic_0) and (start_full_n = ap_const_logic_0))) then 
            real_start <= ap_const_logic_0;
        else 
            real_start <= ap_start;
        end if; 
    end process;

    sf_1_fu_459_p2 <= std_logic_vector(unsigned(sf_mid2_fu_399_p3) + unsigned(ap_const_lv9_1));
    sf_cast1_fu_443_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sf_mid2_fu_399_p3),14));
    sf_mid2_fu_399_p3 <= 
        ap_const_lv9_0 when (tmp_851_fu_393_p2(0) = '1') else 
        sf_reg_284;
    start_out <= real_start;

    start_write_assign_proc : process(real_start, start_once_reg)
    begin
        if (((start_once_reg = ap_const_logic_0) and (real_start = ap_const_logic_1))) then 
            start_write <= ap_const_logic_1;
        else 
            start_write <= ap_const_logic_0;
        end if; 
    end process;

    tmp1_fu_793_p2 <= std_logic_vector(unsigned(tmp_87_fu_789_p1) + unsigned(macRegisters_0_V_1_fu_170));
    tmp2_fu_816_p2 <= std_logic_vector(unsigned(tmp_256_1_fu_812_p1) + unsigned(macRegisters_1_V_1_fu_174));
    tmp3_fu_839_p2 <= std_logic_vector(unsigned(tmp_256_2_fu_835_p1) + unsigned(macRegisters_2_V_1_fu_178));
    tmp4_fu_862_p2 <= std_logic_vector(unsigned(tmp_256_3_fu_858_p1) + unsigned(macRegisters_3_V_1_fu_182));
    tmp_255_1_fu_624_p2 <= "0" when (tmp_76_fu_616_p3 = ap_const_lv6_0) else "1";
    tmp_255_2_fu_694_p2 <= "0" when (tmp_80_fu_686_p3 = ap_const_lv6_0) else "1";
    tmp_255_3_fu_764_p2 <= "0" when (tmp_84_fu_756_p3 = ap_const_lv6_0) else "1";
    tmp_256_1_fu_812_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(qb_assign_1_1_fu_808_p2),8));
    tmp_256_2_fu_835_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(qb_assign_1_2_fu_831_p2),8));
    tmp_256_3_fu_858_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(qb_assign_1_3_fu_854_p2),8));
        tmp_52_fu_782_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_51_reg_1548),8));

        tmp_55_fu_805_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_54_reg_1563),8));

        tmp_58_fu_828_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_57_reg_1578),8));

        tmp_61_fu_851_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_60_reg_1593),8));

    tmp_68_fu_447_p2 <= std_logic_vector(unsigned(sf_cast1_fu_443_p1) + unsigned(tmp_85_mid2_fu_419_p3));
    tmp_70_fu_530_p2 <= (tmp_914_fu_526_p1 or tmp_912_fu_500_p3);
    tmp_71_fu_536_p4 <= p_Val2_s_fu_494_p2(5 downto 1);
    tmp_72_fu_546_p3 <= (tmp_71_fu_536_p4 & tmp_70_fu_530_p2);
    tmp_74_fu_600_p2 <= (tmp_917_fu_596_p1 or tmp_915_fu_570_p3);
    tmp_75_fu_606_p4 <= p_Val2_1_fu_564_p2(5 downto 1);
    tmp_76_fu_616_p3 <= (tmp_75_fu_606_p4 & tmp_74_fu_600_p2);
    tmp_78_fu_670_p2 <= (tmp_920_fu_666_p1 or tmp_918_fu_640_p3);
    tmp_79_fu_676_p4 <= p_Val2_2_fu_634_p2(5 downto 1);
    tmp_80_fu_686_p3 <= (tmp_79_fu_676_p4 & tmp_78_fu_670_p2);
    tmp_82_fu_740_p2 <= (tmp_923_fu_736_p1 or tmp_921_fu_710_p3);
    tmp_83_fu_746_p4 <= p_Val2_3_fu_704_p2(5 downto 1);
    tmp_84_fu_756_p3 <= (tmp_83_fu_746_p4 & tmp_82_fu_740_p2);
    tmp_851_fu_393_p2 <= (tmp_86_mid_fu_381_p2 or exitcond_flatten_fu_339_p2);
    tmp_85_fu_479_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_68_reg_1509),64));
    tmp_85_mid1_fu_411_p3 <= (tmp_911_fu_407_p1 & ap_const_lv8_0);
    tmp_85_mid2_fu_419_p3 <= 
        tmp_85_mid1_fu_411_p3 when (tmp_86_mid_fu_381_p2(0) = '1') else 
        tmp_85_mid_fu_353_p3;
    tmp_85_mid_fu_353_p3 <= 
        ap_const_lv14_0 when (exitcond_flatten_fu_339_p2(0) = '1') else 
        tmp_s_fu_319_p3;
    tmp_86_fu_554_p2 <= "0" when (tmp_72_fu_546_p3 = ap_const_lv6_0) else "1";
    tmp_86_mid_fu_381_p2 <= (tmp_881_fu_375_p2 and not_exitcond_flatten_fu_369_p2);
    tmp_87_fu_789_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(qb_assign_1_fu_785_p2),8));
    tmp_881_fu_375_p2 <= "1" when (sf_reg_284 = ap_const_lv9_100) else "0";
    tmp_88_fu_453_p2 <= "1" when (sf_mid2_fu_399_p3 = ap_const_lv9_FF) else "0";
    tmp_911_fu_407_p1 <= nm_1_fu_387_p2(6 - 1 downto 0);
    tmp_912_fu_500_p3 <= p_Val2_s_fu_494_p2(13 downto 13);
    tmp_914_fu_526_p1 <= p_Val2_s_fu_494_p2(1 - 1 downto 0);
    tmp_915_fu_570_p3 <= p_Val2_1_fu_564_p2(13 downto 13);
    tmp_917_fu_596_p1 <= p_Val2_1_fu_564_p2(1 - 1 downto 0);
    tmp_918_fu_640_p3 <= p_Val2_2_fu_634_p2(13 downto 13);
    tmp_920_fu_666_p1 <= p_Val2_2_fu_634_p2(1 - 1 downto 0);
    tmp_921_fu_710_p3 <= p_Val2_3_fu_704_p2(13 downto 13);
    tmp_923_fu_736_p1 <= p_Val2_3_fu_704_p2(1 - 1 downto 0);
    tmp_fu_315_p1 <= nm_reg_273(6 - 1 downto 0);
    tmp_s_fu_319_p3 <= (tmp_fu_315_p1 & ap_const_lv8_0);
    weights18_m_weights_1_address0 <= tmp_85_fu_479_p1(14 - 1 downto 0);

    weights18_m_weights_1_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            weights18_m_weights_1_ce0 <= ap_const_logic_1;
        else 
            weights18_m_weights_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    weights18_m_weights_2_address0 <= tmp_85_fu_479_p1(14 - 1 downto 0);

    weights18_m_weights_2_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            weights18_m_weights_2_ce0 <= ap_const_logic_1;
        else 
            weights18_m_weights_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    weights18_m_weights_3_address0 <= tmp_85_fu_479_p1(14 - 1 downto 0);

    weights18_m_weights_3_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            weights18_m_weights_3_ce0 <= ap_const_logic_1;
        else 
            weights18_m_weights_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    weights18_m_weights_s_address0 <= tmp_85_fu_479_p1(14 - 1 downto 0);

    weights18_m_weights_s_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            weights18_m_weights_s_ce0 <= ap_const_logic_1;
        else 
            weights18_m_weights_s_ce0 <= ap_const_logic_0;
        end if; 
    end process;

end behav;
