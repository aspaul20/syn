-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.2
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ==============================================================

library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity Conv1DMac_new401_Bew_rom is 
    generic(
             DWIDTH     : integer := 7; 
             AWIDTH     : integer := 14; 
             MEM_SIZE    : integer := 16384
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of Conv1DMac_new401_Bew_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 to 2324=> "0000000", 2325 => "1111111", 2326 to 2331=> "0000000", 2332 => "0010000", 
    2333 to 2354=> "0000000", 2355 => "1111111", 2356 => "0000011", 2357 to 2363=> "0000000", 
    2364 => "0001111", 2365 to 2380=> "0000000", 2381 => "0010001", 2382 to 2403=> "0000000", 
    2404 => "0010001", 2405 to 2425=> "0000000", 2426 => "0000001", 2427 => "0010001", 
    2428 to 2459=> "0000000", 2460 => "0001110", 2461 to 2496=> "0000000", 2497 => "1111111", 
    2498 to 2521=> "0000000", 2522 => "0001110", 2523 to 2536=> "0000000", 2537 => "1111111", 
    2538 to 3348=> "0000000", 3349 => "1111111", 3350 to 3355=> "0000000", 3356 => "0010001", 
    3357 to 3378=> "0000000", 3379 => "1111111", 3380 => "0000011", 3381 to 3387=> "0000000", 
    3388 => "0010000", 3389 to 3404=> "0000000", 3405 => "0010010", 3406 to 3427=> "0000000", 
    3428 => "0010001", 3429 to 3449=> "0000000", 3450 => "0000010", 3451 => "0010010", 
    3452 to 3467=> "0000000", 3468 => "1111111", 3469 to 3483=> "0000000", 3484 => "0001111", 
    3485 to 3498=> "0000000", 3499 => "1111111", 3500 to 3520=> "0000000", 3521 => "1111111", 
    3522 to 3545=> "0000000", 3546 => "0001111", 3547 to 3560=> "0000000", 3561 => "1111111", 
    3562 to 6427=> "0000000", 6428 => "1111111", 6429 to 6443=> "0000000", 6444 => "0010101", 
    6445 to 6459=> "0000000", 6460 => "0000001", 6461 to 6484=> "0000000", 6485 => "0010111", 
    6486 to 6567=> "0000000", 6568 => "0010110", 6569 to 6606=> "0000000", 6607 => "0010010", 
    6608 to 6617=> "0000000", 6618 => "0000001", 6619 to 6623=> "0000000", 6624 => "0000001", 
    6625 to 10267=> "0000000", 10268 => "0001100", 10269 to 10291=> "0000000", 10292 => "0000010", 
    10293 to 10299=> "0000000", 10300 => "0001011", 10301 to 10316=> "0000000", 10317 => "0001101", 
    10318 to 10339=> "0000000", 10340 => "0001100", 10341 to 10361=> "0000000", 10362 => "0000001", 
    10363 => "0001100", 10364 to 10395=> "0000000", 10396 => "0001011", 10397 to 10457=> "0000000", 
    10458 => "0001011", 10459 to 10781=> "0000000", 10782 => "0011101", 10783 to 10790=> "0000000", 
    10791 => "0000010", 10792 to 10813=> "0000000", 10814 => "0011101", 10815 to 10818=> "0000000", 
    10819 => "0100001", 10820 to 10850=> "0000000", 10851 => "0011111", 10852 to 10924=> "0000000", 
    10925 => "0000001", 10926 to 10943=> "0000000", 10944 => "0011100", 10945 to 10999=> "0000000", 
    11000 => "0010110", 11001 to 14877=> "0000000", 14878 => "0011010", 14879 to 14886=> "0000000", 
    14887 => "0000010", 14888 to 14909=> "0000000", 14910 => "0011010", 14911 to 14914=> "0000000", 
    14915 => "0011101", 14916 to 14946=> "0000000", 14947 => "0011011", 14948 to 15020=> "0000000", 
    15021 => "0000001", 15022 to 15039=> "0000000", 15040 => "0011000", 15041 to 15095=> "0000000", 
    15096 => "0010011", 15097 to 15643=> "0000000", 15644 => "1111111", 15645 to 15659=> "0000000", 
    15660 => "0011111", 15661 to 15675=> "0000000", 15676 => "0000001", 15677 to 15700=> "0000000", 
    15701 => "0100001", 15702 to 15771=> "0000000", 15772 => "0000001", 15773 to 15783=> "0000000", 
    15784 => "0100000", 15785 to 15822=> "0000000", 15823 => "0011010", 15824 to 15833=> "0000000", 
    15834 => "0000001", 15835 to 15839=> "0000000", 15840 => "0000001", 15841 to 15899=> "0000000", 
    15900 => "0001101", 15901 to 15923=> "0000000", 15924 => "0000010", 15925 to 15931=> "0000000", 
    15932 => "0001100", 15933 to 15948=> "0000000", 15949 => "0001110", 15950 to 15971=> "0000000", 
    15972 => "0001101", 15973 to 15993=> "0000000", 15994 => "0000001", 15995 => "0001110", 
    15996 to 16027=> "0000000", 16028 => "0001100", 16029 to 16036=> "0000000", 16037 => "0000001", 
    16038 to 16089=> "0000000", 16090 => "0001011", 16091 to 16102=> "0000000", 16103 => "0000001", 
    16104 to 16383=> "0000000" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;


Library IEEE;
use IEEE.std_logic_1164.all;

entity Conv1DMac_new401_Bew is
    generic (
        DataWidth : INTEGER := 7;
        AddressRange : INTEGER := 16384;
        AddressWidth : INTEGER := 14);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of Conv1DMac_new401_Bew is
    component Conv1DMac_new401_Bew_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    Conv1DMac_new401_Bew_rom_U :  component Conv1DMac_new401_Bew_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


