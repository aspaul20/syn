-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.2
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ==============================================================

library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity Conv1DMac_new401_Aem_rom is 
    generic(
             DWIDTH     : integer := 7; 
             AWIDTH     : integer := 14; 
             MEM_SIZE    : integer := 16384
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of Conv1DMac_new401_Aem_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 to 27=> "0000000", 28 => "0010000", 29 to 50=> "0000000", 51 => "1111111", 
    52 => "0000010", 53 to 59=> "0000000", 60 => "0001110", 61 to 76=> "0000000", 
    77 => "0010001", 78 to 99=> "0000000", 100 => "0010000", 101 to 121=> "0000000", 
    122 => "0000001", 123 => "0010000", 124 to 155=> "0000000", 156 => "0001110", 
    157 to 192=> "0000000", 193 => "1111111", 194 to 217=> "0000000", 218 => "0001110", 
    219 to 541=> "0000000", 542 => "0000001", 543 to 573=> "0000000", 574 => "0000001", 
    575 to 578=> "0000000", 579 => "0000001", 580 to 610=> "0000000", 611 => "0000001", 
    612 to 703=> "0000000", 704 => "0000001", 705 to 759=> "0000000", 760 => "0000001", 
    761 to 4125=> "0000000", 4126 => "1111111", 4127 to 4157=> "0000000", 4158 => "1111111", 
    4159 to 4162=> "0000000", 4163 => "1111111", 4164 to 4194=> "0000000", 4195 => "1111111", 
    4196 to 4287=> "0000000", 4288 => "1111111", 4289 to 4343=> "0000000", 4344 => "1111111", 
    4345 to 4381=> "0000000", 4382 => "0100001", 4383 to 4390=> "0000000", 4391 => "0000010", 
    4392 to 4413=> "0000000", 4414 => "0100000", 4415 to 4418=> "0000000", 4419 => "0100100", 
    4420 to 4450=> "0000000", 4451 => "0100010", 4452 to 4524=> "0000000", 4525 => "0000001", 
    4526 to 4543=> "0000000", 4544 => "0011111", 4545 to 4599=> "0000000", 4600 => "0011000", 
    4601 to 4914=> "0000000", 4915 => "1111111", 4916 to 5028=> "0000000", 5029 => "1111111", 
    5030 to 5039=> "0000000", 5040 => "1111111", 5041 to 5056=> "0000000", 5057 => "1111111", 
    5058 to 5645=> "0000000", 5646 => "1111111", 5647 to 5659=> "0000000", 5660 => "1111110", 
    5661 to 5675=> "0000000", 5676 => "1111111", 5677 to 5682=> "0000000", 5683 => "0101000", 
    5684 to 5702=> "0000000", 5703 => "0000001", 5704 to 5708=> "0000000", 5709 => "1111111", 
    5710 to 5716=> "0000000", 5717 => "1111111", 5718 to 5731=> "0000000", 5732 => "1111111", 
    5733 to 5754=> "0000000", 5755 => "1111110", 5756 to 5796=> "0000000", 5797 => "0101000", 
    5798 to 5807=> "0000000", 5808 => "0101000", 5809 to 5824=> "0000000", 5825 => "0101000", 
    5826 to 5849=> "0000000", 5850 => "1111111", 5851 to 5871=> "0000000", 5872 => "0000001", 
    5873 to 6676=> "0000000", 6677 => "1111111", 6678 to 6683=> "0000000", 6684 => "1111111", 
    6685 to 6699=> "0000000", 6700 => "0011100", 6701 to 6706=> "0000000", 6707 => "1111111", 
    6708 to 6715=> "0000000", 6716 => "0000001", 6717 to 6740=> "0000000", 6741 => "0011110", 
    6742 to 6811=> "0000000", 6812 => "0000001", 6813 to 6823=> "0000000", 6824 => "0011100", 
    6825 to 6848=> "0000000", 6849 => "1111111", 6850 to 6862=> "0000000", 6863 => "0010111", 
    6864 to 6873=> "0000000", 6874 => "0000001", 6875 to 6879=> "0000000", 6880 => "0000001", 
    6881 to 6888=> "0000000", 6889 => "1111111", 6890 to 7707=> "0000000", 7708 => "0010000", 
    7709 to 7730=> "0000000", 7731 => "1111111", 7732 => "0000011", 7733 to 7739=> "0000000", 
    7740 => "0001111", 7741 to 7756=> "0000000", 7757 => "0010001", 7758 to 7779=> "0000000", 
    7780 => "0010000", 7781 to 7801=> "0000000", 7802 => "0000010", 7803 => "0010001", 
    7804 to 7835=> "0000000", 7836 => "0001110", 7837 to 7897=> "0000000", 7898 => "0001110", 
    7899 to 7910=> "0000000", 7911 => "0000001", 7912 to 10779=> "0000000", 10780 => "0001111", 
    10781 to 10802=> "0000000", 10803 => "1111111", 10804 => "0000010", 10805 to 10811=> "0000000", 
    10812 => "0001110", 10813 to 10828=> "0000000", 10829 => "0010001", 10830 to 10851=> "0000000", 
    10852 => "0010000", 10853 to 10873=> "0000000", 10874 => "0000001", 10875 => "0010000", 
    10876 to 10907=> "0000000", 10908 => "0001110", 10909 to 10969=> "0000000", 10970 => "0001110", 
    10971 to 12315=> "0000000", 12316 => "1111111", 12317 to 12331=> "0000000", 12332 => "0011110", 
    12333 to 12347=> "0000000", 12348 => "0000001", 12349 to 12372=> "0000000", 12373 => "0100000", 
    12374 to 12455=> "0000000", 12456 => "0011111", 12457 to 12494=> "0000000", 12495 => "0011001", 
    12496 to 12505=> "0000000", 12506 => "0000001", 12507 to 12511=> "0000000", 12512 => "0000001", 
    12513 to 13581=> "0000000", 13582 => "0010101", 13583 to 13588=> "0000000", 13589 => "0011111", 
    13590 to 13667=> "0000000", 13668 => "1111110", 13669 to 13690=> "0000000", 13691 => "1111111", 
    13692 to 13707=> "0000000", 13708 => "0011100", 13709 to 13738=> "0000000", 13739 => "0011000", 
    13740 to 13752=> "0000000", 13753 => "0000001", 13754 to 13785=> "0000000", 13786 => "0000010", 
    13787 to 13798=> "0000000", 13799 => "0011100", 13800 => "0000000", 13801 => "0011110", 
    13802 to 16383=> "0000000" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;


Library IEEE;
use IEEE.std_logic_1164.all;

entity Conv1DMac_new401_Aem is
    generic (
        DataWidth : INTEGER := 7;
        AddressRange : INTEGER := 16384;
        AddressWidth : INTEGER := 14);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of Conv1DMac_new401_Aem is
    component Conv1DMac_new401_Aem_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    Conv1DMac_new401_Aem_rom_U :  component Conv1DMac_new401_Aem_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


