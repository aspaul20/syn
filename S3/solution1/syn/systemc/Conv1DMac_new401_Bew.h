// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ==============================================================

#ifndef __Conv1DMac_new401_Bew_H__
#define __Conv1DMac_new401_Bew_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct Conv1DMac_new401_Bew_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 7;
  static const unsigned AddressRange = 16384;
  static const unsigned AddressWidth = 14;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(Conv1DMac_new401_Bew_ram) {
        for (unsigned i = 0; i < 2325 ; i = i + 1) {
            ram[i] = "0b0000000";
        }
        ram[2325] = "0b1111111";
        for (unsigned i = 2326; i < 2332 ; i = i + 1) {
            ram[i] = "0b0000000";
        }
        ram[2332] = "0b0010000";
        for (unsigned i = 2333; i < 2355 ; i = i + 1) {
            ram[i] = "0b0000000";
        }
        ram[2355] = "0b1111111";
        ram[2356] = "0b0000011";
        for (unsigned i = 2357; i < 2364 ; i = i + 1) {
            ram[i] = "0b0000000";
        }
        ram[2364] = "0b0001111";
        for (unsigned i = 2365; i < 2381 ; i = i + 1) {
            ram[i] = "0b0000000";
        }
        ram[2381] = "0b0010001";
        for (unsigned i = 2382; i < 2404 ; i = i + 1) {
            ram[i] = "0b0000000";
        }
        ram[2404] = "0b0010001";
        for (unsigned i = 2405; i < 2426 ; i = i + 1) {
            ram[i] = "0b0000000";
        }
        ram[2426] = "0b0000001";
        ram[2427] = "0b0010001";
        for (unsigned i = 2428; i < 2460 ; i = i + 1) {
            ram[i] = "0b0000000";
        }
        ram[2460] = "0b0001110";
        for (unsigned i = 2461; i < 2497 ; i = i + 1) {
            ram[i] = "0b0000000";
        }
        ram[2497] = "0b1111111";
        for (unsigned i = 2498; i < 2522 ; i = i + 1) {
            ram[i] = "0b0000000";
        }
        ram[2522] = "0b0001110";
        for (unsigned i = 2523; i < 2537 ; i = i + 1) {
            ram[i] = "0b0000000";
        }
        ram[2537] = "0b1111111";
        for (unsigned i = 2538; i < 3349 ; i = i + 1) {
            ram[i] = "0b0000000";
        }
        ram[3349] = "0b1111111";
        for (unsigned i = 3350; i < 3356 ; i = i + 1) {
            ram[i] = "0b0000000";
        }
        ram[3356] = "0b0010001";
        for (unsigned i = 3357; i < 3379 ; i = i + 1) {
            ram[i] = "0b0000000";
        }
        ram[3379] = "0b1111111";
        ram[3380] = "0b0000011";
        for (unsigned i = 3381; i < 3388 ; i = i + 1) {
            ram[i] = "0b0000000";
        }
        ram[3388] = "0b0010000";
        for (unsigned i = 3389; i < 3405 ; i = i + 1) {
            ram[i] = "0b0000000";
        }
        ram[3405] = "0b0010010";
        for (unsigned i = 3406; i < 3428 ; i = i + 1) {
            ram[i] = "0b0000000";
        }
        ram[3428] = "0b0010001";
        for (unsigned i = 3429; i < 3450 ; i = i + 1) {
            ram[i] = "0b0000000";
        }
        ram[3450] = "0b0000010";
        ram[3451] = "0b0010010";
        for (unsigned i = 3452; i < 3468 ; i = i + 1) {
            ram[i] = "0b0000000";
        }
        ram[3468] = "0b1111111";
        for (unsigned i = 3469; i < 3484 ; i = i + 1) {
            ram[i] = "0b0000000";
        }
        ram[3484] = "0b0001111";
        for (unsigned i = 3485; i < 3499 ; i = i + 1) {
            ram[i] = "0b0000000";
        }
        ram[3499] = "0b1111111";
        for (unsigned i = 3500; i < 3521 ; i = i + 1) {
            ram[i] = "0b0000000";
        }
        ram[3521] = "0b1111111";
        for (unsigned i = 3522; i < 3546 ; i = i + 1) {
            ram[i] = "0b0000000";
        }
        ram[3546] = "0b0001111";
        for (unsigned i = 3547; i < 3561 ; i = i + 1) {
            ram[i] = "0b0000000";
        }
        ram[3561] = "0b1111111";
        for (unsigned i = 3562; i < 6428 ; i = i + 1) {
            ram[i] = "0b0000000";
        }
        ram[6428] = "0b1111111";
        for (unsigned i = 6429; i < 6444 ; i = i + 1) {
            ram[i] = "0b0000000";
        }
        ram[6444] = "0b0010101";
        for (unsigned i = 6445; i < 6460 ; i = i + 1) {
            ram[i] = "0b0000000";
        }
        ram[6460] = "0b0000001";
        for (unsigned i = 6461; i < 6485 ; i = i + 1) {
            ram[i] = "0b0000000";
        }
        ram[6485] = "0b0010111";
        for (unsigned i = 6486; i < 6568 ; i = i + 1) {
            ram[i] = "0b0000000";
        }
        ram[6568] = "0b0010110";
        for (unsigned i = 6569; i < 6607 ; i = i + 1) {
            ram[i] = "0b0000000";
        }
        ram[6607] = "0b0010010";
        for (unsigned i = 6608; i < 6618 ; i = i + 1) {
            ram[i] = "0b0000000";
        }
        ram[6618] = "0b0000001";
        for (unsigned i = 6619; i < 6624 ; i = i + 1) {
            ram[i] = "0b0000000";
        }
        ram[6624] = "0b0000001";
        for (unsigned i = 6625; i < 10268 ; i = i + 1) {
            ram[i] = "0b0000000";
        }
        ram[10268] = "0b0001100";
        for (unsigned i = 10269; i < 10292 ; i = i + 1) {
            ram[i] = "0b0000000";
        }
        ram[10292] = "0b0000010";
        for (unsigned i = 10293; i < 10300 ; i = i + 1) {
            ram[i] = "0b0000000";
        }
        ram[10300] = "0b0001011";
        for (unsigned i = 10301; i < 10317 ; i = i + 1) {
            ram[i] = "0b0000000";
        }
        ram[10317] = "0b0001101";
        for (unsigned i = 10318; i < 10340 ; i = i + 1) {
            ram[i] = "0b0000000";
        }
        ram[10340] = "0b0001100";
        for (unsigned i = 10341; i < 10362 ; i = i + 1) {
            ram[i] = "0b0000000";
        }
        ram[10362] = "0b0000001";
        ram[10363] = "0b0001100";
        for (unsigned i = 10364; i < 10396 ; i = i + 1) {
            ram[i] = "0b0000000";
        }
        ram[10396] = "0b0001011";
        for (unsigned i = 10397; i < 10458 ; i = i + 1) {
            ram[i] = "0b0000000";
        }
        ram[10458] = "0b0001011";
        for (unsigned i = 10459; i < 10782 ; i = i + 1) {
            ram[i] = "0b0000000";
        }
        ram[10782] = "0b0011101";
        for (unsigned i = 10783; i < 10791 ; i = i + 1) {
            ram[i] = "0b0000000";
        }
        ram[10791] = "0b0000010";
        for (unsigned i = 10792; i < 10814 ; i = i + 1) {
            ram[i] = "0b0000000";
        }
        ram[10814] = "0b0011101";
        ram[10815] = "0b0000000";
        ram[10816] = "0b0000000";
        ram[10817] = "0b0000000";
        ram[10818] = "0b0000000";
        ram[10819] = "0b0100001";
        for (unsigned i = 10820; i < 10851 ; i = i + 1) {
            ram[i] = "0b0000000";
        }
        ram[10851] = "0b0011111";
        for (unsigned i = 10852; i < 10925 ; i = i + 1) {
            ram[i] = "0b0000000";
        }
        ram[10925] = "0b0000001";
        for (unsigned i = 10926; i < 10944 ; i = i + 1) {
            ram[i] = "0b0000000";
        }
        ram[10944] = "0b0011100";
        for (unsigned i = 10945; i < 11000 ; i = i + 1) {
            ram[i] = "0b0000000";
        }
        ram[11000] = "0b0010110";
        for (unsigned i = 11001; i < 14878 ; i = i + 1) {
            ram[i] = "0b0000000";
        }
        ram[14878] = "0b0011010";
        for (unsigned i = 14879; i < 14887 ; i = i + 1) {
            ram[i] = "0b0000000";
        }
        ram[14887] = "0b0000010";
        for (unsigned i = 14888; i < 14910 ; i = i + 1) {
            ram[i] = "0b0000000";
        }
        ram[14910] = "0b0011010";
        ram[14911] = "0b0000000";
        ram[14912] = "0b0000000";
        ram[14913] = "0b0000000";
        ram[14914] = "0b0000000";
        ram[14915] = "0b0011101";
        for (unsigned i = 14916; i < 14947 ; i = i + 1) {
            ram[i] = "0b0000000";
        }
        ram[14947] = "0b0011011";
        for (unsigned i = 14948; i < 15021 ; i = i + 1) {
            ram[i] = "0b0000000";
        }
        ram[15021] = "0b0000001";
        for (unsigned i = 15022; i < 15040 ; i = i + 1) {
            ram[i] = "0b0000000";
        }
        ram[15040] = "0b0011000";
        for (unsigned i = 15041; i < 15096 ; i = i + 1) {
            ram[i] = "0b0000000";
        }
        ram[15096] = "0b0010011";
        for (unsigned i = 15097; i < 15644 ; i = i + 1) {
            ram[i] = "0b0000000";
        }
        ram[15644] = "0b1111111";
        for (unsigned i = 15645; i < 15660 ; i = i + 1) {
            ram[i] = "0b0000000";
        }
        ram[15660] = "0b0011111";
        for (unsigned i = 15661; i < 15676 ; i = i + 1) {
            ram[i] = "0b0000000";
        }
        ram[15676] = "0b0000001";
        for (unsigned i = 15677; i < 15701 ; i = i + 1) {
            ram[i] = "0b0000000";
        }
        ram[15701] = "0b0100001";
        for (unsigned i = 15702; i < 15772 ; i = i + 1) {
            ram[i] = "0b0000000";
        }
        ram[15772] = "0b0000001";
        for (unsigned i = 15773; i < 15784 ; i = i + 1) {
            ram[i] = "0b0000000";
        }
        ram[15784] = "0b0100000";
        for (unsigned i = 15785; i < 15823 ; i = i + 1) {
            ram[i] = "0b0000000";
        }
        ram[15823] = "0b0011010";
        for (unsigned i = 15824; i < 15834 ; i = i + 1) {
            ram[i] = "0b0000000";
        }
        ram[15834] = "0b0000001";
        for (unsigned i = 15835; i < 15840 ; i = i + 1) {
            ram[i] = "0b0000000";
        }
        ram[15840] = "0b0000001";
        for (unsigned i = 15841; i < 15900 ; i = i + 1) {
            ram[i] = "0b0000000";
        }
        ram[15900] = "0b0001101";
        for (unsigned i = 15901; i < 15924 ; i = i + 1) {
            ram[i] = "0b0000000";
        }
        ram[15924] = "0b0000010";
        for (unsigned i = 15925; i < 15932 ; i = i + 1) {
            ram[i] = "0b0000000";
        }
        ram[15932] = "0b0001100";
        for (unsigned i = 15933; i < 15949 ; i = i + 1) {
            ram[i] = "0b0000000";
        }
        ram[15949] = "0b0001110";
        for (unsigned i = 15950; i < 15972 ; i = i + 1) {
            ram[i] = "0b0000000";
        }
        ram[15972] = "0b0001101";
        for (unsigned i = 15973; i < 15994 ; i = i + 1) {
            ram[i] = "0b0000000";
        }
        ram[15994] = "0b0000001";
        ram[15995] = "0b0001110";
        for (unsigned i = 15996; i < 16028 ; i = i + 1) {
            ram[i] = "0b0000000";
        }
        ram[16028] = "0b0001100";
        for (unsigned i = 16029; i < 16037 ; i = i + 1) {
            ram[i] = "0b0000000";
        }
        ram[16037] = "0b0000001";
        for (unsigned i = 16038; i < 16090 ; i = i + 1) {
            ram[i] = "0b0000000";
        }
        ram[16090] = "0b0001011";
        for (unsigned i = 16091; i < 16103 ; i = i + 1) {
            ram[i] = "0b0000000";
        }
        ram[16103] = "0b0000001";
        for (unsigned i = 16104; i < 16384 ; i = i + 1) {
            ram[i] = "0b0000000";
        }


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(Conv1DMac_new401_Bew) {


static const unsigned DataWidth = 7;
static const unsigned AddressRange = 16384;
static const unsigned AddressWidth = 14;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


Conv1DMac_new401_Bew_ram* meminst;


SC_CTOR(Conv1DMac_new401_Bew) {
meminst = new Conv1DMac_new401_Bew_ram("Conv1DMac_new401_Bew_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);

meminst->reset(reset);
meminst->clk(clk);
}
~Conv1DMac_new401_Bew() {
    delete meminst;
}


};//endmodule
#endif
