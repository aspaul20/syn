// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _Conv1DMac_new401_HH_
#define _Conv1DMac_new401_HH_

#include "systemc.h"
#include "AESL_pkg.h"

#include "computeS3_mux_646yd2_x.h"
#include "Conv1DMac_new401_Aem.h"
#include "Conv1DMac_new401_Bew.h"
#include "Conv1DMac_new401_CeG.h"
#include "Conv1DMac_new401_DeQ.h"

namespace ap_rtl {

struct Conv1DMac_new401 : public sc_module {
    // Port declarations 16
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_in< sc_logic > start_full_n;
    sc_out< sc_logic > ap_done;
    sc_in< sc_logic > ap_continue;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_out< sc_logic > start_out;
    sc_out< sc_logic > start_write;
    sc_in< sc_lv<8> > in_V_V_dout;
    sc_in< sc_logic > in_V_V_empty_n;
    sc_out< sc_logic > in_V_V_read;
    sc_out< sc_lv<32> > out_V_V_din;
    sc_in< sc_logic > out_V_V_full_n;
    sc_out< sc_logic > out_V_V_write;
    sc_signal< sc_lv<8> > ap_var_for_const0;
    sc_signal< sc_lv<8> > ap_var_for_const1;
    sc_signal< sc_lv<8> > ap_var_for_const2;
    sc_signal< sc_lv<8> > ap_var_for_const3;


    // Module declarations
    Conv1DMac_new401(sc_module_name name);
    SC_HAS_PROCESS(Conv1DMac_new401);

    ~Conv1DMac_new401();

    sc_trace_file* mVcdFile;

    Conv1DMac_new401_Aem* weights12_m_weights_3_U;
    Conv1DMac_new401_Bew* weights12_m_weights_2_U;
    Conv1DMac_new401_CeG* weights12_m_weights_1_U;
    Conv1DMac_new401_DeQ* weights12_m_weights_s_U;
    computeS3_mux_646yd2_x<1,1,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,6,8>* computeS3_mux_646yd2_x_U47;
    computeS3_mux_646yd2_x<1,1,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,6,8>* computeS3_mux_646yd2_x_U48;
    computeS3_mux_646yd2_x<1,1,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,6,8>* computeS3_mux_646yd2_x_U49;
    computeS3_mux_646yd2_x<1,1,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,6,8>* computeS3_mux_646yd2_x_U50;
    sc_signal< sc_logic > real_start;
    sc_signal< sc_logic > start_once_reg;
    sc_signal< sc_logic > ap_done_reg;
    sc_signal< sc_lv<3> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_logic > internal_ap_ready;
    sc_signal< sc_lv<14> > weights12_m_weights_3_address0;
    sc_signal< sc_logic > weights12_m_weights_3_ce0;
    sc_signal< sc_lv<7> > weights12_m_weights_3_q0;
    sc_signal< sc_lv<14> > weights12_m_weights_2_address0;
    sc_signal< sc_logic > weights12_m_weights_2_ce0;
    sc_signal< sc_lv<7> > weights12_m_weights_2_q0;
    sc_signal< sc_lv<14> > weights12_m_weights_1_address0;
    sc_signal< sc_logic > weights12_m_weights_1_ce0;
    sc_signal< sc_lv<7> > weights12_m_weights_1_q0;
    sc_signal< sc_lv<14> > weights12_m_weights_s_address0;
    sc_signal< sc_logic > weights12_m_weights_s_ce0;
    sc_signal< sc_lv<7> > weights12_m_weights_s_q0;
    sc_signal< sc_logic > in_V_V_blk_n;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter2;
    sc_signal< bool > ap_block_pp0_stage0;
    sc_signal< sc_lv<1> > exitcond_flatten_reg_1431;
    sc_signal< sc_lv<1> > exitcond_flatten_reg_1431_pp0_iter1_reg;
    sc_signal< sc_logic > out_V_V_blk_n;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter4;
    sc_signal< sc_lv<1> > tmp_203_reg_1458;
    sc_signal< sc_lv<1> > tmp_203_reg_1458_pp0_iter3_reg;
    sc_signal< sc_lv<25> > indvar_flatten1_reg_211;
    sc_signal< sc_lv<16> > indvar_flatten_reg_222;
    sc_signal< sc_lv<7> > nm_reg_233;
    sc_signal< sc_lv<9> > sf_reg_244;
    sc_signal< sc_lv<1> > exitcond_flatten_fu_287_p2;
    sc_signal< sc_logic > ap_CS_fsm_pp0_stage0;
    sc_signal< bool > ap_block_state2_pp0_stage0_iter0;
    sc_signal< bool > ap_block_state3_pp0_stage0_iter1;
    sc_signal< bool > ap_block_state4_pp0_stage0_iter2;
    sc_signal< bool > ap_block_state5_pp0_stage0_iter3;
    sc_signal< bool > ap_block_state6_pp0_stage0_iter4;
    sc_signal< bool > ap_block_pp0_stage0_11001;
    sc_signal< sc_lv<25> > indvar_flatten_next1_fu_293_p2;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter0;
    sc_signal< sc_lv<6> > nm_t_mid2_fu_387_p3;
    sc_signal< sc_lv<6> > nm_t_mid2_reg_1440;
    sc_signal< sc_lv<6> > nm_t_mid2_reg_1440_pp0_iter1_reg;
    sc_signal< sc_lv<6> > nm_t_mid2_reg_1440_pp0_iter2_reg;
    sc_signal< sc_lv<7> > nm_mid2_fu_395_p3;
    sc_signal< sc_lv<14> > tmp_183_fu_407_p2;
    sc_signal< sc_lv<14> > tmp_183_reg_1453;
    sc_signal< sc_lv<1> > tmp_203_fu_413_p2;
    sc_signal< sc_lv<1> > tmp_203_reg_1458_pp0_iter1_reg;
    sc_signal< sc_lv<1> > tmp_203_reg_1458_pp0_iter2_reg;
    sc_signal< sc_lv<9> > sf_2_fu_419_p2;
    sc_signal< sc_lv<16> > indvar_flatten_next_fu_431_p3;
    sc_signal< sc_lv<8> > tmp_140_reg_1492;
    sc_signal< sc_lv<1> > tmp_981_reg_1497;
    sc_signal< sc_lv<1> > tmp_189_fu_514_p2;
    sc_signal< sc_lv<1> > tmp_189_reg_1502;
    sc_signal< sc_lv<8> > tmp_142_reg_1507;
    sc_signal< sc_lv<1> > tmp_984_reg_1512;
    sc_signal< sc_lv<1> > tmp_279_1_fu_584_p2;
    sc_signal< sc_lv<1> > tmp_279_1_reg_1517;
    sc_signal< sc_lv<8> > tmp_144_reg_1522;
    sc_signal< sc_lv<1> > tmp_987_reg_1527;
    sc_signal< sc_lv<1> > tmp_279_2_fu_654_p2;
    sc_signal< sc_lv<1> > tmp_279_2_reg_1532;
    sc_signal< sc_lv<8> > tmp_146_reg_1537;
    sc_signal< sc_lv<1> > tmp_990_reg_1542;
    sc_signal< sc_lv<1> > tmp_279_3_fu_724_p2;
    sc_signal< sc_lv<1> > tmp_279_3_reg_1547;
    sc_signal< sc_lv<8> > p_Val2_s_fu_971_p2;
    sc_signal< sc_lv<8> > p_Val2_s_reg_1552;
    sc_signal< sc_lv<8> > p_Val2_23_1_fu_1110_p2;
    sc_signal< sc_lv<8> > p_Val2_23_1_reg_1557;
    sc_signal< sc_lv<8> > p_Val2_23_2_fu_1249_p2;
    sc_signal< sc_lv<8> > p_Val2_23_2_reg_1562;
    sc_signal< sc_lv<8> > p_Val2_23_3_fu_1388_p2;
    sc_signal< sc_lv<8> > p_Val2_23_3_reg_1567;
    sc_signal< bool > ap_block_state1;
    sc_signal< bool > ap_block_pp0_stage0_subdone;
    sc_signal< sc_logic > ap_condition_pp0_exit_iter0_state2;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter1;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter3;
    sc_signal< sc_lv<64> > tmp_184_fu_439_p1;
    sc_signal< bool > ap_block_pp0_stage0_01001;
    sc_signal< sc_lv<8> > macRegisters_0_V_6_fu_130;
    sc_signal< sc_lv<8> > macRegisters_0_V_fu_756_p2;
    sc_signal< sc_lv<8> > macRegisters_1_V_6_fu_134;
    sc_signal< sc_lv<8> > macRegisters_1_V_fu_775_p2;
    sc_signal< sc_lv<8> > macRegisters_2_V_6_fu_138;
    sc_signal< sc_lv<8> > macRegisters_2_V_fu_794_p2;
    sc_signal< sc_lv<8> > macRegisters_3_V_6_fu_142;
    sc_signal< sc_lv<8> > macRegisters_3_V_fu_813_p2;
    sc_signal< sc_lv<6> > tmp_fu_275_p1;
    sc_signal< sc_lv<1> > exitcond_flatten1_fu_299_p2;
    sc_signal< sc_lv<14> > tmp_s_fu_279_p3;
    sc_signal< sc_lv<1> > tmp_886_fu_335_p2;
    sc_signal< sc_lv<1> > not_exitcond_flatten_fu_329_p2;
    sc_signal< sc_lv<7> > nm_mid_fu_305_p3;
    sc_signal< sc_lv<1> > tmp_211_mid_fu_341_p2;
    sc_signal< sc_lv<1> > tmp_861_fu_353_p2;
    sc_signal< sc_lv<7> > nm_2_fu_347_p2;
    sc_signal< sc_lv<6> > tmp_979_fu_367_p1;
    sc_signal< sc_lv<14> > tmp_210_mid1_fu_371_p3;
    sc_signal< sc_lv<14> > tmp_210_mid_fu_313_p3;
    sc_signal< sc_lv<6> > nm_t_mid_fu_321_p3;
    sc_signal< sc_lv<9> > sf_mid2_fu_359_p3;
    sc_signal< sc_lv<14> > sf_cast1_fu_403_p1;
    sc_signal< sc_lv<14> > tmp_210_mid2_fu_379_p3;
    sc_signal< sc_lv<16> > indvar_flatten_op_fu_425_p2;
    sc_signal< sc_lv<7> > p_Val2_s_186_fu_454_p0;
    sc_signal< sc_lv<8> > p_Val2_s_186_fu_454_p1;
    sc_signal< sc_lv<15> > p_08_cast_fu_446_p1;
    sc_signal< sc_lv<15> > p_Val2_s_186_fu_454_p2;
    sc_signal< sc_lv<1> > tmp_982_fu_486_p1;
    sc_signal< sc_lv<1> > tmp_980_fu_460_p3;
    sc_signal< sc_lv<5> > tmp_187_fu_496_p4;
    sc_signal< sc_lv<1> > tmp_186_fu_490_p2;
    sc_signal< sc_lv<6> > tmp_188_fu_506_p3;
    sc_signal< sc_lv<7> > p_Val2_1_fu_524_p0;
    sc_signal< sc_lv<8> > p_Val2_1_fu_524_p1;
    sc_signal< sc_lv<15> > p_Val2_1_fu_524_p2;
    sc_signal< sc_lv<1> > tmp_985_fu_556_p1;
    sc_signal< sc_lv<1> > tmp_983_fu_530_p3;
    sc_signal< sc_lv<5> > tmp_193_fu_566_p4;
    sc_signal< sc_lv<1> > tmp_192_fu_560_p2;
    sc_signal< sc_lv<6> > tmp_194_fu_576_p3;
    sc_signal< sc_lv<7> > p_Val2_2_fu_594_p0;
    sc_signal< sc_lv<8> > p_Val2_2_fu_594_p1;
    sc_signal< sc_lv<15> > p_Val2_2_fu_594_p2;
    sc_signal< sc_lv<1> > tmp_988_fu_626_p1;
    sc_signal< sc_lv<1> > tmp_986_fu_600_p3;
    sc_signal< sc_lv<5> > tmp_197_fu_636_p4;
    sc_signal< sc_lv<1> > tmp_196_fu_630_p2;
    sc_signal< sc_lv<6> > tmp_198_fu_646_p3;
    sc_signal< sc_lv<7> > p_Val2_3_fu_664_p0;
    sc_signal< sc_lv<8> > p_Val2_3_fu_664_p1;
    sc_signal< sc_lv<15> > p_Val2_3_fu_664_p2;
    sc_signal< sc_lv<1> > tmp_991_fu_696_p1;
    sc_signal< sc_lv<1> > tmp_989_fu_670_p3;
    sc_signal< sc_lv<5> > tmp_201_fu_706_p4;
    sc_signal< sc_lv<1> > tmp_200_fu_700_p2;
    sc_signal< sc_lv<6> > tmp_202_fu_716_p3;
    sc_signal< sc_lv<1> > qb_assign_2_fu_742_p2;
    sc_signal< sc_lv<8> > tmp_190_fu_746_p1;
    sc_signal< sc_lv<8> > tmp1_fu_750_p2;
    sc_signal< sc_lv<1> > qb_assign_2_1_fu_761_p2;
    sc_signal< sc_lv<8> > tmp_280_1_fu_765_p1;
    sc_signal< sc_lv<8> > tmp2_fu_769_p2;
    sc_signal< sc_lv<1> > qb_assign_2_2_fu_780_p2;
    sc_signal< sc_lv<8> > tmp_280_2_fu_784_p1;
    sc_signal< sc_lv<8> > tmp3_fu_788_p2;
    sc_signal< sc_lv<1> > qb_assign_2_3_fu_799_p2;
    sc_signal< sc_lv<8> > tmp_280_3_fu_803_p1;
    sc_signal< sc_lv<8> > tmp4_fu_807_p2;
    sc_signal< sc_lv<8> > tmp_147_fu_838_p66;
    sc_signal< sc_lv<8> > tmp_148_fu_977_p66;
    sc_signal< sc_lv<8> > tmp_149_fu_1116_p66;
    sc_signal< sc_lv<8> > tmp_150_fu_1255_p66;
    sc_signal< sc_logic > ap_CS_fsm_state7;
    sc_signal< sc_lv<3> > ap_NS_fsm;
    sc_signal< sc_logic > ap_idle_pp0;
    sc_signal< sc_logic > ap_enable_pp0;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<3> ap_ST_fsm_state1;
    static const sc_lv<3> ap_ST_fsm_pp0_stage0;
    static const sc_lv<3> ap_ST_fsm_state7;
    static const bool ap_const_boolean_1;
    static const sc_lv<32> ap_const_lv32_0;
    static const bool ap_const_boolean_0;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<25> ap_const_lv25_0;
    static const sc_lv<16> ap_const_lv16_0;
    static const sc_lv<7> ap_const_lv7_0;
    static const sc_lv<9> ap_const_lv9_0;
    static const sc_lv<8> ap_const_lv8_0;
    static const sc_lv<25> ap_const_lv25_1000000;
    static const sc_lv<25> ap_const_lv25_1;
    static const sc_lv<16> ap_const_lv16_4000;
    static const sc_lv<14> ap_const_lv14_0;
    static const sc_lv<6> ap_const_lv6_0;
    static const sc_lv<9> ap_const_lv9_100;
    static const sc_lv<7> ap_const_lv7_1;
    static const sc_lv<9> ap_const_lv9_FF;
    static const sc_lv<9> ap_const_lv9_1;
    static const sc_lv<16> ap_const_lv16_1;
    static const sc_lv<32> ap_const_lv32_E;
    static const sc_lv<32> ap_const_lv32_7;
    static const sc_lv<32> ap_const_lv32_6;
    static const sc_lv<32> ap_const_lv32_5;
    static const sc_lv<8> ap_const_lv8_FF;
    static const sc_lv<8> ap_const_lv8_1;
    static const sc_lv<8> ap_const_lv8_FD;
    static const sc_lv<32> ap_const_lv32_2;
    // Thread declarations
    void thread_ap_var_for_const0();
    void thread_ap_var_for_const1();
    void thread_ap_var_for_const2();
    void thread_ap_var_for_const3();
    void thread_ap_clk_no_reset_();
    void thread_ap_CS_fsm_pp0_stage0();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state7();
    void thread_ap_block_pp0_stage0();
    void thread_ap_block_pp0_stage0_01001();
    void thread_ap_block_pp0_stage0_11001();
    void thread_ap_block_pp0_stage0_subdone();
    void thread_ap_block_state1();
    void thread_ap_block_state2_pp0_stage0_iter0();
    void thread_ap_block_state3_pp0_stage0_iter1();
    void thread_ap_block_state4_pp0_stage0_iter2();
    void thread_ap_block_state5_pp0_stage0_iter3();
    void thread_ap_block_state6_pp0_stage0_iter4();
    void thread_ap_condition_pp0_exit_iter0_state2();
    void thread_ap_done();
    void thread_ap_enable_pp0();
    void thread_ap_idle();
    void thread_ap_idle_pp0();
    void thread_ap_ready();
    void thread_exitcond_flatten1_fu_299_p2();
    void thread_exitcond_flatten_fu_287_p2();
    void thread_in_V_V_blk_n();
    void thread_in_V_V_read();
    void thread_indvar_flatten_next1_fu_293_p2();
    void thread_indvar_flatten_next_fu_431_p3();
    void thread_indvar_flatten_op_fu_425_p2();
    void thread_internal_ap_ready();
    void thread_macRegisters_0_V_fu_756_p2();
    void thread_macRegisters_1_V_fu_775_p2();
    void thread_macRegisters_2_V_fu_794_p2();
    void thread_macRegisters_3_V_fu_813_p2();
    void thread_nm_2_fu_347_p2();
    void thread_nm_mid2_fu_395_p3();
    void thread_nm_mid_fu_305_p3();
    void thread_nm_t_mid2_fu_387_p3();
    void thread_nm_t_mid_fu_321_p3();
    void thread_not_exitcond_flatten_fu_329_p2();
    void thread_out_V_V_blk_n();
    void thread_out_V_V_din();
    void thread_out_V_V_write();
    void thread_p_08_cast_fu_446_p1();
    void thread_p_Val2_1_fu_524_p0();
    void thread_p_Val2_1_fu_524_p1();
    void thread_p_Val2_1_fu_524_p2();
    void thread_p_Val2_23_1_fu_1110_p2();
    void thread_p_Val2_23_2_fu_1249_p2();
    void thread_p_Val2_23_3_fu_1388_p2();
    void thread_p_Val2_2_fu_594_p0();
    void thread_p_Val2_2_fu_594_p1();
    void thread_p_Val2_2_fu_594_p2();
    void thread_p_Val2_3_fu_664_p0();
    void thread_p_Val2_3_fu_664_p1();
    void thread_p_Val2_3_fu_664_p2();
    void thread_p_Val2_s_186_fu_454_p0();
    void thread_p_Val2_s_186_fu_454_p1();
    void thread_p_Val2_s_186_fu_454_p2();
    void thread_p_Val2_s_fu_971_p2();
    void thread_qb_assign_2_1_fu_761_p2();
    void thread_qb_assign_2_2_fu_780_p2();
    void thread_qb_assign_2_3_fu_799_p2();
    void thread_qb_assign_2_fu_742_p2();
    void thread_real_start();
    void thread_sf_2_fu_419_p2();
    void thread_sf_cast1_fu_403_p1();
    void thread_sf_mid2_fu_359_p3();
    void thread_start_out();
    void thread_start_write();
    void thread_tmp1_fu_750_p2();
    void thread_tmp2_fu_769_p2();
    void thread_tmp3_fu_788_p2();
    void thread_tmp4_fu_807_p2();
    void thread_tmp_183_fu_407_p2();
    void thread_tmp_184_fu_439_p1();
    void thread_tmp_186_fu_490_p2();
    void thread_tmp_187_fu_496_p4();
    void thread_tmp_188_fu_506_p3();
    void thread_tmp_189_fu_514_p2();
    void thread_tmp_190_fu_746_p1();
    void thread_tmp_192_fu_560_p2();
    void thread_tmp_193_fu_566_p4();
    void thread_tmp_194_fu_576_p3();
    void thread_tmp_196_fu_630_p2();
    void thread_tmp_197_fu_636_p4();
    void thread_tmp_198_fu_646_p3();
    void thread_tmp_200_fu_700_p2();
    void thread_tmp_201_fu_706_p4();
    void thread_tmp_202_fu_716_p3();
    void thread_tmp_203_fu_413_p2();
    void thread_tmp_210_mid1_fu_371_p3();
    void thread_tmp_210_mid2_fu_379_p3();
    void thread_tmp_210_mid_fu_313_p3();
    void thread_tmp_211_mid_fu_341_p2();
    void thread_tmp_279_1_fu_584_p2();
    void thread_tmp_279_2_fu_654_p2();
    void thread_tmp_279_3_fu_724_p2();
    void thread_tmp_280_1_fu_765_p1();
    void thread_tmp_280_2_fu_784_p1();
    void thread_tmp_280_3_fu_803_p1();
    void thread_tmp_861_fu_353_p2();
    void thread_tmp_886_fu_335_p2();
    void thread_tmp_979_fu_367_p1();
    void thread_tmp_980_fu_460_p3();
    void thread_tmp_982_fu_486_p1();
    void thread_tmp_983_fu_530_p3();
    void thread_tmp_985_fu_556_p1();
    void thread_tmp_986_fu_600_p3();
    void thread_tmp_988_fu_626_p1();
    void thread_tmp_989_fu_670_p3();
    void thread_tmp_991_fu_696_p1();
    void thread_tmp_fu_275_p1();
    void thread_tmp_s_fu_279_p3();
    void thread_weights12_m_weights_1_address0();
    void thread_weights12_m_weights_1_ce0();
    void thread_weights12_m_weights_2_address0();
    void thread_weights12_m_weights_2_ce0();
    void thread_weights12_m_weights_3_address0();
    void thread_weights12_m_weights_3_ce0();
    void thread_weights12_m_weights_s_address0();
    void thread_weights12_m_weights_s_ce0();
    void thread_ap_NS_fsm();
};

}

using namespace ap_rtl;

#endif
