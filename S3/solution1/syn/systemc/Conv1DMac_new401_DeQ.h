// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ==============================================================

#ifndef __Conv1DMac_new401_DeQ_H__
#define __Conv1DMac_new401_DeQ_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct Conv1DMac_new401_DeQ_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 7;
  static const unsigned AddressRange = 16384;
  static const unsigned AddressWidth = 14;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(Conv1DMac_new401_DeQ_ram) {
        for (unsigned i = 0; i < 1564 ; i = i + 1) {
            ram[i] = "0b0000000";
        }
        ram[1564] = "0b0001111";
        for (unsigned i = 1565; i < 1588 ; i = i + 1) {
            ram[i] = "0b0000000";
        }
        ram[1588] = "0b0000010";
        for (unsigned i = 1589; i < 1596 ; i = i + 1) {
            ram[i] = "0b0000000";
        }
        ram[1596] = "0b0001101";
        for (unsigned i = 1597; i < 1613 ; i = i + 1) {
            ram[i] = "0b0000000";
        }
        ram[1613] = "0b0010000";
        for (unsigned i = 1614; i < 1636 ; i = i + 1) {
            ram[i] = "0b0000000";
        }
        ram[1636] = "0b0001111";
        for (unsigned i = 1637; i < 1658 ; i = i + 1) {
            ram[i] = "0b0000000";
        }
        ram[1658] = "0b0000001";
        ram[1659] = "0b0001111";
        for (unsigned i = 1660; i < 1692 ; i = i + 1) {
            ram[i] = "0b0000000";
        }
        ram[1692] = "0b0001101";
        for (unsigned i = 1693; i < 1754 ; i = i + 1) {
            ram[i] = "0b0000000";
        }
        ram[1754] = "0b0001101";
        for (unsigned i = 1755; i < 2844 ; i = i + 1) {
            ram[i] = "0b0000000";
        }
        ram[2844] = "0b0001010";
        for (unsigned i = 2845; i < 2868 ; i = i + 1) {
            ram[i] = "0b0000000";
        }
        ram[2868] = "0b0000010";
        for (unsigned i = 2869; i < 2876 ; i = i + 1) {
            ram[i] = "0b0000000";
        }
        ram[2876] = "0b0001010";
        for (unsigned i = 2877; i < 2893 ; i = i + 1) {
            ram[i] = "0b0000000";
        }
        ram[2893] = "0b0001011";
        for (unsigned i = 2894; i < 2916 ; i = i + 1) {
            ram[i] = "0b0000000";
        }
        ram[2916] = "0b0001011";
        for (unsigned i = 2917; i < 2938 ; i = i + 1) {
            ram[i] = "0b0000000";
        }
        ram[2938] = "0b0000001";
        ram[2939] = "0b0001011";
        for (unsigned i = 2940; i < 2972 ; i = i + 1) {
            ram[i] = "0b0000000";
        }
        ram[2972] = "0b0001001";
        for (unsigned i = 2973; i < 3034 ; i = i + 1) {
            ram[i] = "0b0000000";
        }
        ram[3034] = "0b0001001";
        for (unsigned i = 3035; i < 5390 ; i = i + 1) {
            ram[i] = "0b0000000";
        }
        ram[5390] = "0b0010101";
        for (unsigned i = 5391; i < 5397 ; i = i + 1) {
            ram[i] = "0b0000000";
        }
        ram[5397] = "0b0011110";
        for (unsigned i = 5398; i < 5436 ; i = i + 1) {
            ram[i] = "0b0000000";
        }
        ram[5436] = "0b0000001";
        for (unsigned i = 5437; i < 5476 ; i = i + 1) {
            ram[i] = "0b0000000";
        }
        ram[5476] = "0b1111111";
        for (unsigned i = 5477; i < 5499 ; i = i + 1) {
            ram[i] = "0b0000000";
        }
        ram[5499] = "0b1111111";
        for (unsigned i = 5500; i < 5516 ; i = i + 1) {
            ram[i] = "0b0000000";
        }
        ram[5516] = "0b0011100";
        for (unsigned i = 5517; i < 5547 ; i = i + 1) {
            ram[i] = "0b0000000";
        }
        ram[5547] = "0b0011000";
        for (unsigned i = 5548; i < 5561 ; i = i + 1) {
            ram[i] = "0b0000000";
        }
        ram[5561] = "0b0000001";
        for (unsigned i = 5562; i < 5594 ; i = i + 1) {
            ram[i] = "0b0000000";
        }
        ram[5594] = "0b0000010";
        for (unsigned i = 5595; i < 5607 ; i = i + 1) {
            ram[i] = "0b0000000";
        }
        ram[5607] = "0b0011100";
        ram[5608] = "0b0000000";
        ram[5609] = "0b0011110";
        for (unsigned i = 5610; i < 5902 ; i = i + 1) {
            ram[i] = "0b0000000";
        }
        ram[5902] = "0b0001101";
        for (unsigned i = 5903; i < 5909 ; i = i + 1) {
            ram[i] = "0b0000000";
        }
        ram[5909] = "0b0010011";
        for (unsigned i = 5910; i < 5988 ; i = i + 1) {
            ram[i] = "0b0000000";
        }
        ram[5988] = "0b1111111";
        for (unsigned i = 5989; i < 6011 ; i = i + 1) {
            ram[i] = "0b0000000";
        }
        ram[6011] = "0b1111111";
        for (unsigned i = 6012; i < 6028 ; i = i + 1) {
            ram[i] = "0b0000000";
        }
        ram[6028] = "0b0010010";
        for (unsigned i = 6029; i < 6059 ; i = i + 1) {
            ram[i] = "0b0000000";
        }
        ram[6059] = "0b0001111";
        for (unsigned i = 6060; i < 6073 ; i = i + 1) {
            ram[i] = "0b0000000";
        }
        ram[6073] = "0b0000001";
        for (unsigned i = 6074; i < 6106 ; i = i + 1) {
            ram[i] = "0b0000000";
        }
        ram[6106] = "0b0000001";
        for (unsigned i = 6107; i < 6119 ; i = i + 1) {
            ram[i] = "0b0000000";
        }
        ram[6119] = "0b0010010";
        ram[6120] = "0b0000000";
        ram[6121] = "0b0010011";
        for (unsigned i = 6122; i < 6677 ; i = i + 1) {
            ram[i] = "0b0000000";
        }
        ram[6677] = "0b0000001";
        for (unsigned i = 6678; i < 6707 ; i = i + 1) {
            ram[i] = "0b0000000";
        }
        ram[6707] = "0b0100111";
        for (unsigned i = 6708; i < 6716 ; i = i + 1) {
            ram[i] = "0b0000000";
        }
        ram[6716] = "0b0000010";
        for (unsigned i = 6717; i < 6727 ; i = i + 1) {
            ram[i] = "0b0000000";
        }
        ram[6727] = "0b0000001";
        for (unsigned i = 6728; i < 6756 ; i = i + 1) {
            ram[i] = "0b0000000";
        }
        ram[6756] = "0b0000001";
        for (unsigned i = 6757; i < 6796 ; i = i + 1) {
            ram[i] = "0b0000000";
        }
        ram[6796] = "0b0000001";
        for (unsigned i = 6797; i < 6812 ; i = i + 1) {
            ram[i] = "0b0000000";
        }
        ram[6812] = "0b0000001";
        for (unsigned i = 6813; i < 6821 ; i = i + 1) {
            ram[i] = "0b0000000";
        }
        ram[6821] = "0b0100111";
        for (unsigned i = 6822; i < 6827 ; i = i + 1) {
            ram[i] = "0b0000000";
        }
        ram[6827] = "0b0000001";
        ram[6828] = "0b0000000";
        ram[6829] = "0b0000000";
        ram[6830] = "0b0000000";
        ram[6831] = "0b0000000";
        ram[6832] = "0b0100111";
        for (unsigned i = 6833; i < 6849 ; i = i + 1) {
            ram[i] = "0b0000000";
        }
        ram[6849] = "0b0100111";
        for (unsigned i = 6850; i < 6874 ; i = i + 1) {
            ram[i] = "0b0000000";
        }
        ram[6874] = "0b0000001";
        for (unsigned i = 6875; i < 6887 ; i = i + 1) {
            ram[i] = "0b0000000";
        }
        ram[6887] = "0b0000001";
        ram[6888] = "0b0000000";
        ram[6889] = "0b0000001";
        for (unsigned i = 6890; i < 6896 ; i = i + 1) {
            ram[i] = "0b0000000";
        }
        ram[6896] = "0b0000001";
        for (unsigned i = 6897; i < 14108 ; i = i + 1) {
            ram[i] = "0b0000000";
        }
        ram[14108] = "0b0000101";
        for (unsigned i = 14109; i < 14124 ; i = i + 1) {
            ram[i] = "0b0000000";
        }
        ram[14124] = "0b0000001";
        for (unsigned i = 14125; i < 14131 ; i = i + 1) {
            ram[i] = "0b0000000";
        }
        ram[14131] = "0b0000001";
        ram[14132] = "0b0000001";
        for (unsigned i = 14133; i < 14140 ; i = i + 1) {
            ram[i] = "0b0000000";
        }
        ram[14140] = "0b0000101";
        for (unsigned i = 14141; i < 14157 ; i = i + 1) {
            ram[i] = "0b0000000";
        }
        ram[14157] = "0b0000101";
        for (unsigned i = 14158; i < 14165 ; i = i + 1) {
            ram[i] = "0b0000000";
        }
        ram[14165] = "0b0000001";
        for (unsigned i = 14166; i < 14180 ; i = i + 1) {
            ram[i] = "0b0000000";
        }
        ram[14180] = "0b0000101";
        for (unsigned i = 14181; i < 14202 ; i = i + 1) {
            ram[i] = "0b0000000";
        }
        ram[14202] = "0b0000001";
        ram[14203] = "0b0000101";
        for (unsigned i = 14204; i < 14236 ; i = i + 1) {
            ram[i] = "0b0000000";
        }
        ram[14236] = "0b0000101";
        for (unsigned i = 14237; i < 14245 ; i = i + 1) {
            ram[i] = "0b0000000";
        }
        ram[14245] = "0b0000001";
        ram[14246] = "0b0000000";
        ram[14247] = "0b0000000";
        ram[14248] = "0b0000001";
        for (unsigned i = 14249; i < 14256 ; i = i + 1) {
            ram[i] = "0b0000000";
        }
        ram[14256] = "0b0000001";
        for (unsigned i = 14257; i < 14273 ; i = i + 1) {
            ram[i] = "0b0000000";
        }
        ram[14273] = "0b0000001";
        for (unsigned i = 14274; i < 14287 ; i = i + 1) {
            ram[i] = "0b0000000";
        }
        ram[14287] = "0b0000001";
        for (unsigned i = 14288; i < 14298 ; i = i + 1) {
            ram[i] = "0b0000000";
        }
        ram[14298] = "0b0000101";
        for (unsigned i = 14299; i < 15132 ; i = i + 1) {
            ram[i] = "0b0000000";
        }
        ram[15132] = "0b1111110";
        for (unsigned i = 15133; i < 15148 ; i = i + 1) {
            ram[i] = "0b0000000";
        }
        ram[15148] = "0b0011011";
        for (unsigned i = 15149; i < 15164 ; i = i + 1) {
            ram[i] = "0b0000000";
        }
        ram[15164] = "0b0000001";
        for (unsigned i = 15165; i < 15181 ; i = i + 1) {
            ram[i] = "0b0000000";
        }
        ram[15181] = "0b1111111";
        for (unsigned i = 15182; i < 15189 ; i = i + 1) {
            ram[i] = "0b0000000";
        }
        ram[15189] = "0b0011101";
        for (unsigned i = 15190; i < 15204 ; i = i + 1) {
            ram[i] = "0b0000000";
        }
        ram[15204] = "0b1111111";
        for (unsigned i = 15205; i < 15272 ; i = i + 1) {
            ram[i] = "0b0000000";
        }
        ram[15272] = "0b0011100";
        for (unsigned i = 15273; i < 15311 ; i = i + 1) {
            ram[i] = "0b0000000";
        }
        ram[15311] = "0b0010110";
        for (unsigned i = 15312; i < 15322 ; i = i + 1) {
            ram[i] = "0b0000000";
        }
        ram[15322] = "0b0000001";
        for (unsigned i = 15323; i < 15328 ; i = i + 1) {
            ram[i] = "0b0000000";
        }
        ram[15328] = "0b0000001";
        for (unsigned i = 15329; i < 16384 ; i = i + 1) {
            ram[i] = "0b0000000";
        }


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(Conv1DMac_new401_DeQ) {


static const unsigned DataWidth = 7;
static const unsigned AddressRange = 16384;
static const unsigned AddressWidth = 14;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


Conv1DMac_new401_DeQ_ram* meminst;


SC_CTOR(Conv1DMac_new401_DeQ) {
meminst = new Conv1DMac_new401_DeQ_ram("Conv1DMac_new401_DeQ_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);

meminst->reset(reset);
meminst->clk(clk);
}
~Conv1DMac_new401_DeQ() {
    delete meminst;
}


};//endmodule
#endif
