// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ==============================================================

#ifndef __Conv1DMac_new397_wdI_H__
#define __Conv1DMac_new397_wdI_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct Conv1DMac_new397_wdI_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 5;
  static const unsigned AddressRange = 16384;
  static const unsigned AddressWidth = 14;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(Conv1DMac_new397_wdI_ram) {
        for (unsigned i = 0; i < 772 ; i = i + 1) {
            ram[i] = "0b00000";
        }
        ram[772] = "0b11111";
        for (unsigned i = 773; i < 778 ; i = i + 1) {
            ram[i] = "0b00000";
        }
        ram[778] = "0b11111";
        ram[779] = "0b00000";
        ram[780] = "0b00000";
        ram[781] = "0b00010";
        for (unsigned i = 782; i < 794 ; i = i + 1) {
            ram[i] = "0b00000";
        }
        ram[794] = "0b00100";
        ram[795] = "0b00000";
        ram[796] = "0b00000";
        ram[797] = "0b00000";
        ram[798] = "0b11111";
        for (unsigned i = 799; i < 807 ; i = i + 1) {
            ram[i] = "0b00000";
        }
        ram[807] = "0b00010";
        for (unsigned i = 808; i < 827 ; i = i + 1) {
            ram[i] = "0b00000";
        }
        ram[827] = "0b00010";
        for (unsigned i = 828; i < 843 ; i = i + 1) {
            ram[i] = "0b00000";
        }
        ram[843] = "0b00100";
        for (unsigned i = 844; i < 860 ; i = i + 1) {
            ram[i] = "0b00000";
        }
        ram[860] = "0b00110";
        ram[861] = "0b00000";
        ram[862] = "0b00000";
        ram[863] = "0b00001";
        for (unsigned i = 864; i < 871 ; i = i + 1) {
            ram[i] = "0b00000";
        }
        ram[871] = "0b00101";
        for (unsigned i = 872; i < 878 ; i = i + 1) {
            ram[i] = "0b00000";
        }
        ram[878] = "0b00100";
        for (unsigned i = 879; i < 900 ; i = i + 1) {
            ram[i] = "0b00000";
        }
        ram[900] = "0b00001";
        for (unsigned i = 901; i < 909 ; i = i + 1) {
            ram[i] = "0b00000";
        }
        ram[909] = "0b00101";
        for (unsigned i = 910; i < 921 ; i = i + 1) {
            ram[i] = "0b00000";
        }
        ram[921] = "0b00001";
        ram[922] = "0b01001";
        ram[923] = "0b11111";
        for (unsigned i = 924; i < 935 ; i = i + 1) {
            ram[i] = "0b00000";
        }
        ram[935] = "0b00011";
        ram[936] = "0b00000";
        ram[937] = "0b00000";
        ram[938] = "0b00000";
        ram[939] = "0b00000";
        ram[940] = "0b00001";
        for (unsigned i = 941; i < 948 ; i = i + 1) {
            ram[i] = "0b00000";
        }
        ram[948] = "0b00001";
        for (unsigned i = 949; i < 955 ; i = i + 1) {
            ram[i] = "0b00000";
        }
        ram[955] = "0b00100";
        for (unsigned i = 956; i < 971 ; i = i + 1) {
            ram[i] = "0b00000";
        }
        ram[971] = "0b00111";
        for (unsigned i = 972; i < 988 ; i = i + 1) {
            ram[i] = "0b00000";
        }
        ram[988] = "0b01010";
        ram[989] = "0b00001";
        ram[990] = "0b00000";
        ram[991] = "0b00000";
        ram[992] = "0b00000";
        ram[993] = "0b11111";
        for (unsigned i = 994; i < 999 ; i = i + 1) {
            ram[i] = "0b00000";
        }
        ram[999] = "0b01001";
        for (unsigned i = 1000; i < 1006 ; i = i + 1) {
            ram[i] = "0b00000";
        }
        ram[1006] = "0b00111";
        ram[1007] = "0b00000";
        ram[1008] = "0b00000";
        ram[1009] = "0b00000";
        ram[1010] = "0b00000";
        ram[1011] = "0b11111";
        for (unsigned i = 1012; i < 1812 ; i = i + 1) {
            ram[i] = "0b00000";
        }
        ram[1812] = "0b00110";
        for (unsigned i = 1813; i < 1829 ; i = i + 1) {
            ram[i] = "0b00000";
        }
        ram[1829] = "0b00001";
        for (unsigned i = 1830; i < 1837 ; i = i + 1) {
            ram[i] = "0b00000";
        }
        ram[1837] = "0b00110";
        ram[1838] = "0b00000";
        ram[1839] = "0b00000";
        ram[1840] = "0b00000";
        ram[1841] = "0b00000";
        ram[1842] = "0b00001";
        for (unsigned i = 1843; i < 1887 ; i = i + 1) {
            ram[i] = "0b00000";
        }
        ram[1887] = "0b00110";
        for (unsigned i = 1888; i < 1940 ; i = i + 1) {
            ram[i] = "0b00000";
        }
        ram[1940] = "0b01100";
        for (unsigned i = 1941; i < 1965 ; i = i + 1) {
            ram[i] = "0b00000";
        }
        ram[1965] = "0b01011";
        for (unsigned i = 1966; i < 2015 ; i = i + 1) {
            ram[i] = "0b00000";
        }
        ram[2015] = "0b01100";
        for (unsigned i = 2016; i < 3860 ; i = i + 1) {
            ram[i] = "0b00000";
        }
        ram[3860] = "0b00110";
        for (unsigned i = 3861; i < 3877 ; i = i + 1) {
            ram[i] = "0b00000";
        }
        ram[3877] = "0b00001";
        for (unsigned i = 3878; i < 3885 ; i = i + 1) {
            ram[i] = "0b00000";
        }
        ram[3885] = "0b00110";
        ram[3886] = "0b00000";
        ram[3887] = "0b00000";
        ram[3888] = "0b00000";
        ram[3889] = "0b00000";
        ram[3890] = "0b00001";
        for (unsigned i = 3891; i < 3935 ; i = i + 1) {
            ram[i] = "0b00000";
        }
        ram[3935] = "0b00110";
        for (unsigned i = 3936; i < 3988 ; i = i + 1) {
            ram[i] = "0b00000";
        }
        ram[3988] = "0b01100";
        for (unsigned i = 3989; i < 4013 ; i = i + 1) {
            ram[i] = "0b00000";
        }
        ram[4013] = "0b01011";
        for (unsigned i = 4014; i < 4063 ; i = i + 1) {
            ram[i] = "0b00000";
        }
        ram[4063] = "0b01100";
        for (unsigned i = 4064; i < 13825 ; i = i + 1) {
            ram[i] = "0b00000";
        }
        ram[13825] = "0b00010";
        ram[13826] = "0b00000";
        ram[13827] = "0b00000";
        ram[13828] = "0b00010";
        for (unsigned i = 13829; i < 13834 ; i = i + 1) {
            ram[i] = "0b00000";
        }
        ram[13834] = "0b00010";
        for (unsigned i = 13835; i < 13849 ; i = i + 1) {
            ram[i] = "0b00000";
        }
        ram[13849] = "0b00010";
        ram[13850] = "0b00000";
        ram[13851] = "0b00000";
        ram[13852] = "0b00000";
        ram[13853] = "0b00000";
        ram[13854] = "0b00010";
        for (unsigned i = 13855; i < 13866 ; i = i + 1) {
            ram[i] = "0b00000";
        }
        ram[13866] = "0b00011";
        ram[13867] = "0b00000";
        ram[13868] = "0b00010";
        for (unsigned i = 13869; i < 13876 ; i = i + 1) {
            ram[i] = "0b00000";
        }
        ram[13876] = "0b00010";
        for (unsigned i = 13877; i < 13916 ; i = i + 1) {
            ram[i] = "0b00000";
        }
        ram[13916] = "0b11111";
        ram[13917] = "0b00010";
        ram[13918] = "0b00000";
        ram[13919] = "0b00000";
        ram[13920] = "0b00000";
        ram[13921] = "0b11111";
        for (unsigned i = 13922; i < 13928 ; i = i + 1) {
            ram[i] = "0b00000";
        }
        ram[13928] = "0b00010";
        for (unsigned i = 13929; i < 13934 ; i = i + 1) {
            ram[i] = "0b00000";
        }
        ram[13934] = "0b11111";
        for (unsigned i = 13935; i < 13953 ; i = i + 1) {
            ram[i] = "0b00000";
        }
        ram[13953] = "0b00111";
        ram[13954] = "0b00000";
        ram[13955] = "0b00000";
        ram[13956] = "0b00111";
        for (unsigned i = 13957; i < 13962 ; i = i + 1) {
            ram[i] = "0b00000";
        }
        ram[13962] = "0b01000";
        ram[13963] = "0b00000";
        ram[13964] = "0b00000";
        ram[13965] = "0b00001";
        ram[13966] = "0b00000";
        ram[13967] = "0b00000";
        ram[13968] = "0b00000";
        ram[13969] = "0b00001";
        for (unsigned i = 13970; i < 13977 ; i = i + 1) {
            ram[i] = "0b00000";
        }
        ram[13977] = "0b00111";
        ram[13978] = "0b00001";
        ram[13979] = "0b11111";
        ram[13980] = "0b00000";
        ram[13981] = "0b00000";
        ram[13982] = "0b00111";
        for (unsigned i = 13983; i < 13991 ; i = i + 1) {
            ram[i] = "0b00000";
        }
        ram[13991] = "0b00001";
        ram[13992] = "0b00000";
        ram[13993] = "0b00000";
        ram[13994] = "0b01000";
        ram[13995] = "0b00000";
        ram[13996] = "0b00111";
        for (unsigned i = 13997; i < 14004 ; i = i + 1) {
            ram[i] = "0b00000";
        }
        ram[14004] = "0b00111";
        for (unsigned i = 14005; i < 14011 ; i = i + 1) {
            ram[i] = "0b00000";
        }
        ram[14011] = "0b00001";
        for (unsigned i = 14012; i < 14027 ; i = i + 1) {
            ram[i] = "0b00000";
        }
        ram[14027] = "0b00001";
        for (unsigned i = 14028; i < 14044 ; i = i + 1) {
            ram[i] = "0b00000";
        }
        ram[14044] = "0b00001";
        ram[14045] = "0b00111";
        ram[14046] = "0b00000";
        ram[14047] = "0b00000";
        ram[14048] = "0b00000";
        ram[14049] = "0b11111";
        for (unsigned i = 14050; i < 14055 ; i = i + 1) {
            ram[i] = "0b00000";
        }
        ram[14055] = "0b00010";
        ram[14056] = "0b00110";
        for (unsigned i = 14057; i < 14062 ; i = i + 1) {
            ram[i] = "0b00000";
        }
        ram[14062] = "0b00001";
        for (unsigned i = 14063; i < 16384 ; i = i + 1) {
            ram[i] = "0b00000";
        }


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(Conv1DMac_new397_wdI) {


static const unsigned DataWidth = 5;
static const unsigned AddressRange = 16384;
static const unsigned AddressWidth = 14;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


Conv1DMac_new397_wdI_ram* meminst;


SC_CTOR(Conv1DMac_new397_wdI) {
meminst = new Conv1DMac_new397_wdI_ram("Conv1DMac_new397_wdI_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);

meminst->reset(reset);
meminst->clk(clk);
}
~Conv1DMac_new397_wdI() {
    delete meminst;
}


};//endmodule
#endif
