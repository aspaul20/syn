-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.2
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ==============================================================

library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity Conv1DMac_new407_Bew_rom is 
    generic(
             DWIDTH     : integer := 8; 
             AWIDTH     : integer := 10; 
             MEM_SIZE    : integer := 1024
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of Conv1DMac_new407_Bew_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 to 63=> "00000000", 64 => "01011010", 65 => "00000000", 66 => "00001010", 
    67 => "10101111", 68 to 69=> "00000000", 70 => "01001100", 71 => "00000000", 
    72 => "00000001", 73 to 74=> "00000000", 75 => "00001010", 76 => "10101001", 
    77 to 81=> "00000000", 82 => "11111100", 83 => "00000000", 84 => "01010111", 
    85 => "00000000", 86 => "01010010", 87 to 88=> "00000000", 89 => "11111111", 
    90 to 92=> "00000000", 93 => "00010001", 94 => "11111100", 95 => "00000000", 
    96 => "10011010", 97 => "00000000", 98 => "11110111", 99 => "01011101", 
    100 to 101=> "00000000", 102 => "10011110", 103 => "00000000", 104 => "11111001", 
    105 to 106=> "00000000", 107 => "11111100", 108 => "01100110", 109 to 113=> "00000000", 
    114 => "00000010", 115 => "00000000", 116 => "10011011", 117 => "00000000", 
    118 => "10100100", 119 to 120=> "00000000", 121 => "00000111", 122 to 124=> "00000000", 
    125 => "11110011", 126 => "11111010", 127 => "00000000", 128 => "11111001", 
    129 => "00000000", 130 => "11111111", 131 => "00000111", 132 to 133=> "00000000", 
    134 => "11111001", 135 => "00000000", 136 => "11111111", 137 to 138=> "00000000", 
    139 => "11111111", 140 => "00000111", 141 to 145=> "00000000", 146 => "00000001", 
    147 => "00000000", 148 => "11111001", 149 => "00000000", 150 => "11111000", 
    151 to 152=> "00000000", 153 => "00000001", 154 to 156=> "00000000", 157 to 158=> "11111111", 
    159 => "00000000", 160 => "11111000", 161 => "00000000", 162 => "00000001", 
    163 => "00001001", 164 to 165=> "00000000", 166 => "11110111", 167 to 170=> "00000000", 
    171 => "00000001", 172 => "00001000", 173 to 177=> "00000000", 178 => "11111111", 
    179 => "00000000", 180 => "11111000", 181 => "00000000", 182 => "11110111", 
    183 to 188=> "00000000", 189 => "00000001", 190 to 383=> "00000000", 384 => "10000111", 
    385 => "00000000", 386 => "00001110", 387 => "01111100", 388 to 389=> "00000000", 
    390 => "10000000", 391 => "00000000", 392 => "00001010", 393 to 394=> "00000000", 
    395 => "00001101", 396 => "01111011", 397 to 401=> "00000000", 402 => "11110100", 
    403 => "00000000", 404 => "10000111", 405 => "00000000", 406 => "01111110", 
    407 to 408=> "00000000", 409 => "11111000", 410 to 412=> "00000000", 413 => "00010100", 
    414 => "00000110", 415 => "00000000", 416 => "01111010", 417 => "00000000", 
    418 => "11110000", 419 => "10000011", 420 to 421=> "00000000", 422 => "10000000", 
    423 => "00000000", 424 => "00000001", 425 to 426=> "00000000", 427 => "11111000", 
    428 => "10001010", 429 to 433=> "00000000", 434 => "00001001", 435 => "00000000", 
    436 => "01111010", 437 => "00000000", 438 => "01111101", 439 to 440=> "00000000", 
    441 => "11111111", 442 to 444=> "00000000", 445 => "11101100", 446 => "00000101", 
    447 to 450=> "00000000", 451 => "00000001", 452 to 453=> "00000000", 454 => "11111111", 
    455 => "00000000", 456 => "11111101", 457 to 458=> "00000000", 459 => "11111101", 
    460 => "00000001", 461 to 465=> "00000000", 466 => "00000001", 467 => "00000000", 
    468 => "11111111", 469 => "00000000", 470 => "11111111", 471 to 472=> "00000000", 
    473 => "00000011", 474 to 477=> "00000000", 478 => "11111101", 479 to 481=> "00000000", 
    482 => "00000001", 483 to 487=> "00000000", 488 => "11111101", 489 to 490=> "00000000", 
    491 => "11111101", 492 to 504=> "00000000", 505 => "00000011", 506 to 509=> "00000000", 
    510 => "11111101", 511 to 575=> "00000000", 576 => "11101000", 577 => "00000000", 
    578 => "01001111", 579 => "00010111", 580 to 581=> "00000000", 582 => "11100100", 
    583 => "00000000", 584 => "11100111", 585 to 586=> "00000000", 587 => "01110111", 
    588 => "00001110", 589 to 593=> "00000000", 594 => "10110010", 595 => "00000000", 
    596 => "11101001", 597 => "00000000", 598 => "11101000", 599 to 600=> "00000000", 
    601 => "00110000", 602 to 604=> "00000000", 605 => "01010000", 606 => "11001100", 
    607 => "00000000", 608 => "00010111", 609 => "00000000", 610 => "11011101", 
    611 => "11100011", 612 to 613=> "00000000", 614 => "00011110", 615 => "00000000", 
    616 => "00100011", 617 to 618=> "00000000", 619 => "10001101", 620 => "11011011", 
    621 to 625=> "00000000", 626 => "00100101", 627 => "00000000", 628 => "00011011", 
    629 => "00000000", 630 => "00011011", 631 to 632=> "00000000", 633 => "11000001", 
    634 to 636=> "00000000", 637 => "11100110", 638 => "00111101", 639 => "00000000", 
    640 => "00000100", 641 => "00000000", 642 => "11111011", 643 => "11111101", 
    644 to 645=> "00000000", 646 => "00000110", 647 => "00000000", 648 => "11011101", 
    649 to 650=> "00000000", 651 => "00111010", 652 => "11111110", 653 to 657=> "00000000", 
    658 => "11011010", 659 => "00000000", 660 => "00000110", 661 => "00000000", 
    662 => "00000110", 663 to 664=> "00000000", 665 => "01000111", 666 to 668=> "00000000", 
    669 => "00011000", 670 => "10111111", 671 => "00000000", 672 => "11111011", 
    673 => "00000000", 674 => "00010100", 675 => "00000110", 676 to 677=> "00000000", 
    678 => "00000001", 679 => "00000000", 680 => "00110010", 681 to 682=> "00000000", 
    683 => "11011001", 684 => "00000100", 685 to 689=> "00000000", 690 => "00000100", 
    691 => "00000000", 692 => "11111011", 693 => "00000000", 694 => "11111100", 
    695 to 696=> "00000000", 697 => "10101111", 698 to 700=> "00000000", 701 => "00001101", 
    702 => "01000101", 703 => "00000000", 704 => "11111110", 705 => "00000000", 
    706 => "11101011", 707 => "00000001", 708 to 709=> "00000000", 710 => "11111101", 
    711 => "00000000", 712 => "11111100", 713 to 714=> "00000000", 715 => "11110011", 
    716 => "00000011", 717 to 721=> "00000000", 722 => "00011001", 723 => "00000000", 
    724 => "11111110", 725 => "00000000", 726 => "11111101", 727 to 728=> "00000000", 
    729 => "00000010", 730 to 732=> "00000000", 733 => "11101011", 734 => "11111101", 
    735 to 737=> "00000000", 738 => "11110100", 739 => "11111111", 740 to 741=> "00000000", 
    742 => "11111111", 743 => "00000000", 744 => "11110111", 745 to 746=> "00000000", 
    747 => "11110101", 748 => "00000001", 749 to 753=> "00000000", 754 => "00010001", 
    755 to 760=> "00000000", 761 => "00000111", 762 to 764=> "00000000", 765 => "11110011", 
    766 => "11111000", 767 => "00000000", 768 => "11111101", 769 => "00000000", 
    770 => "00000001", 771 => "00000100", 772 to 773=> "00000000", 774 => "11111100", 
    775 => "00000000", 776 => "11110000", 777 to 778=> "00000000", 779 => "11110100", 
    780 => "00000100", 781 to 785=> "00000000", 786 => "00000010", 787 => "00000000", 
    788 => "11111101", 789 => "00000000", 790 => "11111101", 791 to 792=> "00000000", 
    793 => "00001111", 794 to 797=> "00000000", 798 => "11110010", 799 => "00000000", 
    800 => "11111111", 801 => "00000000", 802 to 803=> "00000001", 804 to 805=> "00000000", 
    806 => "11111110", 807 => "00000000", 808 => "11110000", 809 to 810=> "00000000", 
    811 => "11110100", 812 => "00000001", 813 to 817=> "00000000", 818 => "00000001", 
    819 => "00000000", 820 => "11111111", 821 => "00000000", 822 => "11111111", 
    823 to 824=> "00000000", 825 => "00001111", 826 to 828=> "00000000", 829 => "00000001", 
    830 => "11110010", 831 to 895=> "00000000", 896 => "11111111", 897 => "00000000", 
    898 => "00100111", 899 => "00000010", 900 to 901=> "00000000", 902 => "11111110", 
    903 => "00000000", 904 => "11111000", 905 to 906=> "00000000", 907 => "00000010", 
    908 => "00000001", 909 to 913=> "00000000", 914 => "11011011", 915 => "00000000", 
    916 => "11111111", 917 => "00000000", 918 => "11111110", 919 to 920=> "00000000", 
    921 => "00001001", 922 to 924=> "00000000", 925 => "00100110", 926 => "11110110", 
    927 => "00000000", 928 => "11111110", 929 => "00000000", 930 => "00010110", 
    931 => "00000100", 932 to 933=> "00000000", 934 => "11111101", 935 => "00000000", 
    936 => "11111001", 937 to 938=> "00000000", 939 => "11111010", 940 => "00000010", 
    941 to 945=> "00000000", 946 => "11101100", 947 => "00000000", 948 => "11111110", 
    949 => "00000000", 950 => "11111101", 951 to 952=> "00000000", 953 => "00000110", 
    954 to 956=> "00000000", 957 => "00010110", 958 => "11111001", 959 => "00000000", 
    960 => "11111000", 961 => "00000000", 962 => "11111111", 963 => "00001000", 
    964 to 965=> "00000000", 966 => "11111000", 967 => "00000000", 968 => "11111111", 
    969 to 970=> "00000000", 971 => "11111111", 972 => "00001000", 973 to 977=> "00000000", 
    978 => "00000001", 979 => "00000000", 980 => "11111000", 981 => "00000000", 
    982 => "11111000", 983 to 984=> "00000000", 985 => "00000001", 986 to 988=> "00000000", 
    989 to 990=> "11111111", 991 => "00000000", 992 => "11110111", 993 => "00000000", 
    994 => "00000001", 995 => "00001010", 996 to 997=> "00000000", 998 => "11110111", 
    999 to 1002=> "00000000", 1003 => "00000001", 1004 => "00001001", 1005 to 1009=> "00000000", 
    1010 => "11111111", 1011 => "00000000", 1012 => "11110111", 1013 => "00000000", 
    1014 => "11110110", 1015 to 1020=> "00000000", 1021 => "00000001", 1022 to 1023=> "00000000" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;


Library IEEE;
use IEEE.std_logic_1164.all;

entity Conv1DMac_new407_Bew is
    generic (
        DataWidth : INTEGER := 8;
        AddressRange : INTEGER := 1024;
        AddressWidth : INTEGER := 10);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of Conv1DMac_new407_Bew is
    component Conv1DMac_new407_Bew_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    Conv1DMac_new407_Bew_rom_U :  component Conv1DMac_new407_Bew_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


