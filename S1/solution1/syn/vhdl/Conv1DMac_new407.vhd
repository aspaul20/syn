-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.2
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity Conv1DMac_new407 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    start_full_n : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    start_out : OUT STD_LOGIC;
    start_write : OUT STD_LOGIC;
    in_V_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
    in_V_V_empty_n : IN STD_LOGIC;
    in_V_V_read : OUT STD_LOGIC;
    out_V_V_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    out_V_V_full_n : IN STD_LOGIC;
    out_V_V_write : OUT STD_LOGIC );
end;


architecture behav of Conv1DMac_new407 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv23_0 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000000";
    constant ap_const_lv12_0 : STD_LOGIC_VECTOR (11 downto 0) := "000000000000";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv23_400000 : STD_LOGIC_VECTOR (22 downto 0) := "10000000000000000000000";
    constant ap_const_lv23_1 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000001";
    constant ap_const_lv12_400 : STD_LOGIC_VECTOR (11 downto 0) := "010000000000";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv7_40 : STD_LOGIC_VECTOR (6 downto 0) := "1000000";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv7_3F : STD_LOGIC_VECTOR (6 downto 0) := "0111111";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv12_1 : STD_LOGIC_VECTOR (11 downto 0) := "000000000001";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv8_12 : STD_LOGIC_VECTOR (7 downto 0) := "00010010";
    constant ap_const_lv8_28 : STD_LOGIC_VECTOR (7 downto 0) := "00101000";
    constant ap_const_lv8_16 : STD_LOGIC_VECTOR (7 downto 0) := "00010110";
    constant ap_const_lv8_C : STD_LOGIC_VECTOR (7 downto 0) := "00001100";
    constant ap_const_lv8_FD : STD_LOGIC_VECTOR (7 downto 0) := "11111101";
    constant ap_const_lv8_18 : STD_LOGIC_VECTOR (7 downto 0) := "00011000";
    constant ap_const_lv8_1B : STD_LOGIC_VECTOR (7 downto 0) := "00011011";
    constant ap_const_lv8_F2 : STD_LOGIC_VECTOR (7 downto 0) := "11110010";
    constant ap_const_lv8_15 : STD_LOGIC_VECTOR (7 downto 0) := "00010101";
    constant ap_const_lv8_22 : STD_LOGIC_VECTOR (7 downto 0) := "00100010";
    constant ap_const_lv8_25 : STD_LOGIC_VECTOR (7 downto 0) := "00100101";
    constant ap_const_lv8_FC : STD_LOGIC_VECTOR (7 downto 0) := "11111100";
    constant ap_const_lv8_A : STD_LOGIC_VECTOR (7 downto 0) := "00001010";
    constant ap_const_lv8_10 : STD_LOGIC_VECTOR (7 downto 0) := "00010000";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv8_5 : STD_LOGIC_VECTOR (7 downto 0) := "00000101";
    constant ap_const_lv8_1E : STD_LOGIC_VECTOR (7 downto 0) := "00011110";
    constant ap_const_lv8_1D : STD_LOGIC_VECTOR (7 downto 0) := "00011101";
    constant ap_const_lv8_13 : STD_LOGIC_VECTOR (7 downto 0) := "00010011";
    constant ap_const_lv8_4 : STD_LOGIC_VECTOR (7 downto 0) := "00000100";
    constant ap_const_lv8_14 : STD_LOGIC_VECTOR (7 downto 0) := "00010100";
    constant ap_const_lv8_6 : STD_LOGIC_VECTOR (7 downto 0) := "00000110";
    constant ap_const_lv8_24 : STD_LOGIC_VECTOR (7 downto 0) := "00100100";
    constant ap_const_lv8_D : STD_LOGIC_VECTOR (7 downto 0) := "00001101";
    constant ap_const_lv8_F : STD_LOGIC_VECTOR (7 downto 0) := "00001111";
    constant ap_const_lv8_20 : STD_LOGIC_VECTOR (7 downto 0) := "00100000";
    constant ap_const_lv8_11 : STD_LOGIC_VECTOR (7 downto 0) := "00010001";
    constant ap_const_lv8_1A : STD_LOGIC_VECTOR (7 downto 0) := "00011010";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";

    signal real_start : STD_LOGIC;
    signal start_once_reg : STD_LOGIC := '0';
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (2 downto 0) := "001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal internal_ap_ready : STD_LOGIC;
    signal weights1_m_weights_V_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal weights1_m_weights_V_ce0 : STD_LOGIC;
    signal weights1_m_weights_V_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal weights1_m_weights_V_1_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal weights1_m_weights_V_1_ce0 : STD_LOGIC;
    signal weights1_m_weights_V_1_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal weights1_m_weights_V_2_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal weights1_m_weights_V_2_ce0 : STD_LOGIC;
    signal weights1_m_weights_V_2_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal weights1_m_weights_V_3_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal weights1_m_weights_V_3_ce0 : STD_LOGIC;
    signal weights1_m_weights_V_3_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal in_V_V_blk_n : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal exitcond_flatten5_reg_1108 : STD_LOGIC_VECTOR (0 downto 0);
    signal out_V_V_blk_n : STD_LOGIC;
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal tmp_82_reg_1135 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_82_reg_1135_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal indvar_flatten5_reg_265 : STD_LOGIC_VECTOR (22 downto 0);
    signal indvar_flatten_reg_276 : STD_LOGIC_VECTOR (11 downto 0);
    signal nm_reg_287 : STD_LOGIC_VECTOR (4 downto 0);
    signal sf_reg_298 : STD_LOGIC_VECTOR (6 downto 0);
    signal exitcond_flatten5_fu_341_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state2_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal exitcond_flatten5_reg_1108_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal indvar_flatten_next5_fu_347_p2 : STD_LOGIC_VECTOR (22 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal nm_t_mid2_fu_441_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal nm_t_mid2_reg_1117 : STD_LOGIC_VECTOR (3 downto 0);
    signal nm_t_mid2_reg_1117_pp0_iter1_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal nm_t_mid2_reg_1117_pp0_iter2_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal nm_mid2_fu_449_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_74_fu_461_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_74_reg_1130 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_82_fu_467_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_82_reg_1135_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal sf_1_fu_473_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal indvar_flatten_next_fu_485_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_V_reg_1149 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Val2_s_141_reg_1174 : STD_LOGIC_VECTOR (7 downto 0);
    signal qb_assign_1_fu_573_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal qb_assign_1_reg_1179 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Val2_75_1_reg_1184 : STD_LOGIC_VECTOR (7 downto 0);
    signal qb_assign_1_1_fu_649_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal qb_assign_1_1_reg_1189 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Val2_75_2_reg_1194 : STD_LOGIC_VECTOR (7 downto 0);
    signal qb_assign_1_2_fu_725_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal qb_assign_1_2_reg_1199 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Val2_75_3_reg_1204 : STD_LOGIC_VECTOR (7 downto 0);
    signal qb_assign_1_3_fu_801_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal qb_assign_1_3_reg_1209 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state2 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal tmp_75_fu_493_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal macRegisters_0_V_3_fu_184 : STD_LOGIC_VECTOR (7 downto 0);
    signal macRegisters_0_V_fu_828_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal macRegisters_1_V_3_fu_188 : STD_LOGIC_VECTOR (7 downto 0);
    signal macRegisters_1_V_fu_842_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal macRegisters_2_V_3_fu_192 : STD_LOGIC_VECTOR (7 downto 0);
    signal macRegisters_2_V_fu_856_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal macRegisters_3_V_3_fu_196 : STD_LOGIC_VECTOR (7 downto 0);
    signal macRegisters_3_V_fu_870_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_fu_329_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal exitcond_flatten_fu_353_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_72_fu_333_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_54_fu_389_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal not_exitcond_flatten_fu_383_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal nm_mid_fu_359_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_73_mid_fu_395_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_s_fu_407_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal nm_1_fu_401_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_620_fu_421_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_72_mid1_fu_425_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_72_mid_fu_367_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal nm_t_mid_fu_375_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal sf_mid2_fu_413_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal sf_cast1_fu_457_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_72_mid2_fu_433_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal indvar_flatten_op_fu_479_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal p_Val2_s_fu_507_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_s_fu_500_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Val2_s_fu_507_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Val2_s_fu_507_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_623_fu_539_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_621_fu_513_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_78_fu_549_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_77_fu_543_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_79_fu_559_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_80_fu_567_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_622_fu_531_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Val2_1_fu_583_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Val2_1_fu_583_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Val2_1_fu_583_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_626_fu_615_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_624_fu_589_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_85_fu_625_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_84_fu_619_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_86_fu_635_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_203_1_fu_643_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_625_fu_607_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Val2_2_fu_659_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Val2_2_fu_659_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Val2_2_fu_659_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_629_fu_691_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_627_fu_665_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_89_fu_701_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_88_fu_695_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_90_fu_711_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_203_2_fu_719_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_628_fu_683_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Val2_3_fu_735_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Val2_3_fu_735_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Val2_3_fu_735_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_632_fu_767_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_630_fu_741_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_93_fu_777_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_92_fu_771_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_94_fu_787_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_203_3_fu_795_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_631_fu_759_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_81_fu_819_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp1_fu_822_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_204_1_fu_833_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp2_fu_836_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_204_2_fu_847_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp3_fu_850_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_204_3_fu_861_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp4_fu_864_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_95_fu_895_p18 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_96_fu_938_p18 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_97_fu_981_p18 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_98_fu_1024_p18 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Val2_20_3_fu_1061_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Val2_20_2_fu_1018_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Val2_20_1_fu_975_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Val2_7_fu_932_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;

    component computeS1_mux_164DeQ IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        din5_WIDTH : INTEGER;
        din6_WIDTH : INTEGER;
        din7_WIDTH : INTEGER;
        din8_WIDTH : INTEGER;
        din9_WIDTH : INTEGER;
        din10_WIDTH : INTEGER;
        din11_WIDTH : INTEGER;
        din12_WIDTH : INTEGER;
        din13_WIDTH : INTEGER;
        din14_WIDTH : INTEGER;
        din15_WIDTH : INTEGER;
        din16_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        din2 : IN STD_LOGIC_VECTOR (7 downto 0);
        din3 : IN STD_LOGIC_VECTOR (7 downto 0);
        din4 : IN STD_LOGIC_VECTOR (7 downto 0);
        din5 : IN STD_LOGIC_VECTOR (7 downto 0);
        din6 : IN STD_LOGIC_VECTOR (7 downto 0);
        din7 : IN STD_LOGIC_VECTOR (7 downto 0);
        din8 : IN STD_LOGIC_VECTOR (7 downto 0);
        din9 : IN STD_LOGIC_VECTOR (7 downto 0);
        din10 : IN STD_LOGIC_VECTOR (7 downto 0);
        din11 : IN STD_LOGIC_VECTOR (7 downto 0);
        din12 : IN STD_LOGIC_VECTOR (7 downto 0);
        din13 : IN STD_LOGIC_VECTOR (7 downto 0);
        din14 : IN STD_LOGIC_VECTOR (7 downto 0);
        din15 : IN STD_LOGIC_VECTOR (7 downto 0);
        din16 : IN STD_LOGIC_VECTOR (3 downto 0);
        dout : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component Conv1DMac_new407_zec IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component Conv1DMac_new407_Aem IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component Conv1DMac_new407_Bew IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component Conv1DMac_new407_CeG IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;



begin
    weights1_m_weights_V_U : component Conv1DMac_new407_zec
    generic map (
        DataWidth => 8,
        AddressRange => 1024,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => weights1_m_weights_V_address0,
        ce0 => weights1_m_weights_V_ce0,
        q0 => weights1_m_weights_V_q0);

    weights1_m_weights_V_1_U : component Conv1DMac_new407_Aem
    generic map (
        DataWidth => 8,
        AddressRange => 1024,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => weights1_m_weights_V_1_address0,
        ce0 => weights1_m_weights_V_1_ce0,
        q0 => weights1_m_weights_V_1_q0);

    weights1_m_weights_V_2_U : component Conv1DMac_new407_Bew
    generic map (
        DataWidth => 8,
        AddressRange => 1024,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => weights1_m_weights_V_2_address0,
        ce0 => weights1_m_weights_V_2_ce0,
        q0 => weights1_m_weights_V_2_q0);

    weights1_m_weights_V_3_U : component Conv1DMac_new407_CeG
    generic map (
        DataWidth => 8,
        AddressRange => 1024,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => weights1_m_weights_V_3_address0,
        ce0 => weights1_m_weights_V_3_ce0,
        q0 => weights1_m_weights_V_3_q0);

    computeS1_mux_164DeQ_U45 : component computeS1_mux_164DeQ
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 8,
        din3_WIDTH => 8,
        din4_WIDTH => 8,
        din5_WIDTH => 8,
        din6_WIDTH => 8,
        din7_WIDTH => 8,
        din8_WIDTH => 8,
        din9_WIDTH => 8,
        din10_WIDTH => 8,
        din11_WIDTH => 8,
        din12_WIDTH => 8,
        din13_WIDTH => 8,
        din14_WIDTH => 8,
        din15_WIDTH => 8,
        din16_WIDTH => 4,
        dout_WIDTH => 8)
    port map (
        din0 => ap_const_lv8_0,
        din1 => ap_const_lv8_0,
        din2 => ap_const_lv8_12,
        din3 => ap_const_lv8_0,
        din4 => ap_const_lv8_0,
        din5 => ap_const_lv8_28,
        din6 => ap_const_lv8_16,
        din7 => ap_const_lv8_0,
        din8 => ap_const_lv8_C,
        din9 => ap_const_lv8_FD,
        din10 => ap_const_lv8_18,
        din11 => ap_const_lv8_1B,
        din12 => ap_const_lv8_F2,
        din13 => ap_const_lv8_0,
        din14 => ap_const_lv8_15,
        din15 => ap_const_lv8_0,
        din16 => nm_t_mid2_reg_1117_pp0_iter2_reg,
        dout => tmp_95_fu_895_p18);

    computeS1_mux_164DeQ_U46 : component computeS1_mux_164DeQ
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 8,
        din3_WIDTH => 8,
        din4_WIDTH => 8,
        din5_WIDTH => 8,
        din6_WIDTH => 8,
        din7_WIDTH => 8,
        din8_WIDTH => 8,
        din9_WIDTH => 8,
        din10_WIDTH => 8,
        din11_WIDTH => 8,
        din12_WIDTH => 8,
        din13_WIDTH => 8,
        din14_WIDTH => 8,
        din15_WIDTH => 8,
        din16_WIDTH => 4,
        dout_WIDTH => 8)
    port map (
        din0 => ap_const_lv8_22,
        din1 => ap_const_lv8_12,
        din2 => ap_const_lv8_0,
        din3 => ap_const_lv8_25,
        din4 => ap_const_lv8_FC,
        din5 => ap_const_lv8_0,
        din6 => ap_const_lv8_A,
        din7 => ap_const_lv8_0,
        din8 => ap_const_lv8_10,
        din9 => ap_const_lv8_0,
        din10 => ap_const_lv8_12,
        din11 => ap_const_lv8_0,
        din12 => ap_const_lv8_10,
        din13 => ap_const_lv8_FF,
        din14 => ap_const_lv8_5,
        din15 => ap_const_lv8_10,
        din16 => nm_t_mid2_reg_1117_pp0_iter2_reg,
        dout => tmp_96_fu_938_p18);

    computeS1_mux_164DeQ_U47 : component computeS1_mux_164DeQ
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 8,
        din3_WIDTH => 8,
        din4_WIDTH => 8,
        din5_WIDTH => 8,
        din6_WIDTH => 8,
        din7_WIDTH => 8,
        din8_WIDTH => 8,
        din9_WIDTH => 8,
        din10_WIDTH => 8,
        din11_WIDTH => 8,
        din12_WIDTH => 8,
        din13_WIDTH => 8,
        din14_WIDTH => 8,
        din15_WIDTH => 8,
        din16_WIDTH => 4,
        dout_WIDTH => 8)
    port map (
        din0 => ap_const_lv8_0,
        din1 => ap_const_lv8_1E,
        din2 => ap_const_lv8_1D,
        din3 => ap_const_lv8_0,
        din4 => ap_const_lv8_0,
        din5 => ap_const_lv8_0,
        din6 => ap_const_lv8_13,
        din7 => ap_const_lv8_4,
        din8 => ap_const_lv8_0,
        din9 => ap_const_lv8_14,
        din10 => ap_const_lv8_6,
        din11 => ap_const_lv8_24,
        din12 => ap_const_lv8_D,
        din13 => ap_const_lv8_0,
        din14 => ap_const_lv8_F,
        din15 => ap_const_lv8_20,
        din16 => nm_t_mid2_reg_1117_pp0_iter2_reg,
        dout => tmp_97_fu_981_p18);

    computeS1_mux_164DeQ_U48 : component computeS1_mux_164DeQ
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 8,
        din3_WIDTH => 8,
        din4_WIDTH => 8,
        din5_WIDTH => 8,
        din6_WIDTH => 8,
        din7_WIDTH => 8,
        din8_WIDTH => 8,
        din9_WIDTH => 8,
        din10_WIDTH => 8,
        din11_WIDTH => 8,
        din12_WIDTH => 8,
        din13_WIDTH => 8,
        din14_WIDTH => 8,
        din15_WIDTH => 8,
        din16_WIDTH => 4,
        dout_WIDTH => 8)
    port map (
        din0 => ap_const_lv8_13,
        din1 => ap_const_lv8_11,
        din2 => ap_const_lv8_0,
        din3 => ap_const_lv8_0,
        din4 => ap_const_lv8_4,
        din5 => ap_const_lv8_22,
        din6 => ap_const_lv8_1E,
        din7 => ap_const_lv8_20,
        din8 => ap_const_lv8_6,
        din9 => ap_const_lv8_1A,
        din10 => ap_const_lv8_25,
        din11 => ap_const_lv8_1A,
        din12 => ap_const_lv8_0,
        din13 => ap_const_lv8_16,
        din14 => ap_const_lv8_0,
        din15 => ap_const_lv8_1A,
        din16 => nm_t_mid2_reg_1117_pp0_iter2_reg,
        dout => tmp_98_fu_1024_p18);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2)) then 
                        ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state2);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                elsif ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    start_once_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                start_once_reg <= ap_const_logic_0;
            else
                if (((internal_ap_ready = ap_const_logic_0) and (real_start = ap_const_logic_1))) then 
                    start_once_reg <= ap_const_logic_1;
                elsif ((internal_ap_ready = ap_const_logic_1)) then 
                    start_once_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    indvar_flatten5_reg_265_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_flatten5_fu_341_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                indvar_flatten5_reg_265 <= indvar_flatten_next5_fu_347_p2;
            elsif ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                indvar_flatten5_reg_265 <= ap_const_lv23_0;
            end if; 
        end if;
    end process;

    indvar_flatten_reg_276_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_flatten5_fu_341_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                indvar_flatten_reg_276 <= indvar_flatten_next_fu_485_p3;
            elsif ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                indvar_flatten_reg_276 <= ap_const_lv12_0;
            end if; 
        end if;
    end process;

    macRegisters_0_V_3_fu_184_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_82_reg_1135_pp0_iter2_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                macRegisters_0_V_3_fu_184 <= macRegisters_0_V_fu_828_p2;
            elsif ((((tmp_82_reg_1135_pp0_iter2_reg = ap_const_lv1_1) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or (not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
                macRegisters_0_V_3_fu_184 <= ap_const_lv8_0;
            end if; 
        end if;
    end process;

    macRegisters_1_V_3_fu_188_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_82_reg_1135_pp0_iter2_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                macRegisters_1_V_3_fu_188 <= macRegisters_1_V_fu_842_p2;
            elsif ((((tmp_82_reg_1135_pp0_iter2_reg = ap_const_lv1_1) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or (not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
                macRegisters_1_V_3_fu_188 <= ap_const_lv8_0;
            end if; 
        end if;
    end process;

    macRegisters_2_V_3_fu_192_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_82_reg_1135_pp0_iter2_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                macRegisters_2_V_3_fu_192 <= macRegisters_2_V_fu_856_p2;
            elsif ((((tmp_82_reg_1135_pp0_iter2_reg = ap_const_lv1_1) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or (not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
                macRegisters_2_V_3_fu_192 <= ap_const_lv8_0;
            end if; 
        end if;
    end process;

    macRegisters_3_V_3_fu_196_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_82_reg_1135_pp0_iter2_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                macRegisters_3_V_3_fu_196 <= macRegisters_3_V_fu_870_p2;
            elsif ((((tmp_82_reg_1135_pp0_iter2_reg = ap_const_lv1_1) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or (not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
                macRegisters_3_V_3_fu_196 <= ap_const_lv8_0;
            end if; 
        end if;
    end process;

    nm_reg_287_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_flatten5_fu_341_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                nm_reg_287 <= nm_mid2_fu_449_p3;
            elsif ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                nm_reg_287 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    sf_reg_298_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_flatten5_fu_341_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                sf_reg_298 <= sf_1_fu_473_p2;
            elsif ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                sf_reg_298 <= ap_const_lv7_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                exitcond_flatten5_reg_1108 <= exitcond_flatten5_fu_341_p2;
                exitcond_flatten5_reg_1108_pp0_iter1_reg <= exitcond_flatten5_reg_1108;
                nm_t_mid2_reg_1117_pp0_iter1_reg <= nm_t_mid2_reg_1117;
                tmp_82_reg_1135_pp0_iter1_reg <= tmp_82_reg_1135;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_flatten5_fu_341_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                nm_t_mid2_reg_1117 <= nm_t_mid2_fu_441_p3;
                tmp_74_reg_1130 <= tmp_74_fu_461_p2;
                tmp_82_reg_1135 <= tmp_82_fu_467_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                nm_t_mid2_reg_1117_pp0_iter2_reg <= nm_t_mid2_reg_1117_pp0_iter1_reg;
                tmp_82_reg_1135_pp0_iter2_reg <= tmp_82_reg_1135_pp0_iter1_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_flatten5_reg_1108_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                p_Val2_75_1_reg_1184 <= p_Val2_1_fu_583_p2(14 downto 7);
                p_Val2_75_2_reg_1194 <= p_Val2_2_fu_659_p2(14 downto 7);
                p_Val2_75_3_reg_1204 <= p_Val2_3_fu_735_p2(14 downto 7);
                p_Val2_s_141_reg_1174 <= p_Val2_s_fu_507_p2(14 downto 7);
                qb_assign_1_1_reg_1189 <= qb_assign_1_1_fu_649_p2;
                qb_assign_1_2_reg_1199 <= qb_assign_1_2_fu_725_p2;
                qb_assign_1_3_reg_1209 <= qb_assign_1_3_fu_801_p2;
                qb_assign_1_reg_1179 <= qb_assign_1_fu_573_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_flatten5_reg_1108 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                tmp_V_reg_1149 <= in_V_V_dout;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (real_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter3, exitcond_flatten5_fu_341_p2, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, ap_enable_reg_pp0_iter2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((exitcond_flatten5_fu_341_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) and not(((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) or ((exitcond_flatten5_fu_341_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone)))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXX";
        end case;
    end process;
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(1);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state6 <= ap_CS_fsm(2);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(in_V_V_empty_n, out_V_V_full_n, ap_enable_reg_pp0_iter1, exitcond_flatten5_reg_1108, ap_enable_reg_pp0_iter3, tmp_82_reg_1135_pp0_iter2_reg)
    begin
                ap_block_pp0_stage0_01001 <= (((tmp_82_reg_1135_pp0_iter2_reg = ap_const_lv1_1) and (out_V_V_full_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1)) or ((exitcond_flatten5_reg_1108 = ap_const_lv1_0) and (in_V_V_empty_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(in_V_V_empty_n, out_V_V_full_n, ap_enable_reg_pp0_iter1, exitcond_flatten5_reg_1108, ap_enable_reg_pp0_iter3, tmp_82_reg_1135_pp0_iter2_reg)
    begin
                ap_block_pp0_stage0_11001 <= (((tmp_82_reg_1135_pp0_iter2_reg = ap_const_lv1_1) and (out_V_V_full_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1)) or ((exitcond_flatten5_reg_1108 = ap_const_lv1_0) and (in_V_V_empty_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(in_V_V_empty_n, out_V_V_full_n, ap_enable_reg_pp0_iter1, exitcond_flatten5_reg_1108, ap_enable_reg_pp0_iter3, tmp_82_reg_1135_pp0_iter2_reg)
    begin
                ap_block_pp0_stage0_subdone <= (((tmp_82_reg_1135_pp0_iter2_reg = ap_const_lv1_1) and (out_V_V_full_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1)) or ((exitcond_flatten5_reg_1108 = ap_const_lv1_0) and (in_V_V_empty_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)));
    end process;


    ap_block_state1_assign_proc : process(real_start, ap_done_reg)
    begin
                ap_block_state1 <= ((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;

        ap_block_state2_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state3_pp0_stage0_iter1_assign_proc : process(in_V_V_empty_n, exitcond_flatten5_reg_1108)
    begin
                ap_block_state3_pp0_stage0_iter1 <= ((exitcond_flatten5_reg_1108 = ap_const_lv1_0) and (in_V_V_empty_n = ap_const_logic_0));
    end process;

        ap_block_state4_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state5_pp0_stage0_iter3_assign_proc : process(out_V_V_full_n, tmp_82_reg_1135_pp0_iter2_reg)
    begin
                ap_block_state5_pp0_stage0_iter3 <= ((tmp_82_reg_1135_pp0_iter2_reg = ap_const_lv1_1) and (out_V_V_full_n = ap_const_logic_0));
    end process;


    ap_condition_pp0_exit_iter0_state2_assign_proc : process(exitcond_flatten5_fu_341_p2)
    begin
        if ((exitcond_flatten5_fu_341_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_done_reg, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(real_start, ap_CS_fsm_state1)
    begin
        if (((real_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_ready <= internal_ap_ready;
    exitcond_flatten5_fu_341_p2 <= "1" when (indvar_flatten5_reg_265 = ap_const_lv23_400000) else "0";
    exitcond_flatten_fu_353_p2 <= "1" when (indvar_flatten_reg_276 = ap_const_lv12_400) else "0";

    in_V_V_blk_n_assign_proc : process(in_V_V_empty_n, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, exitcond_flatten5_reg_1108)
    begin
        if (((exitcond_flatten5_reg_1108 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            in_V_V_blk_n <= in_V_V_empty_n;
        else 
            in_V_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    in_V_V_read_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, exitcond_flatten5_reg_1108, ap_block_pp0_stage0_11001)
    begin
        if (((exitcond_flatten5_reg_1108 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            in_V_V_read <= ap_const_logic_1;
        else 
            in_V_V_read <= ap_const_logic_0;
        end if; 
    end process;

    indvar_flatten_next5_fu_347_p2 <= std_logic_vector(unsigned(ap_const_lv23_1) + unsigned(indvar_flatten5_reg_265));
    indvar_flatten_next_fu_485_p3 <= 
        ap_const_lv12_1 when (exitcond_flatten_fu_353_p2(0) = '1') else 
        indvar_flatten_op_fu_479_p2;
    indvar_flatten_op_fu_479_p2 <= std_logic_vector(unsigned(indvar_flatten_reg_276) + unsigned(ap_const_lv12_1));

    internal_ap_ready_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            internal_ap_ready <= ap_const_logic_1;
        else 
            internal_ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    macRegisters_0_V_fu_828_p2 <= std_logic_vector(unsigned(p_Val2_s_141_reg_1174) + unsigned(tmp1_fu_822_p2));
    macRegisters_1_V_fu_842_p2 <= std_logic_vector(unsigned(p_Val2_75_1_reg_1184) + unsigned(tmp2_fu_836_p2));
    macRegisters_2_V_fu_856_p2 <= std_logic_vector(unsigned(p_Val2_75_2_reg_1194) + unsigned(tmp3_fu_850_p2));
    macRegisters_3_V_fu_870_p2 <= std_logic_vector(unsigned(p_Val2_75_3_reg_1204) + unsigned(tmp4_fu_864_p2));
    nm_1_fu_401_p2 <= std_logic_vector(unsigned(ap_const_lv5_1) + unsigned(nm_mid_fu_359_p3));
    nm_mid2_fu_449_p3 <= 
        nm_1_fu_401_p2 when (tmp_73_mid_fu_395_p2(0) = '1') else 
        nm_mid_fu_359_p3;
    nm_mid_fu_359_p3 <= 
        ap_const_lv5_0 when (exitcond_flatten_fu_353_p2(0) = '1') else 
        nm_reg_287;
    nm_t_mid2_fu_441_p3 <= 
        tmp_620_fu_421_p1 when (tmp_73_mid_fu_395_p2(0) = '1') else 
        nm_t_mid_fu_375_p3;
    nm_t_mid_fu_375_p3 <= 
        ap_const_lv4_0 when (exitcond_flatten_fu_353_p2(0) = '1') else 
        tmp_fu_329_p1;
    not_exitcond_flatten_fu_383_p2 <= (exitcond_flatten_fu_353_p2 xor ap_const_lv1_1);

    out_V_V_blk_n_assign_proc : process(out_V_V_full_n, ap_block_pp0_stage0, ap_enable_reg_pp0_iter3, tmp_82_reg_1135_pp0_iter2_reg)
    begin
        if (((tmp_82_reg_1135_pp0_iter2_reg = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            out_V_V_blk_n <= out_V_V_full_n;
        else 
            out_V_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    out_V_V_din <= (((p_Val2_20_3_fu_1061_p2 & p_Val2_20_2_fu_1018_p2) & p_Val2_20_1_fu_975_p2) & p_Val2_7_fu_932_p2);

    out_V_V_write_assign_proc : process(ap_enable_reg_pp0_iter3, tmp_82_reg_1135_pp0_iter2_reg, ap_block_pp0_stage0_11001)
    begin
        if (((tmp_82_reg_1135_pp0_iter2_reg = ap_const_lv1_1) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            out_V_V_write <= ap_const_logic_1;
        else 
            out_V_V_write <= ap_const_logic_0;
        end if; 
    end process;

    p_Val2_1_fu_583_p0 <= p_s_fu_500_p1(8 - 1 downto 0);
    p_Val2_1_fu_583_p1 <= weights1_m_weights_V_1_q0;
    p_Val2_1_fu_583_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(p_Val2_1_fu_583_p0) * signed(p_Val2_1_fu_583_p1))), 16));
    p_Val2_20_1_fu_975_p2 <= std_logic_vector(unsigned(macRegisters_1_V_fu_842_p2) + unsigned(tmp_96_fu_938_p18));
    p_Val2_20_2_fu_1018_p2 <= std_logic_vector(unsigned(macRegisters_2_V_fu_856_p2) + unsigned(tmp_97_fu_981_p18));
    p_Val2_20_3_fu_1061_p2 <= std_logic_vector(unsigned(macRegisters_3_V_fu_870_p2) + unsigned(tmp_98_fu_1024_p18));
    p_Val2_2_fu_659_p0 <= p_s_fu_500_p1(8 - 1 downto 0);
    p_Val2_2_fu_659_p1 <= weights1_m_weights_V_2_q0;
    p_Val2_2_fu_659_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(p_Val2_2_fu_659_p0) * signed(p_Val2_2_fu_659_p1))), 16));
    p_Val2_3_fu_735_p0 <= p_s_fu_500_p1(8 - 1 downto 0);
    p_Val2_3_fu_735_p1 <= weights1_m_weights_V_3_q0;
    p_Val2_3_fu_735_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(p_Val2_3_fu_735_p0) * signed(p_Val2_3_fu_735_p1))), 16));
    p_Val2_7_fu_932_p2 <= std_logic_vector(unsigned(macRegisters_0_V_fu_828_p2) + unsigned(tmp_95_fu_895_p18));
    p_Val2_s_fu_507_p0 <= p_s_fu_500_p1(8 - 1 downto 0);
    p_Val2_s_fu_507_p1 <= weights1_m_weights_V_q0;
    p_Val2_s_fu_507_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(p_Val2_s_fu_507_p0) * signed(p_Val2_s_fu_507_p1))), 16));
        p_s_fu_500_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_V_reg_1149),16));

    qb_assign_1_1_fu_649_p2 <= (tmp_625_fu_607_p3 and tmp_203_1_fu_643_p2);
    qb_assign_1_2_fu_725_p2 <= (tmp_628_fu_683_p3 and tmp_203_2_fu_719_p2);
    qb_assign_1_3_fu_801_p2 <= (tmp_631_fu_759_p3 and tmp_203_3_fu_795_p2);
    qb_assign_1_fu_573_p2 <= (tmp_80_fu_567_p2 and tmp_622_fu_531_p3);

    real_start_assign_proc : process(ap_start, start_full_n, start_once_reg)
    begin
        if (((start_once_reg = ap_const_logic_0) and (start_full_n = ap_const_logic_0))) then 
            real_start <= ap_const_logic_0;
        else 
            real_start <= ap_start;
        end if; 
    end process;

    sf_1_fu_473_p2 <= std_logic_vector(unsigned(sf_mid2_fu_413_p3) + unsigned(ap_const_lv7_1));
    sf_cast1_fu_457_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sf_mid2_fu_413_p3),10));
    sf_mid2_fu_413_p3 <= 
        ap_const_lv7_0 when (tmp_s_fu_407_p2(0) = '1') else 
        sf_reg_298;
    start_out <= real_start;

    start_write_assign_proc : process(real_start, start_once_reg)
    begin
        if (((start_once_reg = ap_const_logic_0) and (real_start = ap_const_logic_1))) then 
            start_write <= ap_const_logic_1;
        else 
            start_write <= ap_const_logic_0;
        end if; 
    end process;

    tmp1_fu_822_p2 <= std_logic_vector(unsigned(tmp_81_fu_819_p1) + unsigned(macRegisters_0_V_3_fu_184));
    tmp2_fu_836_p2 <= std_logic_vector(unsigned(tmp_204_1_fu_833_p1) + unsigned(macRegisters_1_V_3_fu_188));
    tmp3_fu_850_p2 <= std_logic_vector(unsigned(tmp_204_2_fu_847_p1) + unsigned(macRegisters_2_V_3_fu_192));
    tmp4_fu_864_p2 <= std_logic_vector(unsigned(tmp_204_3_fu_861_p1) + unsigned(macRegisters_3_V_3_fu_196));
    tmp_203_1_fu_643_p2 <= "0" when (tmp_86_fu_635_p3 = ap_const_lv6_0) else "1";
    tmp_203_2_fu_719_p2 <= "0" when (tmp_90_fu_711_p3 = ap_const_lv6_0) else "1";
    tmp_203_3_fu_795_p2 <= "0" when (tmp_94_fu_787_p3 = ap_const_lv6_0) else "1";
    tmp_204_1_fu_833_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(qb_assign_1_1_reg_1189),8));
    tmp_204_2_fu_847_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(qb_assign_1_2_reg_1199),8));
    tmp_204_3_fu_861_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(qb_assign_1_3_reg_1209),8));
    tmp_54_fu_389_p2 <= "1" when (sf_reg_298 = ap_const_lv7_40) else "0";
    tmp_620_fu_421_p1 <= nm_1_fu_401_p2(4 - 1 downto 0);
    tmp_621_fu_513_p3 <= p_Val2_s_fu_507_p2(15 downto 15);
    tmp_622_fu_531_p3 <= p_Val2_s_fu_507_p2(6 downto 6);
    tmp_623_fu_539_p1 <= p_Val2_s_fu_507_p2(1 - 1 downto 0);
    tmp_624_fu_589_p3 <= p_Val2_1_fu_583_p2(15 downto 15);
    tmp_625_fu_607_p3 <= p_Val2_1_fu_583_p2(6 downto 6);
    tmp_626_fu_615_p1 <= p_Val2_1_fu_583_p2(1 - 1 downto 0);
    tmp_627_fu_665_p3 <= p_Val2_2_fu_659_p2(15 downto 15);
    tmp_628_fu_683_p3 <= p_Val2_2_fu_659_p2(6 downto 6);
    tmp_629_fu_691_p1 <= p_Val2_2_fu_659_p2(1 - 1 downto 0);
    tmp_630_fu_741_p3 <= p_Val2_3_fu_735_p2(15 downto 15);
    tmp_631_fu_759_p3 <= p_Val2_3_fu_735_p2(6 downto 6);
    tmp_632_fu_767_p1 <= p_Val2_3_fu_735_p2(1 - 1 downto 0);
    tmp_72_fu_333_p3 <= (tmp_fu_329_p1 & ap_const_lv6_0);
    tmp_72_mid1_fu_425_p3 <= (tmp_620_fu_421_p1 & ap_const_lv6_0);
    tmp_72_mid2_fu_433_p3 <= 
        tmp_72_mid1_fu_425_p3 when (tmp_73_mid_fu_395_p2(0) = '1') else 
        tmp_72_mid_fu_367_p3;
    tmp_72_mid_fu_367_p3 <= 
        ap_const_lv10_0 when (exitcond_flatten_fu_353_p2(0) = '1') else 
        tmp_72_fu_333_p3;
    tmp_73_mid_fu_395_p2 <= (tmp_54_fu_389_p2 and not_exitcond_flatten_fu_383_p2);
    tmp_74_fu_461_p2 <= std_logic_vector(unsigned(sf_cast1_fu_457_p1) + unsigned(tmp_72_mid2_fu_433_p3));
    tmp_75_fu_493_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_74_reg_1130),64));
    tmp_77_fu_543_p2 <= (tmp_623_fu_539_p1 or tmp_621_fu_513_p3);
    tmp_78_fu_549_p4 <= p_Val2_s_fu_507_p2(5 downto 1);
    tmp_79_fu_559_p3 <= (tmp_78_fu_549_p4 & tmp_77_fu_543_p2);
    tmp_80_fu_567_p2 <= "0" when (tmp_79_fu_559_p3 = ap_const_lv6_0) else "1";
    tmp_81_fu_819_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(qb_assign_1_reg_1179),8));
    tmp_82_fu_467_p2 <= "1" when (sf_mid2_fu_413_p3 = ap_const_lv7_3F) else "0";
    tmp_84_fu_619_p2 <= (tmp_626_fu_615_p1 or tmp_624_fu_589_p3);
    tmp_85_fu_625_p4 <= p_Val2_1_fu_583_p2(5 downto 1);
    tmp_86_fu_635_p3 <= (tmp_85_fu_625_p4 & tmp_84_fu_619_p2);
    tmp_88_fu_695_p2 <= (tmp_629_fu_691_p1 or tmp_627_fu_665_p3);
    tmp_89_fu_701_p4 <= p_Val2_2_fu_659_p2(5 downto 1);
    tmp_90_fu_711_p3 <= (tmp_89_fu_701_p4 & tmp_88_fu_695_p2);
    tmp_92_fu_771_p2 <= (tmp_632_fu_767_p1 or tmp_630_fu_741_p3);
    tmp_93_fu_777_p4 <= p_Val2_3_fu_735_p2(5 downto 1);
    tmp_94_fu_787_p3 <= (tmp_93_fu_777_p4 & tmp_92_fu_771_p2);
    tmp_fu_329_p1 <= nm_reg_287(4 - 1 downto 0);
    tmp_s_fu_407_p2 <= (tmp_73_mid_fu_395_p2 or exitcond_flatten_fu_353_p2);
    weights1_m_weights_V_1_address0 <= tmp_75_fu_493_p1(10 - 1 downto 0);

    weights1_m_weights_V_1_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            weights1_m_weights_V_1_ce0 <= ap_const_logic_1;
        else 
            weights1_m_weights_V_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    weights1_m_weights_V_2_address0 <= tmp_75_fu_493_p1(10 - 1 downto 0);

    weights1_m_weights_V_2_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            weights1_m_weights_V_2_ce0 <= ap_const_logic_1;
        else 
            weights1_m_weights_V_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    weights1_m_weights_V_3_address0 <= tmp_75_fu_493_p1(10 - 1 downto 0);

    weights1_m_weights_V_3_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            weights1_m_weights_V_3_ce0 <= ap_const_logic_1;
        else 
            weights1_m_weights_V_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    weights1_m_weights_V_address0 <= tmp_75_fu_493_p1(10 - 1 downto 0);

    weights1_m_weights_V_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            weights1_m_weights_V_ce0 <= ap_const_logic_1;
        else 
            weights1_m_weights_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

end behav;
