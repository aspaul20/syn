-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.2
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity Conv1DMac_new415 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    start_full_n : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    start_out : OUT STD_LOGIC;
    start_write : OUT STD_LOGIC;
    in_V_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
    in_V_V_empty_n : IN STD_LOGIC;
    in_V_V_read : OUT STD_LOGIC;
    out_V_V_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    out_V_V_full_n : IN STD_LOGIC;
    out_V_V_write : OUT STD_LOGIC );
end;


architecture behav of Conv1DMac_new415 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv19_0 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000000000";
    constant ap_const_lv12_0 : STD_LOGIC_VECTOR (11 downto 0) := "000000000000";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv19_40000 : STD_LOGIC_VECTOR (18 downto 0) := "1000000000000000000";
    constant ap_const_lv19_1 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000000001";
    constant ap_const_lv12_400 : STD_LOGIC_VECTOR (11 downto 0) := "010000000000";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv7_40 : STD_LOGIC_VECTOR (6 downto 0) := "1000000";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv7_3F : STD_LOGIC_VECTOR (6 downto 0) := "0111111";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv12_1 : STD_LOGIC_VECTOR (11 downto 0) := "000000000001";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv8_DC : STD_LOGIC_VECTOR (7 downto 0) := "11011100";
    constant ap_const_lv8_F3 : STD_LOGIC_VECTOR (7 downto 0) := "11110011";
    constant ap_const_lv8_8 : STD_LOGIC_VECTOR (7 downto 0) := "00001000";
    constant ap_const_lv8_5 : STD_LOGIC_VECTOR (7 downto 0) := "00000101";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv8_EC : STD_LOGIC_VECTOR (7 downto 0) := "11101100";
    constant ap_const_lv8_8E : STD_LOGIC_VECTOR (7 downto 0) := "10001110";
    constant ap_const_lv8_11 : STD_LOGIC_VECTOR (7 downto 0) := "00010001";
    constant ap_const_lv8_FC : STD_LOGIC_VECTOR (7 downto 0) := "11111100";
    constant ap_const_lv8_10 : STD_LOGIC_VECTOR (7 downto 0) := "00010000";
    constant ap_const_lv8_BC : STD_LOGIC_VECTOR (7 downto 0) := "10111100";
    constant ap_const_lv8_D : STD_LOGIC_VECTOR (7 downto 0) := "00001101";
    constant ap_const_lv8_EB : STD_LOGIC_VECTOR (7 downto 0) := "11101011";
    constant ap_const_lv8_F : STD_LOGIC_VECTOR (7 downto 0) := "00001111";
    constant ap_const_lv8_27 : STD_LOGIC_VECTOR (7 downto 0) := "00100111";
    constant ap_const_lv8_D6 : STD_LOGIC_VECTOR (7 downto 0) := "11010110";
    constant ap_const_lv8_FD : STD_LOGIC_VECTOR (7 downto 0) := "11111101";
    constant ap_const_lv8_DB : STD_LOGIC_VECTOR (7 downto 0) := "11011011";
    constant ap_const_lv8_2 : STD_LOGIC_VECTOR (7 downto 0) := "00000010";
    constant ap_const_lv8_B5 : STD_LOGIC_VECTOR (7 downto 0) := "10110101";
    constant ap_const_lv8_ED : STD_LOGIC_VECTOR (7 downto 0) := "11101101";
    constant ap_const_lv8_60 : STD_LOGIC_VECTOR (7 downto 0) := "01100000";
    constant ap_const_lv8_B : STD_LOGIC_VECTOR (7 downto 0) := "00001011";
    constant ap_const_lv8_FB : STD_LOGIC_VECTOR (7 downto 0) := "11111011";
    constant ap_const_lv8_EE : STD_LOGIC_VECTOR (7 downto 0) := "11101110";
    constant ap_const_lv8_1D : STD_LOGIC_VECTOR (7 downto 0) := "00011101";
    constant ap_const_lv8_C : STD_LOGIC_VECTOR (7 downto 0) := "00001100";
    constant ap_const_lv8_43 : STD_LOGIC_VECTOR (7 downto 0) := "01000011";
    constant ap_const_lv8_1A : STD_LOGIC_VECTOR (7 downto 0) := "00011010";
    constant ap_const_lv8_22 : STD_LOGIC_VECTOR (7 downto 0) := "00100010";
    constant ap_const_lv8_F8 : STD_LOGIC_VECTOR (7 downto 0) := "11111000";
    constant ap_const_lv8_B3 : STD_LOGIC_VECTOR (7 downto 0) := "10110011";
    constant ap_const_lv8_C7 : STD_LOGIC_VECTOR (7 downto 0) := "11000111";
    constant ap_const_lv8_6E : STD_LOGIC_VECTOR (7 downto 0) := "01101110";
    constant ap_const_lv8_21 : STD_LOGIC_VECTOR (7 downto 0) := "00100001";
    constant ap_const_lv8_30 : STD_LOGIC_VECTOR (7 downto 0) := "00110000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";

    signal real_start : STD_LOGIC;
    signal start_once_reg : STD_LOGIC := '0';
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (2 downto 0) := "001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal internal_ap_ready : STD_LOGIC;
    signal weights4_m_weights_V_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal weights4_m_weights_V_ce0 : STD_LOGIC;
    signal weights4_m_weights_V_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal weights4_m_weights_V_1_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal weights4_m_weights_V_1_ce0 : STD_LOGIC;
    signal weights4_m_weights_V_1_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal weights4_m_weights_V_2_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal weights4_m_weights_V_2_ce0 : STD_LOGIC;
    signal weights4_m_weights_V_2_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal weights4_m_weights_V_3_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal weights4_m_weights_V_3_ce0 : STD_LOGIC;
    signal weights4_m_weights_V_3_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal in_V_V_blk_n : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal exitcond_flatten3_reg_1124 : STD_LOGIC_VECTOR (0 downto 0);
    signal out_V_V_blk_n : STD_LOGIC;
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal tmp_62_reg_1151 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_62_reg_1151_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal indvar_flatten3_reg_281 : STD_LOGIC_VECTOR (18 downto 0);
    signal indvar_flatten_reg_292 : STD_LOGIC_VECTOR (11 downto 0);
    signal nm_reg_303 : STD_LOGIC_VECTOR (4 downto 0);
    signal sf_reg_314 : STD_LOGIC_VECTOR (6 downto 0);
    signal exitcond_flatten3_fu_357_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state2_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal exitcond_flatten3_reg_1124_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal indvar_flatten_next3_fu_363_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal nm_t_mid2_fu_457_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal nm_t_mid2_reg_1133 : STD_LOGIC_VECTOR (3 downto 0);
    signal nm_t_mid2_reg_1133_pp0_iter1_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal nm_t_mid2_reg_1133_pp0_iter2_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal nm_mid2_fu_465_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_42_fu_477_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_42_reg_1146 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_62_fu_483_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_62_reg_1151_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal sf_1_fu_489_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal indvar_flatten_next_fu_501_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_V_reg_1165 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Val2_s_139_reg_1190 : STD_LOGIC_VECTOR (7 downto 0);
    signal qb_assign_2_fu_589_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal qb_assign_2_reg_1195 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Val2_81_1_reg_1200 : STD_LOGIC_VECTOR (7 downto 0);
    signal qb_assign_2_1_fu_665_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal qb_assign_2_1_reg_1205 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Val2_81_2_reg_1210 : STD_LOGIC_VECTOR (7 downto 0);
    signal qb_assign_2_2_fu_741_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal qb_assign_2_2_reg_1215 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Val2_81_3_reg_1220 : STD_LOGIC_VECTOR (7 downto 0);
    signal qb_assign_2_3_fu_817_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal qb_assign_2_3_reg_1225 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state2 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal tmp_43_fu_509_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal macRegisters_0_V_1_fu_200 : STD_LOGIC_VECTOR (7 downto 0);
    signal macRegisters_0_V_fu_844_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal macRegisters_1_V_1_fu_204 : STD_LOGIC_VECTOR (7 downto 0);
    signal macRegisters_1_V_fu_858_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal macRegisters_2_V_1_fu_208 : STD_LOGIC_VECTOR (7 downto 0);
    signal macRegisters_2_V_fu_872_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal macRegisters_3_V_1_fu_212 : STD_LOGIC_VECTOR (7 downto 0);
    signal macRegisters_3_V_fu_886_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_fu_345_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal exitcond_flatten_fu_369_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_s_fu_349_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_353_fu_405_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal not_exitcond_flatten_fu_399_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal nm_mid_fu_375_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_91_mid_fu_411_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_354_fu_423_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal nm_1_fu_417_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_594_fu_437_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_90_mid1_fu_441_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_90_mid_fu_383_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal nm_t_mid_fu_391_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal sf_mid2_fu_429_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal sf_cast1_fu_473_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_90_mid2_fu_449_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal indvar_flatten_op_fu_495_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal p_Val2_s_fu_523_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_s_fu_516_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Val2_s_fu_523_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Val2_s_fu_523_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_597_fu_555_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_595_fu_529_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_46_fu_565_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_45_fu_559_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_47_fu_575_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_48_fu_583_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_596_fu_547_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Val2_1_fu_599_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Val2_1_fu_599_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Val2_1_fu_599_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_600_fu_631_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_598_fu_605_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_52_fu_641_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_51_fu_635_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_53_fu_651_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_227_1_fu_659_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_599_fu_623_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Val2_2_fu_675_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Val2_2_fu_675_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Val2_2_fu_675_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_603_fu_707_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_601_fu_681_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_56_fu_717_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_55_fu_711_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_57_fu_727_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_227_2_fu_735_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_602_fu_699_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Val2_3_fu_751_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Val2_3_fu_751_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Val2_3_fu_751_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_606_fu_783_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_604_fu_757_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_60_fu_793_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_59_fu_787_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_61_fu_803_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_227_3_fu_811_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_605_fu_775_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_49_fu_835_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp1_fu_838_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_228_1_fu_849_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp2_fu_852_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_228_2_fu_863_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp3_fu_866_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_228_3_fu_877_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp4_fu_880_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_63_fu_911_p18 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_64_fu_954_p18 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_65_fu_997_p18 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_66_fu_1040_p18 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Val2_22_3_fu_1077_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Val2_22_2_fu_1034_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Val2_22_1_fu_991_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Val2_4_fu_948_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;

    component computeS1_mux_164DeQ_x_x_x IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        din5_WIDTH : INTEGER;
        din6_WIDTH : INTEGER;
        din7_WIDTH : INTEGER;
        din8_WIDTH : INTEGER;
        din9_WIDTH : INTEGER;
        din10_WIDTH : INTEGER;
        din11_WIDTH : INTEGER;
        din12_WIDTH : INTEGER;
        din13_WIDTH : INTEGER;
        din14_WIDTH : INTEGER;
        din15_WIDTH : INTEGER;
        din16_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        din2 : IN STD_LOGIC_VECTOR (7 downto 0);
        din3 : IN STD_LOGIC_VECTOR (7 downto 0);
        din4 : IN STD_LOGIC_VECTOR (7 downto 0);
        din5 : IN STD_LOGIC_VECTOR (7 downto 0);
        din6 : IN STD_LOGIC_VECTOR (7 downto 0);
        din7 : IN STD_LOGIC_VECTOR (7 downto 0);
        din8 : IN STD_LOGIC_VECTOR (7 downto 0);
        din9 : IN STD_LOGIC_VECTOR (7 downto 0);
        din10 : IN STD_LOGIC_VECTOR (7 downto 0);
        din11 : IN STD_LOGIC_VECTOR (7 downto 0);
        din12 : IN STD_LOGIC_VECTOR (7 downto 0);
        din13 : IN STD_LOGIC_VECTOR (7 downto 0);
        din14 : IN STD_LOGIC_VECTOR (7 downto 0);
        din15 : IN STD_LOGIC_VECTOR (7 downto 0);
        din16 : IN STD_LOGIC_VECTOR (3 downto 0);
        dout : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component Conv1DMac_new415_QgW IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component Conv1DMac_new415_Rg6 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component Conv1DMac_new415_Shg IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component Conv1DMac_new415_Thq IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;



begin
    weights4_m_weights_V_U : component Conv1DMac_new415_QgW
    generic map (
        DataWidth => 8,
        AddressRange => 1024,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => weights4_m_weights_V_address0,
        ce0 => weights4_m_weights_V_ce0,
        q0 => weights4_m_weights_V_q0);

    weights4_m_weights_V_1_U : component Conv1DMac_new415_Rg6
    generic map (
        DataWidth => 8,
        AddressRange => 1024,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => weights4_m_weights_V_1_address0,
        ce0 => weights4_m_weights_V_1_ce0,
        q0 => weights4_m_weights_V_1_q0);

    weights4_m_weights_V_2_U : component Conv1DMac_new415_Shg
    generic map (
        DataWidth => 8,
        AddressRange => 1024,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => weights4_m_weights_V_2_address0,
        ce0 => weights4_m_weights_V_2_ce0,
        q0 => weights4_m_weights_V_2_q0);

    weights4_m_weights_V_3_U : component Conv1DMac_new415_Thq
    generic map (
        DataWidth => 8,
        AddressRange => 1024,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => weights4_m_weights_V_3_address0,
        ce0 => weights4_m_weights_V_3_ce0,
        q0 => weights4_m_weights_V_3_q0);

    computeS1_mux_164DeQ_x_x_x_U107 : component computeS1_mux_164DeQ_x_x_x
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 8,
        din3_WIDTH => 8,
        din4_WIDTH => 8,
        din5_WIDTH => 8,
        din6_WIDTH => 8,
        din7_WIDTH => 8,
        din8_WIDTH => 8,
        din9_WIDTH => 8,
        din10_WIDTH => 8,
        din11_WIDTH => 8,
        din12_WIDTH => 8,
        din13_WIDTH => 8,
        din14_WIDTH => 8,
        din15_WIDTH => 8,
        din16_WIDTH => 4,
        dout_WIDTH => 8)
    port map (
        din0 => ap_const_lv8_0,
        din1 => ap_const_lv8_DC,
        din2 => ap_const_lv8_0,
        din3 => ap_const_lv8_0,
        din4 => ap_const_lv8_F3,
        din5 => ap_const_lv8_8,
        din6 => ap_const_lv8_0,
        din7 => ap_const_lv8_5,
        din8 => ap_const_lv8_FF,
        din9 => ap_const_lv8_EC,
        din10 => ap_const_lv8_8E,
        din11 => ap_const_lv8_11,
        din12 => ap_const_lv8_0,
        din13 => ap_const_lv8_FC,
        din14 => ap_const_lv8_10,
        din15 => ap_const_lv8_0,
        din16 => nm_t_mid2_reg_1133_pp0_iter2_reg,
        dout => tmp_63_fu_911_p18);

    computeS1_mux_164DeQ_x_x_x_U108 : component computeS1_mux_164DeQ_x_x_x
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 8,
        din3_WIDTH => 8,
        din4_WIDTH => 8,
        din5_WIDTH => 8,
        din6_WIDTH => 8,
        din7_WIDTH => 8,
        din8_WIDTH => 8,
        din9_WIDTH => 8,
        din10_WIDTH => 8,
        din11_WIDTH => 8,
        din12_WIDTH => 8,
        din13_WIDTH => 8,
        din14_WIDTH => 8,
        din15_WIDTH => 8,
        din16_WIDTH => 4,
        dout_WIDTH => 8)
    port map (
        din0 => ap_const_lv8_0,
        din1 => ap_const_lv8_BC,
        din2 => ap_const_lv8_0,
        din3 => ap_const_lv8_D,
        din4 => ap_const_lv8_EB,
        din5 => ap_const_lv8_F,
        din6 => ap_const_lv8_0,
        din7 => ap_const_lv8_27,
        din8 => ap_const_lv8_D6,
        din9 => ap_const_lv8_FD,
        din10 => ap_const_lv8_8,
        din11 => ap_const_lv8_10,
        din12 => ap_const_lv8_0,
        din13 => ap_const_lv8_0,
        din14 => ap_const_lv8_DB,
        din15 => ap_const_lv8_2,
        din16 => nm_t_mid2_reg_1133_pp0_iter2_reg,
        dout => tmp_64_fu_954_p18);

    computeS1_mux_164DeQ_x_x_x_U109 : component computeS1_mux_164DeQ_x_x_x
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 8,
        din3_WIDTH => 8,
        din4_WIDTH => 8,
        din5_WIDTH => 8,
        din6_WIDTH => 8,
        din7_WIDTH => 8,
        din8_WIDTH => 8,
        din9_WIDTH => 8,
        din10_WIDTH => 8,
        din11_WIDTH => 8,
        din12_WIDTH => 8,
        din13_WIDTH => 8,
        din14_WIDTH => 8,
        din15_WIDTH => 8,
        din16_WIDTH => 4,
        dout_WIDTH => 8)
    port map (
        din0 => ap_const_lv8_0,
        din1 => ap_const_lv8_0,
        din2 => ap_const_lv8_0,
        din3 => ap_const_lv8_B5,
        din4 => ap_const_lv8_8,
        din5 => ap_const_lv8_0,
        din6 => ap_const_lv8_D,
        din7 => ap_const_lv8_2,
        din8 => ap_const_lv8_ED,
        din9 => ap_const_lv8_60,
        din10 => ap_const_lv8_0,
        din11 => ap_const_lv8_B,
        din12 => ap_const_lv8_FB,
        din13 => ap_const_lv8_EE,
        din14 => ap_const_lv8_1D,
        din15 => ap_const_lv8_0,
        din16 => nm_t_mid2_reg_1133_pp0_iter2_reg,
        dout => tmp_65_fu_997_p18);

    computeS1_mux_164DeQ_x_x_x_U110 : component computeS1_mux_164DeQ_x_x_x
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 8,
        din3_WIDTH => 8,
        din4_WIDTH => 8,
        din5_WIDTH => 8,
        din6_WIDTH => 8,
        din7_WIDTH => 8,
        din8_WIDTH => 8,
        din9_WIDTH => 8,
        din10_WIDTH => 8,
        din11_WIDTH => 8,
        din12_WIDTH => 8,
        din13_WIDTH => 8,
        din14_WIDTH => 8,
        din15_WIDTH => 8,
        din16_WIDTH => 4,
        dout_WIDTH => 8)
    port map (
        din0 => ap_const_lv8_0,
        din1 => ap_const_lv8_1D,
        din2 => ap_const_lv8_C,
        din3 => ap_const_lv8_0,
        din4 => ap_const_lv8_43,
        din5 => ap_const_lv8_1A,
        din6 => ap_const_lv8_22,
        din7 => ap_const_lv8_F8,
        din8 => ap_const_lv8_B3,
        din9 => ap_const_lv8_C7,
        din10 => ap_const_lv8_6E,
        din11 => ap_const_lv8_21,
        din12 => ap_const_lv8_30,
        din13 => ap_const_lv8_D,
        din14 => ap_const_lv8_0,
        din15 => ap_const_lv8_0,
        din16 => nm_t_mid2_reg_1133_pp0_iter2_reg,
        dout => tmp_66_fu_1040_p18);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2)) then 
                        ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state2);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                elsif ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    start_once_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                start_once_reg <= ap_const_logic_0;
            else
                if (((internal_ap_ready = ap_const_logic_0) and (real_start = ap_const_logic_1))) then 
                    start_once_reg <= ap_const_logic_1;
                elsif ((internal_ap_ready = ap_const_logic_1)) then 
                    start_once_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    indvar_flatten3_reg_281_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_flatten3_fu_357_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                indvar_flatten3_reg_281 <= indvar_flatten_next3_fu_363_p2;
            elsif ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                indvar_flatten3_reg_281 <= ap_const_lv19_0;
            end if; 
        end if;
    end process;

    indvar_flatten_reg_292_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_flatten3_fu_357_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                indvar_flatten_reg_292 <= indvar_flatten_next_fu_501_p3;
            elsif ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                indvar_flatten_reg_292 <= ap_const_lv12_0;
            end if; 
        end if;
    end process;

    macRegisters_0_V_1_fu_200_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_62_reg_1151_pp0_iter2_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                macRegisters_0_V_1_fu_200 <= macRegisters_0_V_fu_844_p2;
            elsif ((((tmp_62_reg_1151_pp0_iter2_reg = ap_const_lv1_1) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or (not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
                macRegisters_0_V_1_fu_200 <= ap_const_lv8_0;
            end if; 
        end if;
    end process;

    macRegisters_1_V_1_fu_204_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_62_reg_1151_pp0_iter2_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                macRegisters_1_V_1_fu_204 <= macRegisters_1_V_fu_858_p2;
            elsif ((((tmp_62_reg_1151_pp0_iter2_reg = ap_const_lv1_1) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or (not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
                macRegisters_1_V_1_fu_204 <= ap_const_lv8_0;
            end if; 
        end if;
    end process;

    macRegisters_2_V_1_fu_208_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_62_reg_1151_pp0_iter2_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                macRegisters_2_V_1_fu_208 <= macRegisters_2_V_fu_872_p2;
            elsif ((((tmp_62_reg_1151_pp0_iter2_reg = ap_const_lv1_1) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or (not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
                macRegisters_2_V_1_fu_208 <= ap_const_lv8_0;
            end if; 
        end if;
    end process;

    macRegisters_3_V_1_fu_212_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_62_reg_1151_pp0_iter2_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                macRegisters_3_V_1_fu_212 <= macRegisters_3_V_fu_886_p2;
            elsif ((((tmp_62_reg_1151_pp0_iter2_reg = ap_const_lv1_1) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or (not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
                macRegisters_3_V_1_fu_212 <= ap_const_lv8_0;
            end if; 
        end if;
    end process;

    nm_reg_303_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_flatten3_fu_357_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                nm_reg_303 <= nm_mid2_fu_465_p3;
            elsif ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                nm_reg_303 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    sf_reg_314_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_flatten3_fu_357_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                sf_reg_314 <= sf_1_fu_489_p2;
            elsif ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                sf_reg_314 <= ap_const_lv7_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                exitcond_flatten3_reg_1124 <= exitcond_flatten3_fu_357_p2;
                exitcond_flatten3_reg_1124_pp0_iter1_reg <= exitcond_flatten3_reg_1124;
                nm_t_mid2_reg_1133_pp0_iter1_reg <= nm_t_mid2_reg_1133;
                tmp_62_reg_1151_pp0_iter1_reg <= tmp_62_reg_1151;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_flatten3_fu_357_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                nm_t_mid2_reg_1133 <= nm_t_mid2_fu_457_p3;
                tmp_42_reg_1146 <= tmp_42_fu_477_p2;
                tmp_62_reg_1151 <= tmp_62_fu_483_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                nm_t_mid2_reg_1133_pp0_iter2_reg <= nm_t_mid2_reg_1133_pp0_iter1_reg;
                tmp_62_reg_1151_pp0_iter2_reg <= tmp_62_reg_1151_pp0_iter1_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_flatten3_reg_1124_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                p_Val2_81_1_reg_1200 <= p_Val2_1_fu_599_p2(14 downto 7);
                p_Val2_81_2_reg_1210 <= p_Val2_2_fu_675_p2(14 downto 7);
                p_Val2_81_3_reg_1220 <= p_Val2_3_fu_751_p2(14 downto 7);
                p_Val2_s_139_reg_1190 <= p_Val2_s_fu_523_p2(14 downto 7);
                qb_assign_2_1_reg_1205 <= qb_assign_2_1_fu_665_p2;
                qb_assign_2_2_reg_1215 <= qb_assign_2_2_fu_741_p2;
                qb_assign_2_3_reg_1225 <= qb_assign_2_3_fu_817_p2;
                qb_assign_2_reg_1195 <= qb_assign_2_fu_589_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_flatten3_reg_1124 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                tmp_V_reg_1165 <= in_V_V_dout;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (real_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter3, exitcond_flatten3_fu_357_p2, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, ap_enable_reg_pp0_iter2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((exitcond_flatten3_fu_357_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) and not(((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) or ((exitcond_flatten3_fu_357_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone)))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXX";
        end case;
    end process;
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(1);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state6 <= ap_CS_fsm(2);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(in_V_V_empty_n, out_V_V_full_n, ap_enable_reg_pp0_iter1, exitcond_flatten3_reg_1124, ap_enable_reg_pp0_iter3, tmp_62_reg_1151_pp0_iter2_reg)
    begin
                ap_block_pp0_stage0_01001 <= (((tmp_62_reg_1151_pp0_iter2_reg = ap_const_lv1_1) and (out_V_V_full_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1)) or ((exitcond_flatten3_reg_1124 = ap_const_lv1_0) and (in_V_V_empty_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(in_V_V_empty_n, out_V_V_full_n, ap_enable_reg_pp0_iter1, exitcond_flatten3_reg_1124, ap_enable_reg_pp0_iter3, tmp_62_reg_1151_pp0_iter2_reg)
    begin
                ap_block_pp0_stage0_11001 <= (((tmp_62_reg_1151_pp0_iter2_reg = ap_const_lv1_1) and (out_V_V_full_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1)) or ((exitcond_flatten3_reg_1124 = ap_const_lv1_0) and (in_V_V_empty_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(in_V_V_empty_n, out_V_V_full_n, ap_enable_reg_pp0_iter1, exitcond_flatten3_reg_1124, ap_enable_reg_pp0_iter3, tmp_62_reg_1151_pp0_iter2_reg)
    begin
                ap_block_pp0_stage0_subdone <= (((tmp_62_reg_1151_pp0_iter2_reg = ap_const_lv1_1) and (out_V_V_full_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1)) or ((exitcond_flatten3_reg_1124 = ap_const_lv1_0) and (in_V_V_empty_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)));
    end process;


    ap_block_state1_assign_proc : process(real_start, ap_done_reg)
    begin
                ap_block_state1 <= ((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;

        ap_block_state2_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state3_pp0_stage0_iter1_assign_proc : process(in_V_V_empty_n, exitcond_flatten3_reg_1124)
    begin
                ap_block_state3_pp0_stage0_iter1 <= ((exitcond_flatten3_reg_1124 = ap_const_lv1_0) and (in_V_V_empty_n = ap_const_logic_0));
    end process;

        ap_block_state4_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state5_pp0_stage0_iter3_assign_proc : process(out_V_V_full_n, tmp_62_reg_1151_pp0_iter2_reg)
    begin
                ap_block_state5_pp0_stage0_iter3 <= ((tmp_62_reg_1151_pp0_iter2_reg = ap_const_lv1_1) and (out_V_V_full_n = ap_const_logic_0));
    end process;


    ap_condition_pp0_exit_iter0_state2_assign_proc : process(exitcond_flatten3_fu_357_p2)
    begin
        if ((exitcond_flatten3_fu_357_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_done_reg, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(real_start, ap_CS_fsm_state1)
    begin
        if (((real_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_ready <= internal_ap_ready;
    exitcond_flatten3_fu_357_p2 <= "1" when (indvar_flatten3_reg_281 = ap_const_lv19_40000) else "0";
    exitcond_flatten_fu_369_p2 <= "1" when (indvar_flatten_reg_292 = ap_const_lv12_400) else "0";

    in_V_V_blk_n_assign_proc : process(in_V_V_empty_n, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, exitcond_flatten3_reg_1124)
    begin
        if (((exitcond_flatten3_reg_1124 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            in_V_V_blk_n <= in_V_V_empty_n;
        else 
            in_V_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    in_V_V_read_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, exitcond_flatten3_reg_1124, ap_block_pp0_stage0_11001)
    begin
        if (((exitcond_flatten3_reg_1124 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            in_V_V_read <= ap_const_logic_1;
        else 
            in_V_V_read <= ap_const_logic_0;
        end if; 
    end process;

    indvar_flatten_next3_fu_363_p2 <= std_logic_vector(unsigned(ap_const_lv19_1) + unsigned(indvar_flatten3_reg_281));
    indvar_flatten_next_fu_501_p3 <= 
        ap_const_lv12_1 when (exitcond_flatten_fu_369_p2(0) = '1') else 
        indvar_flatten_op_fu_495_p2;
    indvar_flatten_op_fu_495_p2 <= std_logic_vector(unsigned(indvar_flatten_reg_292) + unsigned(ap_const_lv12_1));

    internal_ap_ready_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            internal_ap_ready <= ap_const_logic_1;
        else 
            internal_ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    macRegisters_0_V_fu_844_p2 <= std_logic_vector(unsigned(p_Val2_s_139_reg_1190) + unsigned(tmp1_fu_838_p2));
    macRegisters_1_V_fu_858_p2 <= std_logic_vector(unsigned(p_Val2_81_1_reg_1200) + unsigned(tmp2_fu_852_p2));
    macRegisters_2_V_fu_872_p2 <= std_logic_vector(unsigned(p_Val2_81_2_reg_1210) + unsigned(tmp3_fu_866_p2));
    macRegisters_3_V_fu_886_p2 <= std_logic_vector(unsigned(p_Val2_81_3_reg_1220) + unsigned(tmp4_fu_880_p2));
    nm_1_fu_417_p2 <= std_logic_vector(unsigned(ap_const_lv5_1) + unsigned(nm_mid_fu_375_p3));
    nm_mid2_fu_465_p3 <= 
        nm_1_fu_417_p2 when (tmp_91_mid_fu_411_p2(0) = '1') else 
        nm_mid_fu_375_p3;
    nm_mid_fu_375_p3 <= 
        ap_const_lv5_0 when (exitcond_flatten_fu_369_p2(0) = '1') else 
        nm_reg_303;
    nm_t_mid2_fu_457_p3 <= 
        tmp_594_fu_437_p1 when (tmp_91_mid_fu_411_p2(0) = '1') else 
        nm_t_mid_fu_391_p3;
    nm_t_mid_fu_391_p3 <= 
        ap_const_lv4_0 when (exitcond_flatten_fu_369_p2(0) = '1') else 
        tmp_fu_345_p1;
    not_exitcond_flatten_fu_399_p2 <= (exitcond_flatten_fu_369_p2 xor ap_const_lv1_1);

    out_V_V_blk_n_assign_proc : process(out_V_V_full_n, ap_block_pp0_stage0, ap_enable_reg_pp0_iter3, tmp_62_reg_1151_pp0_iter2_reg)
    begin
        if (((tmp_62_reg_1151_pp0_iter2_reg = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            out_V_V_blk_n <= out_V_V_full_n;
        else 
            out_V_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    out_V_V_din <= (((p_Val2_22_3_fu_1077_p2 & p_Val2_22_2_fu_1034_p2) & p_Val2_22_1_fu_991_p2) & p_Val2_4_fu_948_p2);

    out_V_V_write_assign_proc : process(ap_enable_reg_pp0_iter3, tmp_62_reg_1151_pp0_iter2_reg, ap_block_pp0_stage0_11001)
    begin
        if (((tmp_62_reg_1151_pp0_iter2_reg = ap_const_lv1_1) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            out_V_V_write <= ap_const_logic_1;
        else 
            out_V_V_write <= ap_const_logic_0;
        end if; 
    end process;

    p_Val2_1_fu_599_p0 <= p_s_fu_516_p1(8 - 1 downto 0);
    p_Val2_1_fu_599_p1 <= weights4_m_weights_V_1_q0;
    p_Val2_1_fu_599_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(p_Val2_1_fu_599_p0) * signed(p_Val2_1_fu_599_p1))), 16));
    p_Val2_22_1_fu_991_p2 <= std_logic_vector(unsigned(macRegisters_1_V_fu_858_p2) + unsigned(tmp_64_fu_954_p18));
    p_Val2_22_2_fu_1034_p2 <= std_logic_vector(unsigned(macRegisters_2_V_fu_872_p2) + unsigned(tmp_65_fu_997_p18));
    p_Val2_22_3_fu_1077_p2 <= std_logic_vector(unsigned(macRegisters_3_V_fu_886_p2) + unsigned(tmp_66_fu_1040_p18));
    p_Val2_2_fu_675_p0 <= p_s_fu_516_p1(8 - 1 downto 0);
    p_Val2_2_fu_675_p1 <= weights4_m_weights_V_2_q0;
    p_Val2_2_fu_675_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(p_Val2_2_fu_675_p0) * signed(p_Val2_2_fu_675_p1))), 16));
    p_Val2_3_fu_751_p0 <= p_s_fu_516_p1(8 - 1 downto 0);
    p_Val2_3_fu_751_p1 <= weights4_m_weights_V_3_q0;
    p_Val2_3_fu_751_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(p_Val2_3_fu_751_p0) * signed(p_Val2_3_fu_751_p1))), 16));
    p_Val2_4_fu_948_p2 <= std_logic_vector(unsigned(macRegisters_0_V_fu_844_p2) + unsigned(tmp_63_fu_911_p18));
    p_Val2_s_fu_523_p0 <= p_s_fu_516_p1(8 - 1 downto 0);
    p_Val2_s_fu_523_p1 <= weights4_m_weights_V_q0;
    p_Val2_s_fu_523_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(p_Val2_s_fu_523_p0) * signed(p_Val2_s_fu_523_p1))), 16));
        p_s_fu_516_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_V_reg_1165),16));

    qb_assign_2_1_fu_665_p2 <= (tmp_599_fu_623_p3 and tmp_227_1_fu_659_p2);
    qb_assign_2_2_fu_741_p2 <= (tmp_602_fu_699_p3 and tmp_227_2_fu_735_p2);
    qb_assign_2_3_fu_817_p2 <= (tmp_605_fu_775_p3 and tmp_227_3_fu_811_p2);
    qb_assign_2_fu_589_p2 <= (tmp_596_fu_547_p3 and tmp_48_fu_583_p2);

    real_start_assign_proc : process(ap_start, start_full_n, start_once_reg)
    begin
        if (((start_once_reg = ap_const_logic_0) and (start_full_n = ap_const_logic_0))) then 
            real_start <= ap_const_logic_0;
        else 
            real_start <= ap_start;
        end if; 
    end process;

    sf_1_fu_489_p2 <= std_logic_vector(unsigned(sf_mid2_fu_429_p3) + unsigned(ap_const_lv7_1));
    sf_cast1_fu_473_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sf_mid2_fu_429_p3),10));
    sf_mid2_fu_429_p3 <= 
        ap_const_lv7_0 when (tmp_354_fu_423_p2(0) = '1') else 
        sf_reg_314;
    start_out <= real_start;

    start_write_assign_proc : process(real_start, start_once_reg)
    begin
        if (((start_once_reg = ap_const_logic_0) and (real_start = ap_const_logic_1))) then 
            start_write <= ap_const_logic_1;
        else 
            start_write <= ap_const_logic_0;
        end if; 
    end process;

    tmp1_fu_838_p2 <= std_logic_vector(unsigned(tmp_49_fu_835_p1) + unsigned(macRegisters_0_V_1_fu_200));
    tmp2_fu_852_p2 <= std_logic_vector(unsigned(tmp_228_1_fu_849_p1) + unsigned(macRegisters_1_V_1_fu_204));
    tmp3_fu_866_p2 <= std_logic_vector(unsigned(tmp_228_2_fu_863_p1) + unsigned(macRegisters_2_V_1_fu_208));
    tmp4_fu_880_p2 <= std_logic_vector(unsigned(tmp_228_3_fu_877_p1) + unsigned(macRegisters_3_V_1_fu_212));
    tmp_227_1_fu_659_p2 <= "0" when (tmp_53_fu_651_p3 = ap_const_lv6_0) else "1";
    tmp_227_2_fu_735_p2 <= "0" when (tmp_57_fu_727_p3 = ap_const_lv6_0) else "1";
    tmp_227_3_fu_811_p2 <= "0" when (tmp_61_fu_803_p3 = ap_const_lv6_0) else "1";
    tmp_228_1_fu_849_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(qb_assign_2_1_reg_1205),8));
    tmp_228_2_fu_863_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(qb_assign_2_2_reg_1215),8));
    tmp_228_3_fu_877_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(qb_assign_2_3_reg_1225),8));
    tmp_353_fu_405_p2 <= "1" when (sf_reg_314 = ap_const_lv7_40) else "0";
    tmp_354_fu_423_p2 <= (tmp_91_mid_fu_411_p2 or exitcond_flatten_fu_369_p2);
    tmp_42_fu_477_p2 <= std_logic_vector(unsigned(sf_cast1_fu_473_p1) + unsigned(tmp_90_mid2_fu_449_p3));
    tmp_43_fu_509_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_42_reg_1146),64));
    tmp_45_fu_559_p2 <= (tmp_597_fu_555_p1 or tmp_595_fu_529_p3);
    tmp_46_fu_565_p4 <= p_Val2_s_fu_523_p2(5 downto 1);
    tmp_47_fu_575_p3 <= (tmp_46_fu_565_p4 & tmp_45_fu_559_p2);
    tmp_48_fu_583_p2 <= "0" when (tmp_47_fu_575_p3 = ap_const_lv6_0) else "1";
    tmp_49_fu_835_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(qb_assign_2_reg_1195),8));
    tmp_51_fu_635_p2 <= (tmp_600_fu_631_p1 or tmp_598_fu_605_p3);
    tmp_52_fu_641_p4 <= p_Val2_1_fu_599_p2(5 downto 1);
    tmp_53_fu_651_p3 <= (tmp_52_fu_641_p4 & tmp_51_fu_635_p2);
    tmp_55_fu_711_p2 <= (tmp_603_fu_707_p1 or tmp_601_fu_681_p3);
    tmp_56_fu_717_p4 <= p_Val2_2_fu_675_p2(5 downto 1);
    tmp_57_fu_727_p3 <= (tmp_56_fu_717_p4 & tmp_55_fu_711_p2);
    tmp_594_fu_437_p1 <= nm_1_fu_417_p2(4 - 1 downto 0);
    tmp_595_fu_529_p3 <= p_Val2_s_fu_523_p2(15 downto 15);
    tmp_596_fu_547_p3 <= p_Val2_s_fu_523_p2(6 downto 6);
    tmp_597_fu_555_p1 <= p_Val2_s_fu_523_p2(1 - 1 downto 0);
    tmp_598_fu_605_p3 <= p_Val2_1_fu_599_p2(15 downto 15);
    tmp_599_fu_623_p3 <= p_Val2_1_fu_599_p2(6 downto 6);
    tmp_59_fu_787_p2 <= (tmp_606_fu_783_p1 or tmp_604_fu_757_p3);
    tmp_600_fu_631_p1 <= p_Val2_1_fu_599_p2(1 - 1 downto 0);
    tmp_601_fu_681_p3 <= p_Val2_2_fu_675_p2(15 downto 15);
    tmp_602_fu_699_p3 <= p_Val2_2_fu_675_p2(6 downto 6);
    tmp_603_fu_707_p1 <= p_Val2_2_fu_675_p2(1 - 1 downto 0);
    tmp_604_fu_757_p3 <= p_Val2_3_fu_751_p2(15 downto 15);
    tmp_605_fu_775_p3 <= p_Val2_3_fu_751_p2(6 downto 6);
    tmp_606_fu_783_p1 <= p_Val2_3_fu_751_p2(1 - 1 downto 0);
    tmp_60_fu_793_p4 <= p_Val2_3_fu_751_p2(5 downto 1);
    tmp_61_fu_803_p3 <= (tmp_60_fu_793_p4 & tmp_59_fu_787_p2);
    tmp_62_fu_483_p2 <= "1" when (sf_mid2_fu_429_p3 = ap_const_lv7_3F) else "0";
    tmp_90_mid1_fu_441_p3 <= (tmp_594_fu_437_p1 & ap_const_lv6_0);
    tmp_90_mid2_fu_449_p3 <= 
        tmp_90_mid1_fu_441_p3 when (tmp_91_mid_fu_411_p2(0) = '1') else 
        tmp_90_mid_fu_383_p3;
    tmp_90_mid_fu_383_p3 <= 
        ap_const_lv10_0 when (exitcond_flatten_fu_369_p2(0) = '1') else 
        tmp_s_fu_349_p3;
    tmp_91_mid_fu_411_p2 <= (tmp_353_fu_405_p2 and not_exitcond_flatten_fu_399_p2);
    tmp_fu_345_p1 <= nm_reg_303(4 - 1 downto 0);
    tmp_s_fu_349_p3 <= (tmp_fu_345_p1 & ap_const_lv6_0);
    weights4_m_weights_V_1_address0 <= tmp_43_fu_509_p1(10 - 1 downto 0);

    weights4_m_weights_V_1_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            weights4_m_weights_V_1_ce0 <= ap_const_logic_1;
        else 
            weights4_m_weights_V_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    weights4_m_weights_V_2_address0 <= tmp_43_fu_509_p1(10 - 1 downto 0);

    weights4_m_weights_V_2_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            weights4_m_weights_V_2_ce0 <= ap_const_logic_1;
        else 
            weights4_m_weights_V_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    weights4_m_weights_V_3_address0 <= tmp_43_fu_509_p1(10 - 1 downto 0);

    weights4_m_weights_V_3_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            weights4_m_weights_V_3_ce0 <= ap_const_logic_1;
        else 
            weights4_m_weights_V_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    weights4_m_weights_V_address0 <= tmp_43_fu_509_p1(10 - 1 downto 0);

    weights4_m_weights_V_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            weights4_m_weights_V_ce0 <= ap_const_logic_1;
        else 
            weights4_m_weights_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

end behav;
