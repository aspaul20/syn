-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.2
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ==============================================================

library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity Conv1DMac_new_1_wYie_rom is 
    generic(
             DWIDTH     : integer := 6; 
             AWIDTH     : integer := 10; 
             MEM_SIZE    : integer := 1024
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of Conv1DMac_new_1_wYie_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 to 131=> "000000", 132 => "111111", 133 => "000101", 134 => "000000", 135 => "000010", 
    136 to 138=> "000000", 139 => "000001", 140 => "000000", 141 => "000010", 142 => "000011", 
    143 => "000000", 144 => "111111", 145 => "111110", 146 => "111101", 147 => "111011", 
    148 to 149=> "000001", 150 => "000000", 151 => "000100", 152 to 153=> "000000", 154 => "000001", 
    155 to 156=> "000000", 157 to 158=> "000001", 159 => "000000", 160 => "111101", 161 => "111111", 
    162 => "111100", 163 => "111111", 164 => "000001", 165 => "111101", 166 to 167=> "111110", 
    168 => "000001", 169 => "111110", 170 => "000000", 171 => "111110", 172 => "000010", 
    173 => "000011", 174 => "000001", 175 => "111111", 176 to 177=> "000000", 178 => "111100", 
    179 => "000010", 180 => "111011", 181 to 182=> "000000", 183 => "000001", 184 => "000010", 
    185 => "111111", 186 => "111110", 187 to 188=> "000000", 189 => "111110", 190 to 323=> "000000", 
    324 => "000010", 325 => "111101", 326 => "000000", 327 => "111111", 328 to 330=> "000000", 
    331 => "000101", 332 => "000000", 333 => "000010", 334 => "111000", 335 => "000000", 
    336 => "001000", 337 => "111001", 338 => "111111", 339 => "111110", 340 => "000011", 
    341 => "111111", 342 to 345=> "000000", 346 => "000010", 347 to 349=> "111111", 350 => "000010", 
    351 => "111001", 352 => "111101", 353 => "000110", 354 => "000111", 355 => "000000", 
    356 => "111110", 357 => "111101", 358 => "111011", 359 => "000101", 360 => "111110", 
    361 => "111100", 362 => "000000", 363 => "000010", 364 => "000001", 365 => "000000", 
    366 => "000011", 367 to 369=> "000000", 370 => "000101", 371 => "111110", 372 => "000100", 
    373 => "000000", 374 => "000110", 375 => "000010", 376 => "000000", 377 => "000011", 
    378 => "111101", 379 to 380=> "000000", 381 => "000100", 382 to 387=> "000000", 388 to 389=> "111110", 
    390 => "000000", 391 => "001011", 392 to 394=> "000000", 395 => "000010", 396 => "000000", 
    397 => "001000", 398 => "000100", 399 => "000000", 400 => "111111", 401 => "111011", 
    402 => "000001", 403 => "111110", 404 => "000010", 405 => "000001", 406 => "000000", 
    407 => "111111", 408 to 409=> "000000", 410 => "000111", 411 => "111110", 412 => "000011", 
    413 => "000010", 414 => "111110", 415 => "000100", 416 => "111011", 417 => "111110", 
    418 to 419=> "000000", 420 => "111110", 421 => "000110", 422 => "111111", 423 => "000011", 
    424 => "000101", 425 => "111010", 426 => "000000", 427 => "110110", 428 => "000000", 
    429 => "000110", 430 => "000010", 431 to 433=> "000000", 434 => "000001", 435 => "000101", 
    436 => "000100", 437 => "000000", 438 => "111110", 439 => "000010", 440 => "000011", 
    441 => "000100", 442 => "001000", 443 to 643=> "000000", 644 => "000101", 645 => "000011", 
    646 => "000000", 647 => "000001", 648 to 650=> "000000", 651 => "000001", 652 => "000000", 
    653 => "000101", 654 => "000010", 655 to 656=> "000000", 657 to 658=> "000011", 659 => "000001", 
    660 => "001000", 661 => "111101", 662 => "000000", 663 => "000001", 664 to 665=> "000000", 
    666 => "000011", 667 to 668=> "000000", 669 => "000111", 670 => "000110", 671 => "111101", 
    672 => "000100", 673 => "000001", 674 => "111111", 675 => "001000", 676 => "000001", 
    677 => "000101", 678 => "000100", 679 to 680=> "111101", 681 => "111010", 682 => "000000", 
    683 => "000001", 684 => "000011", 685 => "000101", 686 => "001000", 687 => "111100", 
    688 to 689=> "000000", 690 => "111100", 691 => "000001", 692 => "111100", 693 => "000000", 
    694 => "000100", 695 => "001000", 696 => "000101", 697 to 698=> "111111", 699 to 771=> "000000", 
    772 => "000101", 773 => "001111", 774 => "000000", 775 => "000010", 776 to 778=> "000000", 
    779 => "111001", 780 => "000000", 781 => "000001", 782 => "001000", 783 => "000000", 
    784 => "000011", 785 => "111101", 786 => "000001", 787 => "110100", 788 => "000000", 
    789 => "000010", 790 => "000000", 791 => "000001", 792 to 793=> "000000", 794 => "000001", 
    795 => "010000", 796 => "000101", 797 => "111100", 798 => "000001", 799 => "111010", 
    800 => "111110", 801 to 802=> "000011", 803 => "111110", 804 => "000100", 805 => "000000", 
    806 => "001001", 807 => "111010", 808 => "110110", 809 => "001101", 810 => "000000", 
    811 => "000001", 812 => "000010", 813 => "000001", 814 => "000000", 815 => "111110", 
    816 to 817=> "000000", 818 => "001001", 819 => "000100", 820 => "000110", 821 => "000000", 
    822 => "000011", 823 => "000000", 824 => "000001", 825 => "001001", 826 => "111110", 
    827 to 828=> "000000", 829 => "111010", 830 to 1023=> "000000" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;


Library IEEE;
use IEEE.std_logic_1164.all;

entity Conv1DMac_new_1_wYie is
    generic (
        DataWidth : INTEGER := 6;
        AddressRange : INTEGER := 1024;
        AddressWidth : INTEGER := 10);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of Conv1DMac_new_1_wYie is
    component Conv1DMac_new_1_wYie_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    Conv1DMac_new_1_wYie_rom_U :  component Conv1DMac_new_1_wYie_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


