// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module Conv1DMac_new (
        ap_clk,
        ap_rst,
        ap_start,
        start_full_n,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        start_out,
        start_write,
        in_V_V_dout,
        in_V_V_empty_n,
        in_V_V_read,
        out_V_V_din,
        out_V_V_full_n,
        out_V_V_write
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_pp0_stage0 = 3'd2;
parameter    ap_ST_fsm_state6 = 3'd4;

input   ap_clk;
input   ap_rst;
input   ap_start;
input   start_full_n;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output   start_out;
output   start_write;
input  [7:0] in_V_V_dout;
input   in_V_V_empty_n;
output   in_V_V_read;
output  [31:0] out_V_V_din;
input   out_V_V_full_n;
output   out_V_V_write;

reg ap_done;
reg ap_idle;
reg start_write;
reg in_V_V_read;
reg out_V_V_write;

reg    real_start;
reg    start_once_reg;
reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    internal_ap_ready;
wire   [9:0] weights3_m_weights_V_address0;
reg    weights3_m_weights_V_ce0;
wire   [7:0] weights3_m_weights_V_q0;
wire   [9:0] weights3_m_weights_V_1_address0;
reg    weights3_m_weights_V_1_ce0;
wire   [7:0] weights3_m_weights_V_1_q0;
wire   [9:0] weights3_m_weights_V_2_address0;
reg    weights3_m_weights_V_2_ce0;
wire   [7:0] weights3_m_weights_V_2_q0;
wire   [9:0] weights3_m_weights_V_3_address0;
reg    weights3_m_weights_V_3_ce0;
wire   [7:0] weights3_m_weights_V_3_q0;
reg    in_V_V_blk_n;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
reg   [0:0] exitcond_flatten8_reg_1128;
reg    out_V_V_blk_n;
reg    ap_enable_reg_pp0_iter3;
reg   [0:0] tmp_88_reg_1155;
reg   [0:0] tmp_88_reg_1155_pp0_iter2_reg;
reg   [22:0] indvar_flatten8_reg_285;
reg   [11:0] indvar_flatten_reg_296;
reg   [4:0] nm_reg_307;
reg   [6:0] sf_reg_318;
wire   [0:0] exitcond_flatten8_fu_361_p2;
wire    ap_block_state2_pp0_stage0_iter0;
reg    ap_block_state3_pp0_stage0_iter1;
wire    ap_block_state4_pp0_stage0_iter2;
reg    ap_block_state5_pp0_stage0_iter3;
reg    ap_block_pp0_stage0_11001;
reg   [0:0] exitcond_flatten8_reg_1128_pp0_iter1_reg;
wire   [22:0] indvar_flatten_next8_fu_367_p2;
reg    ap_enable_reg_pp0_iter0;
wire   [3:0] nm_t_mid2_fu_461_p3;
reg   [3:0] nm_t_mid2_reg_1137;
reg   [3:0] nm_t_mid2_reg_1137_pp0_iter1_reg;
reg   [3:0] nm_t_mid2_reg_1137_pp0_iter2_reg;
wire   [4:0] nm_mid2_fu_469_p3;
wire   [9:0] tmp_86_fu_481_p2;
reg   [9:0] tmp_86_reg_1150;
wire   [0:0] tmp_88_fu_487_p2;
reg   [0:0] tmp_88_reg_1155_pp0_iter1_reg;
wire   [6:0] sf_1_fu_493_p2;
wire   [11:0] indvar_flatten_next_fu_505_p3;
reg   [7:0] tmp_V_reg_1169;
reg   [7:0] p_Val2_s_143_reg_1194;
wire   [0:0] qb_assign_1_fu_593_p2;
reg   [0:0] qb_assign_1_reg_1199;
reg   [7:0] p_Val2_75_1_reg_1204;
wire   [0:0] qb_assign_1_1_fu_669_p2;
reg   [0:0] qb_assign_1_1_reg_1209;
reg   [7:0] p_Val2_75_2_reg_1214;
wire   [0:0] qb_assign_1_2_fu_745_p2;
reg   [0:0] qb_assign_1_2_reg_1219;
reg   [7:0] p_Val2_75_3_reg_1224;
wire   [0:0] qb_assign_1_3_fu_821_p2;
reg   [0:0] qb_assign_1_3_reg_1229;
reg    ap_block_state1;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state2;
reg    ap_enable_reg_pp0_iter2;
wire   [63:0] tmp_87_fu_513_p1;
reg    ap_block_pp0_stage0_01001;
reg   [7:0] macRegisters_0_V_6_fu_204;
wire   [7:0] macRegisters_0_V_fu_848_p2;
reg   [7:0] macRegisters_1_V_6_fu_208;
wire   [7:0] macRegisters_1_V_fu_862_p2;
reg   [7:0] macRegisters_2_V_6_fu_212;
wire   [7:0] macRegisters_2_V_fu_876_p2;
reg   [7:0] macRegisters_3_V_6_fu_216;
wire   [7:0] macRegisters_3_V_fu_890_p2;
wire   [3:0] tmp_fu_349_p1;
wire   [0:0] exitcond_flatten_fu_373_p2;
wire   [9:0] tmp_84_fu_353_p3;
wire   [0:0] tmp_360_fu_409_p2;
wire   [0:0] not_exitcond_flatten_fu_403_p2;
wire   [4:0] nm_mid_fu_379_p3;
wire   [0:0] tmp_85_mid_fu_415_p2;
wire   [0:0] tmp_361_fu_427_p2;
wire   [4:0] nm_1_fu_421_p2;
wire   [3:0] tmp_663_fu_441_p1;
wire   [9:0] tmp_84_mid1_fu_445_p3;
wire   [9:0] tmp_84_mid_fu_387_p3;
wire   [3:0] nm_t_mid_fu_395_p3;
wire   [6:0] sf_mid2_fu_433_p3;
wire   [9:0] sf_cast1_fu_477_p1;
wire   [9:0] tmp_84_mid2_fu_453_p3;
wire   [11:0] indvar_flatten_op_fu_499_p2;
wire  signed [7:0] p_Val2_s_fu_527_p0;
wire  signed [15:0] p_s_fu_520_p1;
wire  signed [7:0] p_Val2_s_fu_527_p1;
wire   [15:0] p_Val2_s_fu_527_p2;
wire   [0:0] tmp_666_fu_559_p1;
wire   [0:0] tmp_664_fu_533_p3;
wire   [4:0] tmp_102_fu_569_p4;
wire   [0:0] tmp_101_fu_563_p2;
wire   [5:0] tmp_103_fu_579_p3;
wire   [0:0] tmp_104_fu_587_p2;
wire   [0:0] tmp_665_fu_551_p3;
wire  signed [7:0] p_Val2_1_fu_603_p0;
wire  signed [7:0] p_Val2_1_fu_603_p1;
wire   [15:0] p_Val2_1_fu_603_p2;
wire   [0:0] tmp_669_fu_635_p1;
wire   [0:0] tmp_667_fu_609_p3;
wire   [4:0] tmp_108_fu_645_p4;
wire   [0:0] tmp_107_fu_639_p2;
wire   [5:0] tmp_109_fu_655_p3;
wire   [0:0] tmp_203_1_fu_663_p2;
wire   [0:0] tmp_668_fu_627_p3;
wire  signed [7:0] p_Val2_2_fu_679_p0;
wire  signed [7:0] p_Val2_2_fu_679_p1;
wire   [15:0] p_Val2_2_fu_679_p2;
wire   [0:0] tmp_672_fu_711_p1;
wire   [0:0] tmp_670_fu_685_p3;
wire   [4:0] tmp_112_fu_721_p4;
wire   [0:0] tmp_111_fu_715_p2;
wire   [5:0] tmp_113_fu_731_p3;
wire   [0:0] tmp_203_2_fu_739_p2;
wire   [0:0] tmp_671_fu_703_p3;
wire  signed [7:0] p_Val2_3_fu_755_p0;
wire  signed [7:0] p_Val2_3_fu_755_p1;
wire   [15:0] p_Val2_3_fu_755_p2;
wire   [0:0] tmp_675_fu_787_p1;
wire   [0:0] tmp_673_fu_761_p3;
wire   [4:0] tmp_116_fu_797_p4;
wire   [0:0] tmp_115_fu_791_p2;
wire   [5:0] tmp_117_fu_807_p3;
wire   [0:0] tmp_203_3_fu_815_p2;
wire   [0:0] tmp_674_fu_779_p3;
wire   [7:0] tmp_105_fu_839_p1;
wire   [7:0] tmp1_fu_842_p2;
wire   [7:0] tmp_204_1_fu_853_p1;
wire   [7:0] tmp2_fu_856_p2;
wire   [7:0] tmp_204_2_fu_867_p1;
wire   [7:0] tmp3_fu_870_p2;
wire   [7:0] tmp_204_3_fu_881_p1;
wire   [7:0] tmp4_fu_884_p2;
wire   [7:0] tmp_s_fu_915_p18;
wire   [7:0] tmp_167_fu_958_p18;
wire   [7:0] tmp_168_fu_1001_p18;
wire   [7:0] tmp_169_fu_1044_p18;
wire   [7:0] p_Val2_20_3_fu_1081_p2;
wire   [7:0] p_Val2_20_2_fu_1038_p2;
wire   [7:0] p_Val2_20_1_fu_995_p2;
wire   [7:0] p_Val2_9_fu_952_p2;
wire    ap_CS_fsm_state6;
reg   [2:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;

// power-on initialization
initial begin
#0 start_once_reg = 1'b0;
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 3'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
end

Conv1DMac_new_weiKfY #(
    .DataWidth( 8 ),
    .AddressRange( 1024 ),
    .AddressWidth( 10 ))
weights3_m_weights_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(weights3_m_weights_V_address0),
    .ce0(weights3_m_weights_V_ce0),
    .q0(weights3_m_weights_V_q0)
);

Conv1DMac_new_weiLf8 #(
    .DataWidth( 8 ),
    .AddressRange( 1024 ),
    .AddressWidth( 10 ))
weights3_m_weights_V_1_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(weights3_m_weights_V_1_address0),
    .ce0(weights3_m_weights_V_1_ce0),
    .q0(weights3_m_weights_V_1_q0)
);

Conv1DMac_new_weiMgi #(
    .DataWidth( 8 ),
    .AddressRange( 1024 ),
    .AddressWidth( 10 ))
weights3_m_weights_V_2_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(weights3_m_weights_V_2_address0),
    .ce0(weights3_m_weights_V_2_ce0),
    .q0(weights3_m_weights_V_2_q0)
);

Conv1DMac_new_weiNgs #(
    .DataWidth( 8 ),
    .AddressRange( 1024 ),
    .AddressWidth( 10 ))
weights3_m_weights_V_3_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(weights3_m_weights_V_3_address0),
    .ce0(weights3_m_weights_V_3_ce0),
    .q0(weights3_m_weights_V_3_q0)
);

computeS1_mux_164DeQ_x_x #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 8 ),
    .din3_WIDTH( 8 ),
    .din4_WIDTH( 8 ),
    .din5_WIDTH( 8 ),
    .din6_WIDTH( 8 ),
    .din7_WIDTH( 8 ),
    .din8_WIDTH( 8 ),
    .din9_WIDTH( 8 ),
    .din10_WIDTH( 8 ),
    .din11_WIDTH( 8 ),
    .din12_WIDTH( 8 ),
    .din13_WIDTH( 8 ),
    .din14_WIDTH( 8 ),
    .din15_WIDTH( 8 ),
    .din16_WIDTH( 4 ),
    .dout_WIDTH( 8 ))
computeS1_mux_164DeQ_x_x_U84(
    .din0(8'd33),
    .din1(8'd7),
    .din2(8'd29),
    .din3(8'd37),
    .din4(8'd21),
    .din5(8'd9),
    .din6(8'd252),
    .din7(8'd13),
    .din8(8'd8),
    .din9(8'd36),
    .din10(8'd6),
    .din11(8'd35),
    .din12(8'd10),
    .din13(8'd245),
    .din14(8'd41),
    .din15(8'd68),
    .din16(nm_t_mid2_reg_1137_pp0_iter2_reg),
    .dout(tmp_s_fu_915_p18)
);

computeS1_mux_164DeQ_x_x #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 8 ),
    .din3_WIDTH( 8 ),
    .din4_WIDTH( 8 ),
    .din5_WIDTH( 8 ),
    .din6_WIDTH( 8 ),
    .din7_WIDTH( 8 ),
    .din8_WIDTH( 8 ),
    .din9_WIDTH( 8 ),
    .din10_WIDTH( 8 ),
    .din11_WIDTH( 8 ),
    .din12_WIDTH( 8 ),
    .din13_WIDTH( 8 ),
    .din14_WIDTH( 8 ),
    .din15_WIDTH( 8 ),
    .din16_WIDTH( 4 ),
    .dout_WIDTH( 8 ))
computeS1_mux_164DeQ_x_x_U85(
    .din0(8'd0),
    .din1(8'd0),
    .din2(8'd50),
    .din3(8'd0),
    .din4(8'd27),
    .din5(8'd254),
    .din6(8'd11),
    .din7(8'd12),
    .din8(8'd28),
    .din9(8'd26),
    .din10(8'd30),
    .din11(8'd11),
    .din12(8'd18),
    .din13(8'd0),
    .din14(8'd4),
    .din15(8'd11),
    .din16(nm_t_mid2_reg_1137_pp0_iter2_reg),
    .dout(tmp_167_fu_958_p18)
);

computeS1_mux_164DeQ_x_x #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 8 ),
    .din3_WIDTH( 8 ),
    .din4_WIDTH( 8 ),
    .din5_WIDTH( 8 ),
    .din6_WIDTH( 8 ),
    .din7_WIDTH( 8 ),
    .din8_WIDTH( 8 ),
    .din9_WIDTH( 8 ),
    .din10_WIDTH( 8 ),
    .din11_WIDTH( 8 ),
    .din12_WIDTH( 8 ),
    .din13_WIDTH( 8 ),
    .din14_WIDTH( 8 ),
    .din15_WIDTH( 8 ),
    .din16_WIDTH( 4 ),
    .dout_WIDTH( 8 ))
computeS1_mux_164DeQ_x_x_U86(
    .din0(8'd48),
    .din1(8'd252),
    .din2(8'd11),
    .din3(8'd4),
    .din4(8'd9),
    .din5(8'd40),
    .din6(8'd33),
    .din7(8'd25),
    .din8(8'd39),
    .din9(8'd0),
    .din10(8'd22),
    .din11(8'd11),
    .din12(8'd15),
    .din13(8'd13),
    .din14(8'd9),
    .din15(8'd14),
    .din16(nm_t_mid2_reg_1137_pp0_iter2_reg),
    .dout(tmp_168_fu_1001_p18)
);

computeS1_mux_164DeQ_x_x #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 8 ),
    .din3_WIDTH( 8 ),
    .din4_WIDTH( 8 ),
    .din5_WIDTH( 8 ),
    .din6_WIDTH( 8 ),
    .din7_WIDTH( 8 ),
    .din8_WIDTH( 8 ),
    .din9_WIDTH( 8 ),
    .din10_WIDTH( 8 ),
    .din11_WIDTH( 8 ),
    .din12_WIDTH( 8 ),
    .din13_WIDTH( 8 ),
    .din14_WIDTH( 8 ),
    .din15_WIDTH( 8 ),
    .din16_WIDTH( 4 ),
    .dout_WIDTH( 8 ))
computeS1_mux_164DeQ_x_x_U87(
    .din0(8'd18),
    .din1(8'd6),
    .din2(8'd20),
    .din3(8'd250),
    .din4(8'd96),
    .din5(8'd250),
    .din6(8'd10),
    .din7(8'd7),
    .din8(8'd18),
    .din9(8'd9),
    .din10(8'd29),
    .din11(8'd29),
    .din12(8'd31),
    .din13(8'd30),
    .din14(8'd5),
    .din15(8'd14),
    .din16(nm_t_mid2_reg_1137_pp0_iter2_reg),
    .dout(tmp_169_fu_1044_p18)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state6)) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_condition_pp0_exit_iter0_state2) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state2)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state2);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter3 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((internal_ap_ready == 1'b0) & (real_start == 1'b1))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_flatten8_fu_361_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        indvar_flatten8_reg_285 <= indvar_flatten_next8_fu_367_p2;
    end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        indvar_flatten8_reg_285 <= 23'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_flatten8_fu_361_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        indvar_flatten_reg_296 <= indvar_flatten_next_fu_505_p3;
    end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        indvar_flatten_reg_296 <= 12'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_88_reg_1155_pp0_iter2_reg == 1'd0) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        macRegisters_0_V_6_fu_204 <= macRegisters_0_V_fu_848_p2;
    end else if ((((tmp_88_reg_1155_pp0_iter2_reg == 1'd1) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001)) | (~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1)))) begin
        macRegisters_0_V_6_fu_204 <= 8'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_88_reg_1155_pp0_iter2_reg == 1'd0) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        macRegisters_1_V_6_fu_208 <= macRegisters_1_V_fu_862_p2;
    end else if ((((tmp_88_reg_1155_pp0_iter2_reg == 1'd1) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001)) | (~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1)))) begin
        macRegisters_1_V_6_fu_208 <= 8'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_88_reg_1155_pp0_iter2_reg == 1'd0) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        macRegisters_2_V_6_fu_212 <= macRegisters_2_V_fu_876_p2;
    end else if ((((tmp_88_reg_1155_pp0_iter2_reg == 1'd1) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001)) | (~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1)))) begin
        macRegisters_2_V_6_fu_212 <= 8'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_88_reg_1155_pp0_iter2_reg == 1'd0) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        macRegisters_3_V_6_fu_216 <= macRegisters_3_V_fu_890_p2;
    end else if ((((tmp_88_reg_1155_pp0_iter2_reg == 1'd1) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001)) | (~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1)))) begin
        macRegisters_3_V_6_fu_216 <= 8'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_flatten8_fu_361_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        nm_reg_307 <= nm_mid2_fu_469_p3;
    end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        nm_reg_307 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_flatten8_fu_361_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        sf_reg_318 <= sf_1_fu_493_p2;
    end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        sf_reg_318 <= 7'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        exitcond_flatten8_reg_1128 <= exitcond_flatten8_fu_361_p2;
        exitcond_flatten8_reg_1128_pp0_iter1_reg <= exitcond_flatten8_reg_1128;
        nm_t_mid2_reg_1137_pp0_iter1_reg <= nm_t_mid2_reg_1137;
        tmp_88_reg_1155_pp0_iter1_reg <= tmp_88_reg_1155;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_flatten8_fu_361_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        nm_t_mid2_reg_1137 <= nm_t_mid2_fu_461_p3;
        tmp_86_reg_1150 <= tmp_86_fu_481_p2;
        tmp_88_reg_1155 <= tmp_88_fu_487_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        nm_t_mid2_reg_1137_pp0_iter2_reg <= nm_t_mid2_reg_1137_pp0_iter1_reg;
        tmp_88_reg_1155_pp0_iter2_reg <= tmp_88_reg_1155_pp0_iter1_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_flatten8_reg_1128_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        p_Val2_75_1_reg_1204 <= {{p_Val2_1_fu_603_p2[14:7]}};
        p_Val2_75_2_reg_1214 <= {{p_Val2_2_fu_679_p2[14:7]}};
        p_Val2_75_3_reg_1224 <= {{p_Val2_3_fu_755_p2[14:7]}};
        p_Val2_s_143_reg_1194 <= {{p_Val2_s_fu_527_p2[14:7]}};
        qb_assign_1_1_reg_1209 <= qb_assign_1_1_fu_669_p2;
        qb_assign_1_2_reg_1219 <= qb_assign_1_2_fu_745_p2;
        qb_assign_1_3_reg_1229 <= qb_assign_1_3_fu_821_p2;
        qb_assign_1_reg_1199 <= qb_assign_1_fu_593_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_flatten8_reg_1128 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        tmp_V_reg_1169 <= in_V_V_dout;
    end
end

always @ (*) begin
    if ((exitcond_flatten8_fu_361_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((real_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond_flatten8_reg_1128 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        in_V_V_blk_n = in_V_V_empty_n;
    end else begin
        in_V_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((exitcond_flatten8_reg_1128 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        in_V_V_read = 1'b1;
    end else begin
        in_V_V_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        internal_ap_ready = 1'b1;
    end else begin
        internal_ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_88_reg_1155_pp0_iter2_reg == 1'd1) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        out_V_V_blk_n = out_V_V_full_n;
    end else begin
        out_V_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((tmp_88_reg_1155_pp0_iter2_reg == 1'd1) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        out_V_V_write = 1'b1;
    end else begin
        out_V_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (start_full_n == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (real_start == 1'b1))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        weights3_m_weights_V_1_ce0 = 1'b1;
    end else begin
        weights3_m_weights_V_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        weights3_m_weights_V_2_ce0 = 1'b1;
    end else begin
        weights3_m_weights_V_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        weights3_m_weights_V_3_ce0 = 1'b1;
    end else begin
        weights3_m_weights_V_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        weights3_m_weights_V_ce0 = 1'b1;
    end else begin
        weights3_m_weights_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((exitcond_flatten8_fu_361_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone)) & ~((ap_enable_reg_pp0_iter3 == 1'b1) & (ap_enable_reg_pp0_iter2 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((ap_enable_reg_pp0_iter3 == 1'b1) & (ap_enable_reg_pp0_iter2 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone)) | ((exitcond_flatten8_fu_361_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd2];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = (((tmp_88_reg_1155_pp0_iter2_reg == 1'd1) & (out_V_V_full_n == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b1)) | ((exitcond_flatten8_reg_1128 == 1'd0) & (in_V_V_empty_n == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((tmp_88_reg_1155_pp0_iter2_reg == 1'd1) & (out_V_V_full_n == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b1)) | ((exitcond_flatten8_reg_1128 == 1'd0) & (in_V_V_empty_n == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((tmp_88_reg_1155_pp0_iter2_reg == 1'd1) & (out_V_V_full_n == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b1)) | ((exitcond_flatten8_reg_1128 == 1'd0) & (in_V_V_empty_n == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1)));
end

always @ (*) begin
    ap_block_state1 = ((real_start == 1'b0) | (ap_done_reg == 1'b1));
end

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state3_pp0_stage0_iter1 = ((exitcond_flatten8_reg_1128 == 1'd0) & (in_V_V_empty_n == 1'b0));
end

assign ap_block_state4_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state5_pp0_stage0_iter3 = ((tmp_88_reg_1155_pp0_iter2_reg == 1'd1) & (out_V_V_full_n == 1'b0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_ready = internal_ap_ready;

assign exitcond_flatten8_fu_361_p2 = ((indvar_flatten8_reg_285 == 23'd4194304) ? 1'b1 : 1'b0);

assign exitcond_flatten_fu_373_p2 = ((indvar_flatten_reg_296 == 12'd1024) ? 1'b1 : 1'b0);

assign indvar_flatten_next8_fu_367_p2 = (23'd1 + indvar_flatten8_reg_285);

assign indvar_flatten_next_fu_505_p3 = ((exitcond_flatten_fu_373_p2[0:0] === 1'b1) ? 12'd1 : indvar_flatten_op_fu_499_p2);

assign indvar_flatten_op_fu_499_p2 = (indvar_flatten_reg_296 + 12'd1);

assign macRegisters_0_V_fu_848_p2 = (p_Val2_s_143_reg_1194 + tmp1_fu_842_p2);

assign macRegisters_1_V_fu_862_p2 = (p_Val2_75_1_reg_1204 + tmp2_fu_856_p2);

assign macRegisters_2_V_fu_876_p2 = (p_Val2_75_2_reg_1214 + tmp3_fu_870_p2);

assign macRegisters_3_V_fu_890_p2 = (p_Val2_75_3_reg_1224 + tmp4_fu_884_p2);

assign nm_1_fu_421_p2 = (5'd1 + nm_mid_fu_379_p3);

assign nm_mid2_fu_469_p3 = ((tmp_85_mid_fu_415_p2[0:0] === 1'b1) ? nm_1_fu_421_p2 : nm_mid_fu_379_p3);

assign nm_mid_fu_379_p3 = ((exitcond_flatten_fu_373_p2[0:0] === 1'b1) ? 5'd0 : nm_reg_307);

assign nm_t_mid2_fu_461_p3 = ((tmp_85_mid_fu_415_p2[0:0] === 1'b1) ? tmp_663_fu_441_p1 : nm_t_mid_fu_395_p3);

assign nm_t_mid_fu_395_p3 = ((exitcond_flatten_fu_373_p2[0:0] === 1'b1) ? 4'd0 : tmp_fu_349_p1);

assign not_exitcond_flatten_fu_403_p2 = (exitcond_flatten_fu_373_p2 ^ 1'd1);

assign out_V_V_din = {{{{p_Val2_20_3_fu_1081_p2}, {p_Val2_20_2_fu_1038_p2}}, {p_Val2_20_1_fu_995_p2}}, {p_Val2_9_fu_952_p2}};

assign p_Val2_1_fu_603_p0 = p_s_fu_520_p1;

assign p_Val2_1_fu_603_p1 = weights3_m_weights_V_1_q0;

assign p_Val2_1_fu_603_p2 = ($signed(p_Val2_1_fu_603_p0) * $signed(p_Val2_1_fu_603_p1));

assign p_Val2_20_1_fu_995_p2 = (macRegisters_1_V_fu_862_p2 + tmp_167_fu_958_p18);

assign p_Val2_20_2_fu_1038_p2 = (macRegisters_2_V_fu_876_p2 + tmp_168_fu_1001_p18);

assign p_Val2_20_3_fu_1081_p2 = (macRegisters_3_V_fu_890_p2 + tmp_169_fu_1044_p18);

assign p_Val2_2_fu_679_p0 = p_s_fu_520_p1;

assign p_Val2_2_fu_679_p1 = weights3_m_weights_V_2_q0;

assign p_Val2_2_fu_679_p2 = ($signed(p_Val2_2_fu_679_p0) * $signed(p_Val2_2_fu_679_p1));

assign p_Val2_3_fu_755_p0 = p_s_fu_520_p1;

assign p_Val2_3_fu_755_p1 = weights3_m_weights_V_3_q0;

assign p_Val2_3_fu_755_p2 = ($signed(p_Val2_3_fu_755_p0) * $signed(p_Val2_3_fu_755_p1));

assign p_Val2_9_fu_952_p2 = (macRegisters_0_V_fu_848_p2 + tmp_s_fu_915_p18);

assign p_Val2_s_fu_527_p0 = p_s_fu_520_p1;

assign p_Val2_s_fu_527_p1 = weights3_m_weights_V_q0;

assign p_Val2_s_fu_527_p2 = ($signed(p_Val2_s_fu_527_p0) * $signed(p_Val2_s_fu_527_p1));

assign p_s_fu_520_p1 = $signed(tmp_V_reg_1169);

assign qb_assign_1_1_fu_669_p2 = (tmp_668_fu_627_p3 & tmp_203_1_fu_663_p2);

assign qb_assign_1_2_fu_745_p2 = (tmp_671_fu_703_p3 & tmp_203_2_fu_739_p2);

assign qb_assign_1_3_fu_821_p2 = (tmp_674_fu_779_p3 & tmp_203_3_fu_815_p2);

assign qb_assign_1_fu_593_p2 = (tmp_665_fu_551_p3 & tmp_104_fu_587_p2);

assign sf_1_fu_493_p2 = (sf_mid2_fu_433_p3 + 7'd1);

assign sf_cast1_fu_477_p1 = sf_mid2_fu_433_p3;

assign sf_mid2_fu_433_p3 = ((tmp_361_fu_427_p2[0:0] === 1'b1) ? 7'd0 : sf_reg_318);

assign start_out = real_start;

assign tmp1_fu_842_p2 = (tmp_105_fu_839_p1 + macRegisters_0_V_6_fu_204);

assign tmp2_fu_856_p2 = (tmp_204_1_fu_853_p1 + macRegisters_1_V_6_fu_208);

assign tmp3_fu_870_p2 = (tmp_204_2_fu_867_p1 + macRegisters_2_V_6_fu_212);

assign tmp4_fu_884_p2 = (tmp_204_3_fu_881_p1 + macRegisters_3_V_6_fu_216);

assign tmp_101_fu_563_p2 = (tmp_666_fu_559_p1 | tmp_664_fu_533_p3);

assign tmp_102_fu_569_p4 = {{p_Val2_s_fu_527_p2[5:1]}};

assign tmp_103_fu_579_p3 = {{tmp_102_fu_569_p4}, {tmp_101_fu_563_p2}};

assign tmp_104_fu_587_p2 = ((tmp_103_fu_579_p3 != 6'd0) ? 1'b1 : 1'b0);

assign tmp_105_fu_839_p1 = qb_assign_1_reg_1199;

assign tmp_107_fu_639_p2 = (tmp_669_fu_635_p1 | tmp_667_fu_609_p3);

assign tmp_108_fu_645_p4 = {{p_Val2_1_fu_603_p2[5:1]}};

assign tmp_109_fu_655_p3 = {{tmp_108_fu_645_p4}, {tmp_107_fu_639_p2}};

assign tmp_111_fu_715_p2 = (tmp_672_fu_711_p1 | tmp_670_fu_685_p3);

assign tmp_112_fu_721_p4 = {{p_Val2_2_fu_679_p2[5:1]}};

assign tmp_113_fu_731_p3 = {{tmp_112_fu_721_p4}, {tmp_111_fu_715_p2}};

assign tmp_115_fu_791_p2 = (tmp_675_fu_787_p1 | tmp_673_fu_761_p3);

assign tmp_116_fu_797_p4 = {{p_Val2_3_fu_755_p2[5:1]}};

assign tmp_117_fu_807_p3 = {{tmp_116_fu_797_p4}, {tmp_115_fu_791_p2}};

assign tmp_203_1_fu_663_p2 = ((tmp_109_fu_655_p3 != 6'd0) ? 1'b1 : 1'b0);

assign tmp_203_2_fu_739_p2 = ((tmp_113_fu_731_p3 != 6'd0) ? 1'b1 : 1'b0);

assign tmp_203_3_fu_815_p2 = ((tmp_117_fu_807_p3 != 6'd0) ? 1'b1 : 1'b0);

assign tmp_204_1_fu_853_p1 = qb_assign_1_1_reg_1209;

assign tmp_204_2_fu_867_p1 = qb_assign_1_2_reg_1219;

assign tmp_204_3_fu_881_p1 = qb_assign_1_3_reg_1229;

assign tmp_360_fu_409_p2 = ((sf_reg_318 == 7'd64) ? 1'b1 : 1'b0);

assign tmp_361_fu_427_p2 = (tmp_85_mid_fu_415_p2 | exitcond_flatten_fu_373_p2);

assign tmp_663_fu_441_p1 = nm_1_fu_421_p2[3:0];

assign tmp_664_fu_533_p3 = p_Val2_s_fu_527_p2[32'd15];

assign tmp_665_fu_551_p3 = p_Val2_s_fu_527_p2[32'd6];

assign tmp_666_fu_559_p1 = p_Val2_s_fu_527_p2[0:0];

assign tmp_667_fu_609_p3 = p_Val2_1_fu_603_p2[32'd15];

assign tmp_668_fu_627_p3 = p_Val2_1_fu_603_p2[32'd6];

assign tmp_669_fu_635_p1 = p_Val2_1_fu_603_p2[0:0];

assign tmp_670_fu_685_p3 = p_Val2_2_fu_679_p2[32'd15];

assign tmp_671_fu_703_p3 = p_Val2_2_fu_679_p2[32'd6];

assign tmp_672_fu_711_p1 = p_Val2_2_fu_679_p2[0:0];

assign tmp_673_fu_761_p3 = p_Val2_3_fu_755_p2[32'd15];

assign tmp_674_fu_779_p3 = p_Val2_3_fu_755_p2[32'd6];

assign tmp_675_fu_787_p1 = p_Val2_3_fu_755_p2[0:0];

assign tmp_84_fu_353_p3 = {{tmp_fu_349_p1}, {6'd0}};

assign tmp_84_mid1_fu_445_p3 = {{tmp_663_fu_441_p1}, {6'd0}};

assign tmp_84_mid2_fu_453_p3 = ((tmp_85_mid_fu_415_p2[0:0] === 1'b1) ? tmp_84_mid1_fu_445_p3 : tmp_84_mid_fu_387_p3);

assign tmp_84_mid_fu_387_p3 = ((exitcond_flatten_fu_373_p2[0:0] === 1'b1) ? 10'd0 : tmp_84_fu_353_p3);

assign tmp_85_mid_fu_415_p2 = (tmp_360_fu_409_p2 & not_exitcond_flatten_fu_403_p2);

assign tmp_86_fu_481_p2 = (sf_cast1_fu_477_p1 + tmp_84_mid2_fu_453_p3);

assign tmp_87_fu_513_p1 = tmp_86_reg_1150;

assign tmp_88_fu_487_p2 = ((sf_mid2_fu_433_p3 == 7'd63) ? 1'b1 : 1'b0);

assign tmp_fu_349_p1 = nm_reg_307[3:0];

assign weights3_m_weights_V_1_address0 = tmp_87_fu_513_p1;

assign weights3_m_weights_V_2_address0 = tmp_87_fu_513_p1;

assign weights3_m_weights_V_3_address0 = tmp_87_fu_513_p1;

assign weights3_m_weights_V_address0 = tmp_87_fu_513_p1;

endmodule //Conv1DMac_new
