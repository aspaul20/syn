// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module Conv1DMac_new415 (
        ap_clk,
        ap_rst,
        ap_start,
        start_full_n,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        start_out,
        start_write,
        in_V_V_dout,
        in_V_V_empty_n,
        in_V_V_read,
        out_V_V_din,
        out_V_V_full_n,
        out_V_V_write
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_pp0_stage0 = 3'd2;
parameter    ap_ST_fsm_state6 = 3'd4;

input   ap_clk;
input   ap_rst;
input   ap_start;
input   start_full_n;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output   start_out;
output   start_write;
input  [7:0] in_V_V_dout;
input   in_V_V_empty_n;
output   in_V_V_read;
output  [31:0] out_V_V_din;
input   out_V_V_full_n;
output   out_V_V_write;

reg ap_done;
reg ap_idle;
reg start_write;
reg in_V_V_read;
reg out_V_V_write;

reg    real_start;
reg    start_once_reg;
reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    internal_ap_ready;
wire   [9:0] weights4_m_weights_V_address0;
reg    weights4_m_weights_V_ce0;
wire   [7:0] weights4_m_weights_V_q0;
wire   [9:0] weights4_m_weights_V_1_address0;
reg    weights4_m_weights_V_1_ce0;
wire   [7:0] weights4_m_weights_V_1_q0;
wire   [9:0] weights4_m_weights_V_2_address0;
reg    weights4_m_weights_V_2_ce0;
wire   [7:0] weights4_m_weights_V_2_q0;
wire   [9:0] weights4_m_weights_V_3_address0;
reg    weights4_m_weights_V_3_ce0;
wire   [7:0] weights4_m_weights_V_3_q0;
reg    in_V_V_blk_n;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
reg   [0:0] exitcond_flatten3_reg_1124;
reg    out_V_V_blk_n;
reg    ap_enable_reg_pp0_iter3;
reg   [0:0] tmp_62_reg_1151;
reg   [0:0] tmp_62_reg_1151_pp0_iter2_reg;
reg   [18:0] indvar_flatten3_reg_281;
reg   [11:0] indvar_flatten_reg_292;
reg   [4:0] nm_reg_303;
reg   [6:0] sf_reg_314;
wire   [0:0] exitcond_flatten3_fu_357_p2;
wire    ap_block_state2_pp0_stage0_iter0;
reg    ap_block_state3_pp0_stage0_iter1;
wire    ap_block_state4_pp0_stage0_iter2;
reg    ap_block_state5_pp0_stage0_iter3;
reg    ap_block_pp0_stage0_11001;
reg   [0:0] exitcond_flatten3_reg_1124_pp0_iter1_reg;
wire   [18:0] indvar_flatten_next3_fu_363_p2;
reg    ap_enable_reg_pp0_iter0;
wire   [3:0] nm_t_mid2_fu_457_p3;
reg   [3:0] nm_t_mid2_reg_1133;
reg   [3:0] nm_t_mid2_reg_1133_pp0_iter1_reg;
reg   [3:0] nm_t_mid2_reg_1133_pp0_iter2_reg;
wire   [4:0] nm_mid2_fu_465_p3;
wire   [9:0] tmp_42_fu_477_p2;
reg   [9:0] tmp_42_reg_1146;
wire   [0:0] tmp_62_fu_483_p2;
reg   [0:0] tmp_62_reg_1151_pp0_iter1_reg;
wire   [6:0] sf_1_fu_489_p2;
wire   [11:0] indvar_flatten_next_fu_501_p3;
reg   [7:0] tmp_V_reg_1165;
reg   [7:0] p_Val2_s_139_reg_1190;
wire   [0:0] qb_assign_2_fu_589_p2;
reg   [0:0] qb_assign_2_reg_1195;
reg   [7:0] p_Val2_81_1_reg_1200;
wire   [0:0] qb_assign_2_1_fu_665_p2;
reg   [0:0] qb_assign_2_1_reg_1205;
reg   [7:0] p_Val2_81_2_reg_1210;
wire   [0:0] qb_assign_2_2_fu_741_p2;
reg   [0:0] qb_assign_2_2_reg_1215;
reg   [7:0] p_Val2_81_3_reg_1220;
wire   [0:0] qb_assign_2_3_fu_817_p2;
reg   [0:0] qb_assign_2_3_reg_1225;
reg    ap_block_state1;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state2;
reg    ap_enable_reg_pp0_iter2;
wire   [63:0] tmp_43_fu_509_p1;
reg    ap_block_pp0_stage0_01001;
reg   [7:0] macRegisters_0_V_1_fu_200;
wire   [7:0] macRegisters_0_V_fu_844_p2;
reg   [7:0] macRegisters_1_V_1_fu_204;
wire   [7:0] macRegisters_1_V_fu_858_p2;
reg   [7:0] macRegisters_2_V_1_fu_208;
wire   [7:0] macRegisters_2_V_fu_872_p2;
reg   [7:0] macRegisters_3_V_1_fu_212;
wire   [7:0] macRegisters_3_V_fu_886_p2;
wire   [3:0] tmp_fu_345_p1;
wire   [0:0] exitcond_flatten_fu_369_p2;
wire   [9:0] tmp_s_fu_349_p3;
wire   [0:0] tmp_353_fu_405_p2;
wire   [0:0] not_exitcond_flatten_fu_399_p2;
wire   [4:0] nm_mid_fu_375_p3;
wire   [0:0] tmp_91_mid_fu_411_p2;
wire   [0:0] tmp_354_fu_423_p2;
wire   [4:0] nm_1_fu_417_p2;
wire   [3:0] tmp_594_fu_437_p1;
wire   [9:0] tmp_90_mid1_fu_441_p3;
wire   [9:0] tmp_90_mid_fu_383_p3;
wire   [3:0] nm_t_mid_fu_391_p3;
wire   [6:0] sf_mid2_fu_429_p3;
wire   [9:0] sf_cast1_fu_473_p1;
wire   [9:0] tmp_90_mid2_fu_449_p3;
wire   [11:0] indvar_flatten_op_fu_495_p2;
wire  signed [7:0] p_Val2_s_fu_523_p0;
wire  signed [15:0] p_s_fu_516_p1;
wire  signed [7:0] p_Val2_s_fu_523_p1;
wire   [15:0] p_Val2_s_fu_523_p2;
wire   [0:0] tmp_597_fu_555_p1;
wire   [0:0] tmp_595_fu_529_p3;
wire   [4:0] tmp_46_fu_565_p4;
wire   [0:0] tmp_45_fu_559_p2;
wire   [5:0] tmp_47_fu_575_p3;
wire   [0:0] tmp_48_fu_583_p2;
wire   [0:0] tmp_596_fu_547_p3;
wire  signed [7:0] p_Val2_1_fu_599_p0;
wire  signed [7:0] p_Val2_1_fu_599_p1;
wire   [15:0] p_Val2_1_fu_599_p2;
wire   [0:0] tmp_600_fu_631_p1;
wire   [0:0] tmp_598_fu_605_p3;
wire   [4:0] tmp_52_fu_641_p4;
wire   [0:0] tmp_51_fu_635_p2;
wire   [5:0] tmp_53_fu_651_p3;
wire   [0:0] tmp_227_1_fu_659_p2;
wire   [0:0] tmp_599_fu_623_p3;
wire  signed [7:0] p_Val2_2_fu_675_p0;
wire  signed [7:0] p_Val2_2_fu_675_p1;
wire   [15:0] p_Val2_2_fu_675_p2;
wire   [0:0] tmp_603_fu_707_p1;
wire   [0:0] tmp_601_fu_681_p3;
wire   [4:0] tmp_56_fu_717_p4;
wire   [0:0] tmp_55_fu_711_p2;
wire   [5:0] tmp_57_fu_727_p3;
wire   [0:0] tmp_227_2_fu_735_p2;
wire   [0:0] tmp_602_fu_699_p3;
wire  signed [7:0] p_Val2_3_fu_751_p0;
wire  signed [7:0] p_Val2_3_fu_751_p1;
wire   [15:0] p_Val2_3_fu_751_p2;
wire   [0:0] tmp_606_fu_783_p1;
wire   [0:0] tmp_604_fu_757_p3;
wire   [4:0] tmp_60_fu_793_p4;
wire   [0:0] tmp_59_fu_787_p2;
wire   [5:0] tmp_61_fu_803_p3;
wire   [0:0] tmp_227_3_fu_811_p2;
wire   [0:0] tmp_605_fu_775_p3;
wire   [7:0] tmp_49_fu_835_p1;
wire   [7:0] tmp1_fu_838_p2;
wire   [7:0] tmp_228_1_fu_849_p1;
wire   [7:0] tmp2_fu_852_p2;
wire   [7:0] tmp_228_2_fu_863_p1;
wire   [7:0] tmp3_fu_866_p2;
wire   [7:0] tmp_228_3_fu_877_p1;
wire   [7:0] tmp4_fu_880_p2;
wire   [7:0] tmp_63_fu_911_p18;
wire   [7:0] tmp_64_fu_954_p18;
wire   [7:0] tmp_65_fu_997_p18;
wire   [7:0] tmp_66_fu_1040_p18;
wire   [7:0] p_Val2_22_3_fu_1077_p2;
wire   [7:0] p_Val2_22_2_fu_1034_p2;
wire   [7:0] p_Val2_22_1_fu_991_p2;
wire   [7:0] p_Val2_4_fu_948_p2;
wire    ap_CS_fsm_state6;
reg   [2:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;

// power-on initialization
initial begin
#0 start_once_reg = 1'b0;
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 3'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
end

Conv1DMac_new415_QgW #(
    .DataWidth( 8 ),
    .AddressRange( 1024 ),
    .AddressWidth( 10 ))
weights4_m_weights_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(weights4_m_weights_V_address0),
    .ce0(weights4_m_weights_V_ce0),
    .q0(weights4_m_weights_V_q0)
);

Conv1DMac_new415_Rg6 #(
    .DataWidth( 8 ),
    .AddressRange( 1024 ),
    .AddressWidth( 10 ))
weights4_m_weights_V_1_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(weights4_m_weights_V_1_address0),
    .ce0(weights4_m_weights_V_1_ce0),
    .q0(weights4_m_weights_V_1_q0)
);

Conv1DMac_new415_Shg #(
    .DataWidth( 8 ),
    .AddressRange( 1024 ),
    .AddressWidth( 10 ))
weights4_m_weights_V_2_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(weights4_m_weights_V_2_address0),
    .ce0(weights4_m_weights_V_2_ce0),
    .q0(weights4_m_weights_V_2_q0)
);

Conv1DMac_new415_Thq #(
    .DataWidth( 8 ),
    .AddressRange( 1024 ),
    .AddressWidth( 10 ))
weights4_m_weights_V_3_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(weights4_m_weights_V_3_address0),
    .ce0(weights4_m_weights_V_3_ce0),
    .q0(weights4_m_weights_V_3_q0)
);

computeS1_mux_164DeQ_x_x_x #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 8 ),
    .din3_WIDTH( 8 ),
    .din4_WIDTH( 8 ),
    .din5_WIDTH( 8 ),
    .din6_WIDTH( 8 ),
    .din7_WIDTH( 8 ),
    .din8_WIDTH( 8 ),
    .din9_WIDTH( 8 ),
    .din10_WIDTH( 8 ),
    .din11_WIDTH( 8 ),
    .din12_WIDTH( 8 ),
    .din13_WIDTH( 8 ),
    .din14_WIDTH( 8 ),
    .din15_WIDTH( 8 ),
    .din16_WIDTH( 4 ),
    .dout_WIDTH( 8 ))
computeS1_mux_164DeQ_x_x_x_U107(
    .din0(8'd0),
    .din1(8'd220),
    .din2(8'd0),
    .din3(8'd0),
    .din4(8'd243),
    .din5(8'd8),
    .din6(8'd0),
    .din7(8'd5),
    .din8(8'd255),
    .din9(8'd236),
    .din10(8'd142),
    .din11(8'd17),
    .din12(8'd0),
    .din13(8'd252),
    .din14(8'd16),
    .din15(8'd0),
    .din16(nm_t_mid2_reg_1133_pp0_iter2_reg),
    .dout(tmp_63_fu_911_p18)
);

computeS1_mux_164DeQ_x_x_x #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 8 ),
    .din3_WIDTH( 8 ),
    .din4_WIDTH( 8 ),
    .din5_WIDTH( 8 ),
    .din6_WIDTH( 8 ),
    .din7_WIDTH( 8 ),
    .din8_WIDTH( 8 ),
    .din9_WIDTH( 8 ),
    .din10_WIDTH( 8 ),
    .din11_WIDTH( 8 ),
    .din12_WIDTH( 8 ),
    .din13_WIDTH( 8 ),
    .din14_WIDTH( 8 ),
    .din15_WIDTH( 8 ),
    .din16_WIDTH( 4 ),
    .dout_WIDTH( 8 ))
computeS1_mux_164DeQ_x_x_x_U108(
    .din0(8'd0),
    .din1(8'd188),
    .din2(8'd0),
    .din3(8'd13),
    .din4(8'd235),
    .din5(8'd15),
    .din6(8'd0),
    .din7(8'd39),
    .din8(8'd214),
    .din9(8'd253),
    .din10(8'd8),
    .din11(8'd16),
    .din12(8'd0),
    .din13(8'd0),
    .din14(8'd219),
    .din15(8'd2),
    .din16(nm_t_mid2_reg_1133_pp0_iter2_reg),
    .dout(tmp_64_fu_954_p18)
);

computeS1_mux_164DeQ_x_x_x #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 8 ),
    .din3_WIDTH( 8 ),
    .din4_WIDTH( 8 ),
    .din5_WIDTH( 8 ),
    .din6_WIDTH( 8 ),
    .din7_WIDTH( 8 ),
    .din8_WIDTH( 8 ),
    .din9_WIDTH( 8 ),
    .din10_WIDTH( 8 ),
    .din11_WIDTH( 8 ),
    .din12_WIDTH( 8 ),
    .din13_WIDTH( 8 ),
    .din14_WIDTH( 8 ),
    .din15_WIDTH( 8 ),
    .din16_WIDTH( 4 ),
    .dout_WIDTH( 8 ))
computeS1_mux_164DeQ_x_x_x_U109(
    .din0(8'd0),
    .din1(8'd0),
    .din2(8'd0),
    .din3(8'd181),
    .din4(8'd8),
    .din5(8'd0),
    .din6(8'd13),
    .din7(8'd2),
    .din8(8'd237),
    .din9(8'd96),
    .din10(8'd0),
    .din11(8'd11),
    .din12(8'd251),
    .din13(8'd238),
    .din14(8'd29),
    .din15(8'd0),
    .din16(nm_t_mid2_reg_1133_pp0_iter2_reg),
    .dout(tmp_65_fu_997_p18)
);

computeS1_mux_164DeQ_x_x_x #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 8 ),
    .din3_WIDTH( 8 ),
    .din4_WIDTH( 8 ),
    .din5_WIDTH( 8 ),
    .din6_WIDTH( 8 ),
    .din7_WIDTH( 8 ),
    .din8_WIDTH( 8 ),
    .din9_WIDTH( 8 ),
    .din10_WIDTH( 8 ),
    .din11_WIDTH( 8 ),
    .din12_WIDTH( 8 ),
    .din13_WIDTH( 8 ),
    .din14_WIDTH( 8 ),
    .din15_WIDTH( 8 ),
    .din16_WIDTH( 4 ),
    .dout_WIDTH( 8 ))
computeS1_mux_164DeQ_x_x_x_U110(
    .din0(8'd0),
    .din1(8'd29),
    .din2(8'd12),
    .din3(8'd0),
    .din4(8'd67),
    .din5(8'd26),
    .din6(8'd34),
    .din7(8'd248),
    .din8(8'd179),
    .din9(8'd199),
    .din10(8'd110),
    .din11(8'd33),
    .din12(8'd48),
    .din13(8'd13),
    .din14(8'd0),
    .din15(8'd0),
    .din16(nm_t_mid2_reg_1133_pp0_iter2_reg),
    .dout(tmp_66_fu_1040_p18)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state6)) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_condition_pp0_exit_iter0_state2) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state2)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state2);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter3 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((internal_ap_ready == 1'b0) & (real_start == 1'b1))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_flatten3_fu_357_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        indvar_flatten3_reg_281 <= indvar_flatten_next3_fu_363_p2;
    end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        indvar_flatten3_reg_281 <= 19'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_flatten3_fu_357_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        indvar_flatten_reg_292 <= indvar_flatten_next_fu_501_p3;
    end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        indvar_flatten_reg_292 <= 12'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_62_reg_1151_pp0_iter2_reg == 1'd0) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        macRegisters_0_V_1_fu_200 <= macRegisters_0_V_fu_844_p2;
    end else if ((((tmp_62_reg_1151_pp0_iter2_reg == 1'd1) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001)) | (~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1)))) begin
        macRegisters_0_V_1_fu_200 <= 8'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_62_reg_1151_pp0_iter2_reg == 1'd0) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        macRegisters_1_V_1_fu_204 <= macRegisters_1_V_fu_858_p2;
    end else if ((((tmp_62_reg_1151_pp0_iter2_reg == 1'd1) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001)) | (~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1)))) begin
        macRegisters_1_V_1_fu_204 <= 8'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_62_reg_1151_pp0_iter2_reg == 1'd0) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        macRegisters_2_V_1_fu_208 <= macRegisters_2_V_fu_872_p2;
    end else if ((((tmp_62_reg_1151_pp0_iter2_reg == 1'd1) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001)) | (~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1)))) begin
        macRegisters_2_V_1_fu_208 <= 8'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_62_reg_1151_pp0_iter2_reg == 1'd0) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        macRegisters_3_V_1_fu_212 <= macRegisters_3_V_fu_886_p2;
    end else if ((((tmp_62_reg_1151_pp0_iter2_reg == 1'd1) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001)) | (~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1)))) begin
        macRegisters_3_V_1_fu_212 <= 8'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_flatten3_fu_357_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        nm_reg_303 <= nm_mid2_fu_465_p3;
    end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        nm_reg_303 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_flatten3_fu_357_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        sf_reg_314 <= sf_1_fu_489_p2;
    end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        sf_reg_314 <= 7'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        exitcond_flatten3_reg_1124 <= exitcond_flatten3_fu_357_p2;
        exitcond_flatten3_reg_1124_pp0_iter1_reg <= exitcond_flatten3_reg_1124;
        nm_t_mid2_reg_1133_pp0_iter1_reg <= nm_t_mid2_reg_1133;
        tmp_62_reg_1151_pp0_iter1_reg <= tmp_62_reg_1151;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_flatten3_fu_357_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        nm_t_mid2_reg_1133 <= nm_t_mid2_fu_457_p3;
        tmp_42_reg_1146 <= tmp_42_fu_477_p2;
        tmp_62_reg_1151 <= tmp_62_fu_483_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        nm_t_mid2_reg_1133_pp0_iter2_reg <= nm_t_mid2_reg_1133_pp0_iter1_reg;
        tmp_62_reg_1151_pp0_iter2_reg <= tmp_62_reg_1151_pp0_iter1_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_flatten3_reg_1124_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        p_Val2_81_1_reg_1200 <= {{p_Val2_1_fu_599_p2[14:7]}};
        p_Val2_81_2_reg_1210 <= {{p_Val2_2_fu_675_p2[14:7]}};
        p_Val2_81_3_reg_1220 <= {{p_Val2_3_fu_751_p2[14:7]}};
        p_Val2_s_139_reg_1190 <= {{p_Val2_s_fu_523_p2[14:7]}};
        qb_assign_2_1_reg_1205 <= qb_assign_2_1_fu_665_p2;
        qb_assign_2_2_reg_1215 <= qb_assign_2_2_fu_741_p2;
        qb_assign_2_3_reg_1225 <= qb_assign_2_3_fu_817_p2;
        qb_assign_2_reg_1195 <= qb_assign_2_fu_589_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_flatten3_reg_1124 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        tmp_V_reg_1165 <= in_V_V_dout;
    end
end

always @ (*) begin
    if ((exitcond_flatten3_fu_357_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((real_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond_flatten3_reg_1124 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        in_V_V_blk_n = in_V_V_empty_n;
    end else begin
        in_V_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((exitcond_flatten3_reg_1124 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        in_V_V_read = 1'b1;
    end else begin
        in_V_V_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        internal_ap_ready = 1'b1;
    end else begin
        internal_ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_62_reg_1151_pp0_iter2_reg == 1'd1) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        out_V_V_blk_n = out_V_V_full_n;
    end else begin
        out_V_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((tmp_62_reg_1151_pp0_iter2_reg == 1'd1) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        out_V_V_write = 1'b1;
    end else begin
        out_V_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (start_full_n == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (real_start == 1'b1))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        weights4_m_weights_V_1_ce0 = 1'b1;
    end else begin
        weights4_m_weights_V_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        weights4_m_weights_V_2_ce0 = 1'b1;
    end else begin
        weights4_m_weights_V_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        weights4_m_weights_V_3_ce0 = 1'b1;
    end else begin
        weights4_m_weights_V_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        weights4_m_weights_V_ce0 = 1'b1;
    end else begin
        weights4_m_weights_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((exitcond_flatten3_fu_357_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone)) & ~((ap_enable_reg_pp0_iter3 == 1'b1) & (ap_enable_reg_pp0_iter2 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((ap_enable_reg_pp0_iter3 == 1'b1) & (ap_enable_reg_pp0_iter2 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone)) | ((exitcond_flatten3_fu_357_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd2];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = (((tmp_62_reg_1151_pp0_iter2_reg == 1'd1) & (out_V_V_full_n == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b1)) | ((exitcond_flatten3_reg_1124 == 1'd0) & (in_V_V_empty_n == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((tmp_62_reg_1151_pp0_iter2_reg == 1'd1) & (out_V_V_full_n == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b1)) | ((exitcond_flatten3_reg_1124 == 1'd0) & (in_V_V_empty_n == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((tmp_62_reg_1151_pp0_iter2_reg == 1'd1) & (out_V_V_full_n == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b1)) | ((exitcond_flatten3_reg_1124 == 1'd0) & (in_V_V_empty_n == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1)));
end

always @ (*) begin
    ap_block_state1 = ((real_start == 1'b0) | (ap_done_reg == 1'b1));
end

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state3_pp0_stage0_iter1 = ((exitcond_flatten3_reg_1124 == 1'd0) & (in_V_V_empty_n == 1'b0));
end

assign ap_block_state4_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state5_pp0_stage0_iter3 = ((tmp_62_reg_1151_pp0_iter2_reg == 1'd1) & (out_V_V_full_n == 1'b0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_ready = internal_ap_ready;

assign exitcond_flatten3_fu_357_p2 = ((indvar_flatten3_reg_281 == 19'd262144) ? 1'b1 : 1'b0);

assign exitcond_flatten_fu_369_p2 = ((indvar_flatten_reg_292 == 12'd1024) ? 1'b1 : 1'b0);

assign indvar_flatten_next3_fu_363_p2 = (19'd1 + indvar_flatten3_reg_281);

assign indvar_flatten_next_fu_501_p3 = ((exitcond_flatten_fu_369_p2[0:0] === 1'b1) ? 12'd1 : indvar_flatten_op_fu_495_p2);

assign indvar_flatten_op_fu_495_p2 = (indvar_flatten_reg_292 + 12'd1);

assign macRegisters_0_V_fu_844_p2 = (p_Val2_s_139_reg_1190 + tmp1_fu_838_p2);

assign macRegisters_1_V_fu_858_p2 = (p_Val2_81_1_reg_1200 + tmp2_fu_852_p2);

assign macRegisters_2_V_fu_872_p2 = (p_Val2_81_2_reg_1210 + tmp3_fu_866_p2);

assign macRegisters_3_V_fu_886_p2 = (p_Val2_81_3_reg_1220 + tmp4_fu_880_p2);

assign nm_1_fu_417_p2 = (5'd1 + nm_mid_fu_375_p3);

assign nm_mid2_fu_465_p3 = ((tmp_91_mid_fu_411_p2[0:0] === 1'b1) ? nm_1_fu_417_p2 : nm_mid_fu_375_p3);

assign nm_mid_fu_375_p3 = ((exitcond_flatten_fu_369_p2[0:0] === 1'b1) ? 5'd0 : nm_reg_303);

assign nm_t_mid2_fu_457_p3 = ((tmp_91_mid_fu_411_p2[0:0] === 1'b1) ? tmp_594_fu_437_p1 : nm_t_mid_fu_391_p3);

assign nm_t_mid_fu_391_p3 = ((exitcond_flatten_fu_369_p2[0:0] === 1'b1) ? 4'd0 : tmp_fu_345_p1);

assign not_exitcond_flatten_fu_399_p2 = (exitcond_flatten_fu_369_p2 ^ 1'd1);

assign out_V_V_din = {{{{p_Val2_22_3_fu_1077_p2}, {p_Val2_22_2_fu_1034_p2}}, {p_Val2_22_1_fu_991_p2}}, {p_Val2_4_fu_948_p2}};

assign p_Val2_1_fu_599_p0 = p_s_fu_516_p1;

assign p_Val2_1_fu_599_p1 = weights4_m_weights_V_1_q0;

assign p_Val2_1_fu_599_p2 = ($signed(p_Val2_1_fu_599_p0) * $signed(p_Val2_1_fu_599_p1));

assign p_Val2_22_1_fu_991_p2 = (macRegisters_1_V_fu_858_p2 + tmp_64_fu_954_p18);

assign p_Val2_22_2_fu_1034_p2 = (macRegisters_2_V_fu_872_p2 + tmp_65_fu_997_p18);

assign p_Val2_22_3_fu_1077_p2 = (macRegisters_3_V_fu_886_p2 + tmp_66_fu_1040_p18);

assign p_Val2_2_fu_675_p0 = p_s_fu_516_p1;

assign p_Val2_2_fu_675_p1 = weights4_m_weights_V_2_q0;

assign p_Val2_2_fu_675_p2 = ($signed(p_Val2_2_fu_675_p0) * $signed(p_Val2_2_fu_675_p1));

assign p_Val2_3_fu_751_p0 = p_s_fu_516_p1;

assign p_Val2_3_fu_751_p1 = weights4_m_weights_V_3_q0;

assign p_Val2_3_fu_751_p2 = ($signed(p_Val2_3_fu_751_p0) * $signed(p_Val2_3_fu_751_p1));

assign p_Val2_4_fu_948_p2 = (macRegisters_0_V_fu_844_p2 + tmp_63_fu_911_p18);

assign p_Val2_s_fu_523_p0 = p_s_fu_516_p1;

assign p_Val2_s_fu_523_p1 = weights4_m_weights_V_q0;

assign p_Val2_s_fu_523_p2 = ($signed(p_Val2_s_fu_523_p0) * $signed(p_Val2_s_fu_523_p1));

assign p_s_fu_516_p1 = $signed(tmp_V_reg_1165);

assign qb_assign_2_1_fu_665_p2 = (tmp_599_fu_623_p3 & tmp_227_1_fu_659_p2);

assign qb_assign_2_2_fu_741_p2 = (tmp_602_fu_699_p3 & tmp_227_2_fu_735_p2);

assign qb_assign_2_3_fu_817_p2 = (tmp_605_fu_775_p3 & tmp_227_3_fu_811_p2);

assign qb_assign_2_fu_589_p2 = (tmp_596_fu_547_p3 & tmp_48_fu_583_p2);

assign sf_1_fu_489_p2 = (sf_mid2_fu_429_p3 + 7'd1);

assign sf_cast1_fu_473_p1 = sf_mid2_fu_429_p3;

assign sf_mid2_fu_429_p3 = ((tmp_354_fu_423_p2[0:0] === 1'b1) ? 7'd0 : sf_reg_314);

assign start_out = real_start;

assign tmp1_fu_838_p2 = (tmp_49_fu_835_p1 + macRegisters_0_V_1_fu_200);

assign tmp2_fu_852_p2 = (tmp_228_1_fu_849_p1 + macRegisters_1_V_1_fu_204);

assign tmp3_fu_866_p2 = (tmp_228_2_fu_863_p1 + macRegisters_2_V_1_fu_208);

assign tmp4_fu_880_p2 = (tmp_228_3_fu_877_p1 + macRegisters_3_V_1_fu_212);

assign tmp_227_1_fu_659_p2 = ((tmp_53_fu_651_p3 != 6'd0) ? 1'b1 : 1'b0);

assign tmp_227_2_fu_735_p2 = ((tmp_57_fu_727_p3 != 6'd0) ? 1'b1 : 1'b0);

assign tmp_227_3_fu_811_p2 = ((tmp_61_fu_803_p3 != 6'd0) ? 1'b1 : 1'b0);

assign tmp_228_1_fu_849_p1 = qb_assign_2_1_reg_1205;

assign tmp_228_2_fu_863_p1 = qb_assign_2_2_reg_1215;

assign tmp_228_3_fu_877_p1 = qb_assign_2_3_reg_1225;

assign tmp_353_fu_405_p2 = ((sf_reg_314 == 7'd64) ? 1'b1 : 1'b0);

assign tmp_354_fu_423_p2 = (tmp_91_mid_fu_411_p2 | exitcond_flatten_fu_369_p2);

assign tmp_42_fu_477_p2 = (sf_cast1_fu_473_p1 + tmp_90_mid2_fu_449_p3);

assign tmp_43_fu_509_p1 = tmp_42_reg_1146;

assign tmp_45_fu_559_p2 = (tmp_597_fu_555_p1 | tmp_595_fu_529_p3);

assign tmp_46_fu_565_p4 = {{p_Val2_s_fu_523_p2[5:1]}};

assign tmp_47_fu_575_p3 = {{tmp_46_fu_565_p4}, {tmp_45_fu_559_p2}};

assign tmp_48_fu_583_p2 = ((tmp_47_fu_575_p3 != 6'd0) ? 1'b1 : 1'b0);

assign tmp_49_fu_835_p1 = qb_assign_2_reg_1195;

assign tmp_51_fu_635_p2 = (tmp_600_fu_631_p1 | tmp_598_fu_605_p3);

assign tmp_52_fu_641_p4 = {{p_Val2_1_fu_599_p2[5:1]}};

assign tmp_53_fu_651_p3 = {{tmp_52_fu_641_p4}, {tmp_51_fu_635_p2}};

assign tmp_55_fu_711_p2 = (tmp_603_fu_707_p1 | tmp_601_fu_681_p3);

assign tmp_56_fu_717_p4 = {{p_Val2_2_fu_675_p2[5:1]}};

assign tmp_57_fu_727_p3 = {{tmp_56_fu_717_p4}, {tmp_55_fu_711_p2}};

assign tmp_594_fu_437_p1 = nm_1_fu_417_p2[3:0];

assign tmp_595_fu_529_p3 = p_Val2_s_fu_523_p2[32'd15];

assign tmp_596_fu_547_p3 = p_Val2_s_fu_523_p2[32'd6];

assign tmp_597_fu_555_p1 = p_Val2_s_fu_523_p2[0:0];

assign tmp_598_fu_605_p3 = p_Val2_1_fu_599_p2[32'd15];

assign tmp_599_fu_623_p3 = p_Val2_1_fu_599_p2[32'd6];

assign tmp_59_fu_787_p2 = (tmp_606_fu_783_p1 | tmp_604_fu_757_p3);

assign tmp_600_fu_631_p1 = p_Val2_1_fu_599_p2[0:0];

assign tmp_601_fu_681_p3 = p_Val2_2_fu_675_p2[32'd15];

assign tmp_602_fu_699_p3 = p_Val2_2_fu_675_p2[32'd6];

assign tmp_603_fu_707_p1 = p_Val2_2_fu_675_p2[0:0];

assign tmp_604_fu_757_p3 = p_Val2_3_fu_751_p2[32'd15];

assign tmp_605_fu_775_p3 = p_Val2_3_fu_751_p2[32'd6];

assign tmp_606_fu_783_p1 = p_Val2_3_fu_751_p2[0:0];

assign tmp_60_fu_793_p4 = {{p_Val2_3_fu_751_p2[5:1]}};

assign tmp_61_fu_803_p3 = {{tmp_60_fu_793_p4}, {tmp_59_fu_787_p2}};

assign tmp_62_fu_483_p2 = ((sf_mid2_fu_429_p3 == 7'd63) ? 1'b1 : 1'b0);

assign tmp_90_mid1_fu_441_p3 = {{tmp_594_fu_437_p1}, {6'd0}};

assign tmp_90_mid2_fu_449_p3 = ((tmp_91_mid_fu_411_p2[0:0] === 1'b1) ? tmp_90_mid1_fu_441_p3 : tmp_90_mid_fu_383_p3);

assign tmp_90_mid_fu_383_p3 = ((exitcond_flatten_fu_369_p2[0:0] === 1'b1) ? 10'd0 : tmp_s_fu_349_p3);

assign tmp_91_mid_fu_411_p2 = (tmp_353_fu_405_p2 & not_exitcond_flatten_fu_399_p2);

assign tmp_fu_345_p1 = nm_reg_303[3:0];

assign tmp_s_fu_349_p3 = {{tmp_fu_345_p1}, {6'd0}};

assign weights4_m_weights_V_1_address0 = tmp_43_fu_509_p1;

assign weights4_m_weights_V_2_address0 = tmp_43_fu_509_p1;

assign weights4_m_weights_V_3_address0 = tmp_43_fu_509_p1;

assign weights4_m_weights_V_address0 = tmp_43_fu_509_p1;

endmodule //Conv1DMac_new415
