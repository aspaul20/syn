-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.2
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity Conv1DMac_new is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    start_full_n : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    start_out : OUT STD_LOGIC;
    start_write : OUT STD_LOGIC;
    in_V_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
    in_V_V_empty_n : IN STD_LOGIC;
    in_V_V_read : OUT STD_LOGIC;
    out_V_V_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    out_V_V_full_n : IN STD_LOGIC;
    out_V_V_write : OUT STD_LOGIC );
end;


architecture behav of Conv1DMac_new is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv23_0 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000000";
    constant ap_const_lv12_0 : STD_LOGIC_VECTOR (11 downto 0) := "000000000000";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv23_400000 : STD_LOGIC_VECTOR (22 downto 0) := "10000000000000000000000";
    constant ap_const_lv23_1 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000001";
    constant ap_const_lv12_400 : STD_LOGIC_VECTOR (11 downto 0) := "010000000000";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv7_40 : STD_LOGIC_VECTOR (6 downto 0) := "1000000";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv7_3F : STD_LOGIC_VECTOR (6 downto 0) := "0111111";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv12_1 : STD_LOGIC_VECTOR (11 downto 0) := "000000000001";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv8_21 : STD_LOGIC_VECTOR (7 downto 0) := "00100001";
    constant ap_const_lv8_7 : STD_LOGIC_VECTOR (7 downto 0) := "00000111";
    constant ap_const_lv8_1D : STD_LOGIC_VECTOR (7 downto 0) := "00011101";
    constant ap_const_lv8_25 : STD_LOGIC_VECTOR (7 downto 0) := "00100101";
    constant ap_const_lv8_15 : STD_LOGIC_VECTOR (7 downto 0) := "00010101";
    constant ap_const_lv8_9 : STD_LOGIC_VECTOR (7 downto 0) := "00001001";
    constant ap_const_lv8_FC : STD_LOGIC_VECTOR (7 downto 0) := "11111100";
    constant ap_const_lv8_D : STD_LOGIC_VECTOR (7 downto 0) := "00001101";
    constant ap_const_lv8_8 : STD_LOGIC_VECTOR (7 downto 0) := "00001000";
    constant ap_const_lv8_24 : STD_LOGIC_VECTOR (7 downto 0) := "00100100";
    constant ap_const_lv8_6 : STD_LOGIC_VECTOR (7 downto 0) := "00000110";
    constant ap_const_lv8_23 : STD_LOGIC_VECTOR (7 downto 0) := "00100011";
    constant ap_const_lv8_A : STD_LOGIC_VECTOR (7 downto 0) := "00001010";
    constant ap_const_lv8_F5 : STD_LOGIC_VECTOR (7 downto 0) := "11110101";
    constant ap_const_lv8_29 : STD_LOGIC_VECTOR (7 downto 0) := "00101001";
    constant ap_const_lv8_44 : STD_LOGIC_VECTOR (7 downto 0) := "01000100";
    constant ap_const_lv8_32 : STD_LOGIC_VECTOR (7 downto 0) := "00110010";
    constant ap_const_lv8_1B : STD_LOGIC_VECTOR (7 downto 0) := "00011011";
    constant ap_const_lv8_FE : STD_LOGIC_VECTOR (7 downto 0) := "11111110";
    constant ap_const_lv8_B : STD_LOGIC_VECTOR (7 downto 0) := "00001011";
    constant ap_const_lv8_C : STD_LOGIC_VECTOR (7 downto 0) := "00001100";
    constant ap_const_lv8_1C : STD_LOGIC_VECTOR (7 downto 0) := "00011100";
    constant ap_const_lv8_1A : STD_LOGIC_VECTOR (7 downto 0) := "00011010";
    constant ap_const_lv8_1E : STD_LOGIC_VECTOR (7 downto 0) := "00011110";
    constant ap_const_lv8_12 : STD_LOGIC_VECTOR (7 downto 0) := "00010010";
    constant ap_const_lv8_4 : STD_LOGIC_VECTOR (7 downto 0) := "00000100";
    constant ap_const_lv8_30 : STD_LOGIC_VECTOR (7 downto 0) := "00110000";
    constant ap_const_lv8_28 : STD_LOGIC_VECTOR (7 downto 0) := "00101000";
    constant ap_const_lv8_19 : STD_LOGIC_VECTOR (7 downto 0) := "00011001";
    constant ap_const_lv8_27 : STD_LOGIC_VECTOR (7 downto 0) := "00100111";
    constant ap_const_lv8_16 : STD_LOGIC_VECTOR (7 downto 0) := "00010110";
    constant ap_const_lv8_F : STD_LOGIC_VECTOR (7 downto 0) := "00001111";
    constant ap_const_lv8_E : STD_LOGIC_VECTOR (7 downto 0) := "00001110";
    constant ap_const_lv8_14 : STD_LOGIC_VECTOR (7 downto 0) := "00010100";
    constant ap_const_lv8_FA : STD_LOGIC_VECTOR (7 downto 0) := "11111010";
    constant ap_const_lv8_60 : STD_LOGIC_VECTOR (7 downto 0) := "01100000";
    constant ap_const_lv8_1F : STD_LOGIC_VECTOR (7 downto 0) := "00011111";
    constant ap_const_lv8_5 : STD_LOGIC_VECTOR (7 downto 0) := "00000101";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";

    signal real_start : STD_LOGIC;
    signal start_once_reg : STD_LOGIC := '0';
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (2 downto 0) := "001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal internal_ap_ready : STD_LOGIC;
    signal weights3_m_weights_V_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal weights3_m_weights_V_ce0 : STD_LOGIC;
    signal weights3_m_weights_V_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal weights3_m_weights_V_1_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal weights3_m_weights_V_1_ce0 : STD_LOGIC;
    signal weights3_m_weights_V_1_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal weights3_m_weights_V_2_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal weights3_m_weights_V_2_ce0 : STD_LOGIC;
    signal weights3_m_weights_V_2_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal weights3_m_weights_V_3_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal weights3_m_weights_V_3_ce0 : STD_LOGIC;
    signal weights3_m_weights_V_3_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal in_V_V_blk_n : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal exitcond_flatten8_reg_1128 : STD_LOGIC_VECTOR (0 downto 0);
    signal out_V_V_blk_n : STD_LOGIC;
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal tmp_88_reg_1155 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_88_reg_1155_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal indvar_flatten8_reg_285 : STD_LOGIC_VECTOR (22 downto 0);
    signal indvar_flatten_reg_296 : STD_LOGIC_VECTOR (11 downto 0);
    signal nm_reg_307 : STD_LOGIC_VECTOR (4 downto 0);
    signal sf_reg_318 : STD_LOGIC_VECTOR (6 downto 0);
    signal exitcond_flatten8_fu_361_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state2_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal exitcond_flatten8_reg_1128_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal indvar_flatten_next8_fu_367_p2 : STD_LOGIC_VECTOR (22 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal nm_t_mid2_fu_461_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal nm_t_mid2_reg_1137 : STD_LOGIC_VECTOR (3 downto 0);
    signal nm_t_mid2_reg_1137_pp0_iter1_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal nm_t_mid2_reg_1137_pp0_iter2_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal nm_mid2_fu_469_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_86_fu_481_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_86_reg_1150 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_88_fu_487_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_88_reg_1155_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal sf_1_fu_493_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal indvar_flatten_next_fu_505_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_V_reg_1169 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Val2_s_143_reg_1194 : STD_LOGIC_VECTOR (7 downto 0);
    signal qb_assign_1_fu_593_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal qb_assign_1_reg_1199 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Val2_75_1_reg_1204 : STD_LOGIC_VECTOR (7 downto 0);
    signal qb_assign_1_1_fu_669_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal qb_assign_1_1_reg_1209 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Val2_75_2_reg_1214 : STD_LOGIC_VECTOR (7 downto 0);
    signal qb_assign_1_2_fu_745_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal qb_assign_1_2_reg_1219 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Val2_75_3_reg_1224 : STD_LOGIC_VECTOR (7 downto 0);
    signal qb_assign_1_3_fu_821_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal qb_assign_1_3_reg_1229 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state2 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal tmp_87_fu_513_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal macRegisters_0_V_6_fu_204 : STD_LOGIC_VECTOR (7 downto 0);
    signal macRegisters_0_V_fu_848_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal macRegisters_1_V_6_fu_208 : STD_LOGIC_VECTOR (7 downto 0);
    signal macRegisters_1_V_fu_862_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal macRegisters_2_V_6_fu_212 : STD_LOGIC_VECTOR (7 downto 0);
    signal macRegisters_2_V_fu_876_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal macRegisters_3_V_6_fu_216 : STD_LOGIC_VECTOR (7 downto 0);
    signal macRegisters_3_V_fu_890_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_fu_349_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal exitcond_flatten_fu_373_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_84_fu_353_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_360_fu_409_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal not_exitcond_flatten_fu_403_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal nm_mid_fu_379_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_85_mid_fu_415_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_361_fu_427_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal nm_1_fu_421_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_663_fu_441_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_84_mid1_fu_445_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_84_mid_fu_387_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal nm_t_mid_fu_395_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal sf_mid2_fu_433_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal sf_cast1_fu_477_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_84_mid2_fu_453_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal indvar_flatten_op_fu_499_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal p_Val2_s_fu_527_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_s_fu_520_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Val2_s_fu_527_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Val2_s_fu_527_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_666_fu_559_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_664_fu_533_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_102_fu_569_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_101_fu_563_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_103_fu_579_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_104_fu_587_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_665_fu_551_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Val2_1_fu_603_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Val2_1_fu_603_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Val2_1_fu_603_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_669_fu_635_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_667_fu_609_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_108_fu_645_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_107_fu_639_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_109_fu_655_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_203_1_fu_663_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_668_fu_627_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Val2_2_fu_679_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Val2_2_fu_679_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Val2_2_fu_679_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_672_fu_711_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_670_fu_685_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_112_fu_721_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_111_fu_715_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_113_fu_731_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_203_2_fu_739_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_671_fu_703_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Val2_3_fu_755_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Val2_3_fu_755_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Val2_3_fu_755_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_675_fu_787_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_673_fu_761_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_116_fu_797_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_115_fu_791_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_117_fu_807_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_203_3_fu_815_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_674_fu_779_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_105_fu_839_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp1_fu_842_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_204_1_fu_853_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp2_fu_856_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_204_2_fu_867_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp3_fu_870_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_204_3_fu_881_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp4_fu_884_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_s_fu_915_p18 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_167_fu_958_p18 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_168_fu_1001_p18 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_169_fu_1044_p18 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Val2_20_3_fu_1081_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Val2_20_2_fu_1038_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Val2_20_1_fu_995_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Val2_9_fu_952_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;

    component computeS1_mux_164DeQ_x_x IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        din5_WIDTH : INTEGER;
        din6_WIDTH : INTEGER;
        din7_WIDTH : INTEGER;
        din8_WIDTH : INTEGER;
        din9_WIDTH : INTEGER;
        din10_WIDTH : INTEGER;
        din11_WIDTH : INTEGER;
        din12_WIDTH : INTEGER;
        din13_WIDTH : INTEGER;
        din14_WIDTH : INTEGER;
        din15_WIDTH : INTEGER;
        din16_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        din2 : IN STD_LOGIC_VECTOR (7 downto 0);
        din3 : IN STD_LOGIC_VECTOR (7 downto 0);
        din4 : IN STD_LOGIC_VECTOR (7 downto 0);
        din5 : IN STD_LOGIC_VECTOR (7 downto 0);
        din6 : IN STD_LOGIC_VECTOR (7 downto 0);
        din7 : IN STD_LOGIC_VECTOR (7 downto 0);
        din8 : IN STD_LOGIC_VECTOR (7 downto 0);
        din9 : IN STD_LOGIC_VECTOR (7 downto 0);
        din10 : IN STD_LOGIC_VECTOR (7 downto 0);
        din11 : IN STD_LOGIC_VECTOR (7 downto 0);
        din12 : IN STD_LOGIC_VECTOR (7 downto 0);
        din13 : IN STD_LOGIC_VECTOR (7 downto 0);
        din14 : IN STD_LOGIC_VECTOR (7 downto 0);
        din15 : IN STD_LOGIC_VECTOR (7 downto 0);
        din16 : IN STD_LOGIC_VECTOR (3 downto 0);
        dout : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component Conv1DMac_new_weiKfY IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component Conv1DMac_new_weiLf8 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component Conv1DMac_new_weiMgi IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component Conv1DMac_new_weiNgs IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;



begin
    weights3_m_weights_V_U : component Conv1DMac_new_weiKfY
    generic map (
        DataWidth => 8,
        AddressRange => 1024,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => weights3_m_weights_V_address0,
        ce0 => weights3_m_weights_V_ce0,
        q0 => weights3_m_weights_V_q0);

    weights3_m_weights_V_1_U : component Conv1DMac_new_weiLf8
    generic map (
        DataWidth => 8,
        AddressRange => 1024,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => weights3_m_weights_V_1_address0,
        ce0 => weights3_m_weights_V_1_ce0,
        q0 => weights3_m_weights_V_1_q0);

    weights3_m_weights_V_2_U : component Conv1DMac_new_weiMgi
    generic map (
        DataWidth => 8,
        AddressRange => 1024,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => weights3_m_weights_V_2_address0,
        ce0 => weights3_m_weights_V_2_ce0,
        q0 => weights3_m_weights_V_2_q0);

    weights3_m_weights_V_3_U : component Conv1DMac_new_weiNgs
    generic map (
        DataWidth => 8,
        AddressRange => 1024,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => weights3_m_weights_V_3_address0,
        ce0 => weights3_m_weights_V_3_ce0,
        q0 => weights3_m_weights_V_3_q0);

    computeS1_mux_164DeQ_x_x_U84 : component computeS1_mux_164DeQ_x_x
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 8,
        din3_WIDTH => 8,
        din4_WIDTH => 8,
        din5_WIDTH => 8,
        din6_WIDTH => 8,
        din7_WIDTH => 8,
        din8_WIDTH => 8,
        din9_WIDTH => 8,
        din10_WIDTH => 8,
        din11_WIDTH => 8,
        din12_WIDTH => 8,
        din13_WIDTH => 8,
        din14_WIDTH => 8,
        din15_WIDTH => 8,
        din16_WIDTH => 4,
        dout_WIDTH => 8)
    port map (
        din0 => ap_const_lv8_21,
        din1 => ap_const_lv8_7,
        din2 => ap_const_lv8_1D,
        din3 => ap_const_lv8_25,
        din4 => ap_const_lv8_15,
        din5 => ap_const_lv8_9,
        din6 => ap_const_lv8_FC,
        din7 => ap_const_lv8_D,
        din8 => ap_const_lv8_8,
        din9 => ap_const_lv8_24,
        din10 => ap_const_lv8_6,
        din11 => ap_const_lv8_23,
        din12 => ap_const_lv8_A,
        din13 => ap_const_lv8_F5,
        din14 => ap_const_lv8_29,
        din15 => ap_const_lv8_44,
        din16 => nm_t_mid2_reg_1137_pp0_iter2_reg,
        dout => tmp_s_fu_915_p18);

    computeS1_mux_164DeQ_x_x_U85 : component computeS1_mux_164DeQ_x_x
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 8,
        din3_WIDTH => 8,
        din4_WIDTH => 8,
        din5_WIDTH => 8,
        din6_WIDTH => 8,
        din7_WIDTH => 8,
        din8_WIDTH => 8,
        din9_WIDTH => 8,
        din10_WIDTH => 8,
        din11_WIDTH => 8,
        din12_WIDTH => 8,
        din13_WIDTH => 8,
        din14_WIDTH => 8,
        din15_WIDTH => 8,
        din16_WIDTH => 4,
        dout_WIDTH => 8)
    port map (
        din0 => ap_const_lv8_0,
        din1 => ap_const_lv8_0,
        din2 => ap_const_lv8_32,
        din3 => ap_const_lv8_0,
        din4 => ap_const_lv8_1B,
        din5 => ap_const_lv8_FE,
        din6 => ap_const_lv8_B,
        din7 => ap_const_lv8_C,
        din8 => ap_const_lv8_1C,
        din9 => ap_const_lv8_1A,
        din10 => ap_const_lv8_1E,
        din11 => ap_const_lv8_B,
        din12 => ap_const_lv8_12,
        din13 => ap_const_lv8_0,
        din14 => ap_const_lv8_4,
        din15 => ap_const_lv8_B,
        din16 => nm_t_mid2_reg_1137_pp0_iter2_reg,
        dout => tmp_167_fu_958_p18);

    computeS1_mux_164DeQ_x_x_U86 : component computeS1_mux_164DeQ_x_x
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 8,
        din3_WIDTH => 8,
        din4_WIDTH => 8,
        din5_WIDTH => 8,
        din6_WIDTH => 8,
        din7_WIDTH => 8,
        din8_WIDTH => 8,
        din9_WIDTH => 8,
        din10_WIDTH => 8,
        din11_WIDTH => 8,
        din12_WIDTH => 8,
        din13_WIDTH => 8,
        din14_WIDTH => 8,
        din15_WIDTH => 8,
        din16_WIDTH => 4,
        dout_WIDTH => 8)
    port map (
        din0 => ap_const_lv8_30,
        din1 => ap_const_lv8_FC,
        din2 => ap_const_lv8_B,
        din3 => ap_const_lv8_4,
        din4 => ap_const_lv8_9,
        din5 => ap_const_lv8_28,
        din6 => ap_const_lv8_21,
        din7 => ap_const_lv8_19,
        din8 => ap_const_lv8_27,
        din9 => ap_const_lv8_0,
        din10 => ap_const_lv8_16,
        din11 => ap_const_lv8_B,
        din12 => ap_const_lv8_F,
        din13 => ap_const_lv8_D,
        din14 => ap_const_lv8_9,
        din15 => ap_const_lv8_E,
        din16 => nm_t_mid2_reg_1137_pp0_iter2_reg,
        dout => tmp_168_fu_1001_p18);

    computeS1_mux_164DeQ_x_x_U87 : component computeS1_mux_164DeQ_x_x
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 8,
        din3_WIDTH => 8,
        din4_WIDTH => 8,
        din5_WIDTH => 8,
        din6_WIDTH => 8,
        din7_WIDTH => 8,
        din8_WIDTH => 8,
        din9_WIDTH => 8,
        din10_WIDTH => 8,
        din11_WIDTH => 8,
        din12_WIDTH => 8,
        din13_WIDTH => 8,
        din14_WIDTH => 8,
        din15_WIDTH => 8,
        din16_WIDTH => 4,
        dout_WIDTH => 8)
    port map (
        din0 => ap_const_lv8_12,
        din1 => ap_const_lv8_6,
        din2 => ap_const_lv8_14,
        din3 => ap_const_lv8_FA,
        din4 => ap_const_lv8_60,
        din5 => ap_const_lv8_FA,
        din6 => ap_const_lv8_A,
        din7 => ap_const_lv8_7,
        din8 => ap_const_lv8_12,
        din9 => ap_const_lv8_9,
        din10 => ap_const_lv8_1D,
        din11 => ap_const_lv8_1D,
        din12 => ap_const_lv8_1F,
        din13 => ap_const_lv8_1E,
        din14 => ap_const_lv8_5,
        din15 => ap_const_lv8_E,
        din16 => nm_t_mid2_reg_1137_pp0_iter2_reg,
        dout => tmp_169_fu_1044_p18);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2)) then 
                        ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state2);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                elsif ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    start_once_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                start_once_reg <= ap_const_logic_0;
            else
                if (((internal_ap_ready = ap_const_logic_0) and (real_start = ap_const_logic_1))) then 
                    start_once_reg <= ap_const_logic_1;
                elsif ((internal_ap_ready = ap_const_logic_1)) then 
                    start_once_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    indvar_flatten8_reg_285_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_flatten8_fu_361_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                indvar_flatten8_reg_285 <= indvar_flatten_next8_fu_367_p2;
            elsif ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                indvar_flatten8_reg_285 <= ap_const_lv23_0;
            end if; 
        end if;
    end process;

    indvar_flatten_reg_296_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_flatten8_fu_361_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                indvar_flatten_reg_296 <= indvar_flatten_next_fu_505_p3;
            elsif ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                indvar_flatten_reg_296 <= ap_const_lv12_0;
            end if; 
        end if;
    end process;

    macRegisters_0_V_6_fu_204_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_88_reg_1155_pp0_iter2_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                macRegisters_0_V_6_fu_204 <= macRegisters_0_V_fu_848_p2;
            elsif ((((tmp_88_reg_1155_pp0_iter2_reg = ap_const_lv1_1) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or (not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
                macRegisters_0_V_6_fu_204 <= ap_const_lv8_0;
            end if; 
        end if;
    end process;

    macRegisters_1_V_6_fu_208_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_88_reg_1155_pp0_iter2_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                macRegisters_1_V_6_fu_208 <= macRegisters_1_V_fu_862_p2;
            elsif ((((tmp_88_reg_1155_pp0_iter2_reg = ap_const_lv1_1) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or (not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
                macRegisters_1_V_6_fu_208 <= ap_const_lv8_0;
            end if; 
        end if;
    end process;

    macRegisters_2_V_6_fu_212_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_88_reg_1155_pp0_iter2_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                macRegisters_2_V_6_fu_212 <= macRegisters_2_V_fu_876_p2;
            elsif ((((tmp_88_reg_1155_pp0_iter2_reg = ap_const_lv1_1) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or (not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
                macRegisters_2_V_6_fu_212 <= ap_const_lv8_0;
            end if; 
        end if;
    end process;

    macRegisters_3_V_6_fu_216_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_88_reg_1155_pp0_iter2_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                macRegisters_3_V_6_fu_216 <= macRegisters_3_V_fu_890_p2;
            elsif ((((tmp_88_reg_1155_pp0_iter2_reg = ap_const_lv1_1) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or (not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
                macRegisters_3_V_6_fu_216 <= ap_const_lv8_0;
            end if; 
        end if;
    end process;

    nm_reg_307_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_flatten8_fu_361_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                nm_reg_307 <= nm_mid2_fu_469_p3;
            elsif ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                nm_reg_307 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    sf_reg_318_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_flatten8_fu_361_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                sf_reg_318 <= sf_1_fu_493_p2;
            elsif ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                sf_reg_318 <= ap_const_lv7_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                exitcond_flatten8_reg_1128 <= exitcond_flatten8_fu_361_p2;
                exitcond_flatten8_reg_1128_pp0_iter1_reg <= exitcond_flatten8_reg_1128;
                nm_t_mid2_reg_1137_pp0_iter1_reg <= nm_t_mid2_reg_1137;
                tmp_88_reg_1155_pp0_iter1_reg <= tmp_88_reg_1155;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_flatten8_fu_361_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                nm_t_mid2_reg_1137 <= nm_t_mid2_fu_461_p3;
                tmp_86_reg_1150 <= tmp_86_fu_481_p2;
                tmp_88_reg_1155 <= tmp_88_fu_487_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                nm_t_mid2_reg_1137_pp0_iter2_reg <= nm_t_mid2_reg_1137_pp0_iter1_reg;
                tmp_88_reg_1155_pp0_iter2_reg <= tmp_88_reg_1155_pp0_iter1_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_flatten8_reg_1128_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                p_Val2_75_1_reg_1204 <= p_Val2_1_fu_603_p2(14 downto 7);
                p_Val2_75_2_reg_1214 <= p_Val2_2_fu_679_p2(14 downto 7);
                p_Val2_75_3_reg_1224 <= p_Val2_3_fu_755_p2(14 downto 7);
                p_Val2_s_143_reg_1194 <= p_Val2_s_fu_527_p2(14 downto 7);
                qb_assign_1_1_reg_1209 <= qb_assign_1_1_fu_669_p2;
                qb_assign_1_2_reg_1219 <= qb_assign_1_2_fu_745_p2;
                qb_assign_1_3_reg_1229 <= qb_assign_1_3_fu_821_p2;
                qb_assign_1_reg_1199 <= qb_assign_1_fu_593_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_flatten8_reg_1128 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                tmp_V_reg_1169 <= in_V_V_dout;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (real_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter3, exitcond_flatten8_fu_361_p2, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, ap_enable_reg_pp0_iter2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((exitcond_flatten8_fu_361_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) and not(((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) or ((exitcond_flatten8_fu_361_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone)))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXX";
        end case;
    end process;
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(1);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state6 <= ap_CS_fsm(2);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(in_V_V_empty_n, out_V_V_full_n, ap_enable_reg_pp0_iter1, exitcond_flatten8_reg_1128, ap_enable_reg_pp0_iter3, tmp_88_reg_1155_pp0_iter2_reg)
    begin
                ap_block_pp0_stage0_01001 <= (((tmp_88_reg_1155_pp0_iter2_reg = ap_const_lv1_1) and (out_V_V_full_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1)) or ((exitcond_flatten8_reg_1128 = ap_const_lv1_0) and (in_V_V_empty_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(in_V_V_empty_n, out_V_V_full_n, ap_enable_reg_pp0_iter1, exitcond_flatten8_reg_1128, ap_enable_reg_pp0_iter3, tmp_88_reg_1155_pp0_iter2_reg)
    begin
                ap_block_pp0_stage0_11001 <= (((tmp_88_reg_1155_pp0_iter2_reg = ap_const_lv1_1) and (out_V_V_full_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1)) or ((exitcond_flatten8_reg_1128 = ap_const_lv1_0) and (in_V_V_empty_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(in_V_V_empty_n, out_V_V_full_n, ap_enable_reg_pp0_iter1, exitcond_flatten8_reg_1128, ap_enable_reg_pp0_iter3, tmp_88_reg_1155_pp0_iter2_reg)
    begin
                ap_block_pp0_stage0_subdone <= (((tmp_88_reg_1155_pp0_iter2_reg = ap_const_lv1_1) and (out_V_V_full_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1)) or ((exitcond_flatten8_reg_1128 = ap_const_lv1_0) and (in_V_V_empty_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)));
    end process;


    ap_block_state1_assign_proc : process(real_start, ap_done_reg)
    begin
                ap_block_state1 <= ((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;

        ap_block_state2_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state3_pp0_stage0_iter1_assign_proc : process(in_V_V_empty_n, exitcond_flatten8_reg_1128)
    begin
                ap_block_state3_pp0_stage0_iter1 <= ((exitcond_flatten8_reg_1128 = ap_const_lv1_0) and (in_V_V_empty_n = ap_const_logic_0));
    end process;

        ap_block_state4_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state5_pp0_stage0_iter3_assign_proc : process(out_V_V_full_n, tmp_88_reg_1155_pp0_iter2_reg)
    begin
                ap_block_state5_pp0_stage0_iter3 <= ((tmp_88_reg_1155_pp0_iter2_reg = ap_const_lv1_1) and (out_V_V_full_n = ap_const_logic_0));
    end process;


    ap_condition_pp0_exit_iter0_state2_assign_proc : process(exitcond_flatten8_fu_361_p2)
    begin
        if ((exitcond_flatten8_fu_361_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_done_reg, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(real_start, ap_CS_fsm_state1)
    begin
        if (((real_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_ready <= internal_ap_ready;
    exitcond_flatten8_fu_361_p2 <= "1" when (indvar_flatten8_reg_285 = ap_const_lv23_400000) else "0";
    exitcond_flatten_fu_373_p2 <= "1" when (indvar_flatten_reg_296 = ap_const_lv12_400) else "0";

    in_V_V_blk_n_assign_proc : process(in_V_V_empty_n, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, exitcond_flatten8_reg_1128)
    begin
        if (((exitcond_flatten8_reg_1128 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            in_V_V_blk_n <= in_V_V_empty_n;
        else 
            in_V_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    in_V_V_read_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, exitcond_flatten8_reg_1128, ap_block_pp0_stage0_11001)
    begin
        if (((exitcond_flatten8_reg_1128 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            in_V_V_read <= ap_const_logic_1;
        else 
            in_V_V_read <= ap_const_logic_0;
        end if; 
    end process;

    indvar_flatten_next8_fu_367_p2 <= std_logic_vector(unsigned(ap_const_lv23_1) + unsigned(indvar_flatten8_reg_285));
    indvar_flatten_next_fu_505_p3 <= 
        ap_const_lv12_1 when (exitcond_flatten_fu_373_p2(0) = '1') else 
        indvar_flatten_op_fu_499_p2;
    indvar_flatten_op_fu_499_p2 <= std_logic_vector(unsigned(indvar_flatten_reg_296) + unsigned(ap_const_lv12_1));

    internal_ap_ready_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            internal_ap_ready <= ap_const_logic_1;
        else 
            internal_ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    macRegisters_0_V_fu_848_p2 <= std_logic_vector(unsigned(p_Val2_s_143_reg_1194) + unsigned(tmp1_fu_842_p2));
    macRegisters_1_V_fu_862_p2 <= std_logic_vector(unsigned(p_Val2_75_1_reg_1204) + unsigned(tmp2_fu_856_p2));
    macRegisters_2_V_fu_876_p2 <= std_logic_vector(unsigned(p_Val2_75_2_reg_1214) + unsigned(tmp3_fu_870_p2));
    macRegisters_3_V_fu_890_p2 <= std_logic_vector(unsigned(p_Val2_75_3_reg_1224) + unsigned(tmp4_fu_884_p2));
    nm_1_fu_421_p2 <= std_logic_vector(unsigned(ap_const_lv5_1) + unsigned(nm_mid_fu_379_p3));
    nm_mid2_fu_469_p3 <= 
        nm_1_fu_421_p2 when (tmp_85_mid_fu_415_p2(0) = '1') else 
        nm_mid_fu_379_p3;
    nm_mid_fu_379_p3 <= 
        ap_const_lv5_0 when (exitcond_flatten_fu_373_p2(0) = '1') else 
        nm_reg_307;
    nm_t_mid2_fu_461_p3 <= 
        tmp_663_fu_441_p1 when (tmp_85_mid_fu_415_p2(0) = '1') else 
        nm_t_mid_fu_395_p3;
    nm_t_mid_fu_395_p3 <= 
        ap_const_lv4_0 when (exitcond_flatten_fu_373_p2(0) = '1') else 
        tmp_fu_349_p1;
    not_exitcond_flatten_fu_403_p2 <= (exitcond_flatten_fu_373_p2 xor ap_const_lv1_1);

    out_V_V_blk_n_assign_proc : process(out_V_V_full_n, ap_block_pp0_stage0, ap_enable_reg_pp0_iter3, tmp_88_reg_1155_pp0_iter2_reg)
    begin
        if (((tmp_88_reg_1155_pp0_iter2_reg = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            out_V_V_blk_n <= out_V_V_full_n;
        else 
            out_V_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    out_V_V_din <= (((p_Val2_20_3_fu_1081_p2 & p_Val2_20_2_fu_1038_p2) & p_Val2_20_1_fu_995_p2) & p_Val2_9_fu_952_p2);

    out_V_V_write_assign_proc : process(ap_enable_reg_pp0_iter3, tmp_88_reg_1155_pp0_iter2_reg, ap_block_pp0_stage0_11001)
    begin
        if (((tmp_88_reg_1155_pp0_iter2_reg = ap_const_lv1_1) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            out_V_V_write <= ap_const_logic_1;
        else 
            out_V_V_write <= ap_const_logic_0;
        end if; 
    end process;

    p_Val2_1_fu_603_p0 <= p_s_fu_520_p1(8 - 1 downto 0);
    p_Val2_1_fu_603_p1 <= weights3_m_weights_V_1_q0;
    p_Val2_1_fu_603_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(p_Val2_1_fu_603_p0) * signed(p_Val2_1_fu_603_p1))), 16));
    p_Val2_20_1_fu_995_p2 <= std_logic_vector(unsigned(macRegisters_1_V_fu_862_p2) + unsigned(tmp_167_fu_958_p18));
    p_Val2_20_2_fu_1038_p2 <= std_logic_vector(unsigned(macRegisters_2_V_fu_876_p2) + unsigned(tmp_168_fu_1001_p18));
    p_Val2_20_3_fu_1081_p2 <= std_logic_vector(unsigned(macRegisters_3_V_fu_890_p2) + unsigned(tmp_169_fu_1044_p18));
    p_Val2_2_fu_679_p0 <= p_s_fu_520_p1(8 - 1 downto 0);
    p_Val2_2_fu_679_p1 <= weights3_m_weights_V_2_q0;
    p_Val2_2_fu_679_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(p_Val2_2_fu_679_p0) * signed(p_Val2_2_fu_679_p1))), 16));
    p_Val2_3_fu_755_p0 <= p_s_fu_520_p1(8 - 1 downto 0);
    p_Val2_3_fu_755_p1 <= weights3_m_weights_V_3_q0;
    p_Val2_3_fu_755_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(p_Val2_3_fu_755_p0) * signed(p_Val2_3_fu_755_p1))), 16));
    p_Val2_9_fu_952_p2 <= std_logic_vector(unsigned(macRegisters_0_V_fu_848_p2) + unsigned(tmp_s_fu_915_p18));
    p_Val2_s_fu_527_p0 <= p_s_fu_520_p1(8 - 1 downto 0);
    p_Val2_s_fu_527_p1 <= weights3_m_weights_V_q0;
    p_Val2_s_fu_527_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(p_Val2_s_fu_527_p0) * signed(p_Val2_s_fu_527_p1))), 16));
        p_s_fu_520_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_V_reg_1169),16));

    qb_assign_1_1_fu_669_p2 <= (tmp_668_fu_627_p3 and tmp_203_1_fu_663_p2);
    qb_assign_1_2_fu_745_p2 <= (tmp_671_fu_703_p3 and tmp_203_2_fu_739_p2);
    qb_assign_1_3_fu_821_p2 <= (tmp_674_fu_779_p3 and tmp_203_3_fu_815_p2);
    qb_assign_1_fu_593_p2 <= (tmp_665_fu_551_p3 and tmp_104_fu_587_p2);

    real_start_assign_proc : process(ap_start, start_full_n, start_once_reg)
    begin
        if (((start_once_reg = ap_const_logic_0) and (start_full_n = ap_const_logic_0))) then 
            real_start <= ap_const_logic_0;
        else 
            real_start <= ap_start;
        end if; 
    end process;

    sf_1_fu_493_p2 <= std_logic_vector(unsigned(sf_mid2_fu_433_p3) + unsigned(ap_const_lv7_1));
    sf_cast1_fu_477_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sf_mid2_fu_433_p3),10));
    sf_mid2_fu_433_p3 <= 
        ap_const_lv7_0 when (tmp_361_fu_427_p2(0) = '1') else 
        sf_reg_318;
    start_out <= real_start;

    start_write_assign_proc : process(real_start, start_once_reg)
    begin
        if (((start_once_reg = ap_const_logic_0) and (real_start = ap_const_logic_1))) then 
            start_write <= ap_const_logic_1;
        else 
            start_write <= ap_const_logic_0;
        end if; 
    end process;

    tmp1_fu_842_p2 <= std_logic_vector(unsigned(tmp_105_fu_839_p1) + unsigned(macRegisters_0_V_6_fu_204));
    tmp2_fu_856_p2 <= std_logic_vector(unsigned(tmp_204_1_fu_853_p1) + unsigned(macRegisters_1_V_6_fu_208));
    tmp3_fu_870_p2 <= std_logic_vector(unsigned(tmp_204_2_fu_867_p1) + unsigned(macRegisters_2_V_6_fu_212));
    tmp4_fu_884_p2 <= std_logic_vector(unsigned(tmp_204_3_fu_881_p1) + unsigned(macRegisters_3_V_6_fu_216));
    tmp_101_fu_563_p2 <= (tmp_666_fu_559_p1 or tmp_664_fu_533_p3);
    tmp_102_fu_569_p4 <= p_Val2_s_fu_527_p2(5 downto 1);
    tmp_103_fu_579_p3 <= (tmp_102_fu_569_p4 & tmp_101_fu_563_p2);
    tmp_104_fu_587_p2 <= "0" when (tmp_103_fu_579_p3 = ap_const_lv6_0) else "1";
    tmp_105_fu_839_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(qb_assign_1_reg_1199),8));
    tmp_107_fu_639_p2 <= (tmp_669_fu_635_p1 or tmp_667_fu_609_p3);
    tmp_108_fu_645_p4 <= p_Val2_1_fu_603_p2(5 downto 1);
    tmp_109_fu_655_p3 <= (tmp_108_fu_645_p4 & tmp_107_fu_639_p2);
    tmp_111_fu_715_p2 <= (tmp_672_fu_711_p1 or tmp_670_fu_685_p3);
    tmp_112_fu_721_p4 <= p_Val2_2_fu_679_p2(5 downto 1);
    tmp_113_fu_731_p3 <= (tmp_112_fu_721_p4 & tmp_111_fu_715_p2);
    tmp_115_fu_791_p2 <= (tmp_675_fu_787_p1 or tmp_673_fu_761_p3);
    tmp_116_fu_797_p4 <= p_Val2_3_fu_755_p2(5 downto 1);
    tmp_117_fu_807_p3 <= (tmp_116_fu_797_p4 & tmp_115_fu_791_p2);
    tmp_203_1_fu_663_p2 <= "0" when (tmp_109_fu_655_p3 = ap_const_lv6_0) else "1";
    tmp_203_2_fu_739_p2 <= "0" when (tmp_113_fu_731_p3 = ap_const_lv6_0) else "1";
    tmp_203_3_fu_815_p2 <= "0" when (tmp_117_fu_807_p3 = ap_const_lv6_0) else "1";
    tmp_204_1_fu_853_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(qb_assign_1_1_reg_1209),8));
    tmp_204_2_fu_867_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(qb_assign_1_2_reg_1219),8));
    tmp_204_3_fu_881_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(qb_assign_1_3_reg_1229),8));
    tmp_360_fu_409_p2 <= "1" when (sf_reg_318 = ap_const_lv7_40) else "0";
    tmp_361_fu_427_p2 <= (tmp_85_mid_fu_415_p2 or exitcond_flatten_fu_373_p2);
    tmp_663_fu_441_p1 <= nm_1_fu_421_p2(4 - 1 downto 0);
    tmp_664_fu_533_p3 <= p_Val2_s_fu_527_p2(15 downto 15);
    tmp_665_fu_551_p3 <= p_Val2_s_fu_527_p2(6 downto 6);
    tmp_666_fu_559_p1 <= p_Val2_s_fu_527_p2(1 - 1 downto 0);
    tmp_667_fu_609_p3 <= p_Val2_1_fu_603_p2(15 downto 15);
    tmp_668_fu_627_p3 <= p_Val2_1_fu_603_p2(6 downto 6);
    tmp_669_fu_635_p1 <= p_Val2_1_fu_603_p2(1 - 1 downto 0);
    tmp_670_fu_685_p3 <= p_Val2_2_fu_679_p2(15 downto 15);
    tmp_671_fu_703_p3 <= p_Val2_2_fu_679_p2(6 downto 6);
    tmp_672_fu_711_p1 <= p_Val2_2_fu_679_p2(1 - 1 downto 0);
    tmp_673_fu_761_p3 <= p_Val2_3_fu_755_p2(15 downto 15);
    tmp_674_fu_779_p3 <= p_Val2_3_fu_755_p2(6 downto 6);
    tmp_675_fu_787_p1 <= p_Val2_3_fu_755_p2(1 - 1 downto 0);
    tmp_84_fu_353_p3 <= (tmp_fu_349_p1 & ap_const_lv6_0);
    tmp_84_mid1_fu_445_p3 <= (tmp_663_fu_441_p1 & ap_const_lv6_0);
    tmp_84_mid2_fu_453_p3 <= 
        tmp_84_mid1_fu_445_p3 when (tmp_85_mid_fu_415_p2(0) = '1') else 
        tmp_84_mid_fu_387_p3;
    tmp_84_mid_fu_387_p3 <= 
        ap_const_lv10_0 when (exitcond_flatten_fu_373_p2(0) = '1') else 
        tmp_84_fu_353_p3;
    tmp_85_mid_fu_415_p2 <= (tmp_360_fu_409_p2 and not_exitcond_flatten_fu_403_p2);
    tmp_86_fu_481_p2 <= std_logic_vector(unsigned(sf_cast1_fu_477_p1) + unsigned(tmp_84_mid2_fu_453_p3));
    tmp_87_fu_513_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_86_reg_1150),64));
    tmp_88_fu_487_p2 <= "1" when (sf_mid2_fu_433_p3 = ap_const_lv7_3F) else "0";
    tmp_fu_349_p1 <= nm_reg_307(4 - 1 downto 0);
    weights3_m_weights_V_1_address0 <= tmp_87_fu_513_p1(10 - 1 downto 0);

    weights3_m_weights_V_1_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            weights3_m_weights_V_1_ce0 <= ap_const_logic_1;
        else 
            weights3_m_weights_V_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    weights3_m_weights_V_2_address0 <= tmp_87_fu_513_p1(10 - 1 downto 0);

    weights3_m_weights_V_2_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            weights3_m_weights_V_2_ce0 <= ap_const_logic_1;
        else 
            weights3_m_weights_V_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    weights3_m_weights_V_3_address0 <= tmp_87_fu_513_p1(10 - 1 downto 0);

    weights3_m_weights_V_3_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            weights3_m_weights_V_3_ce0 <= ap_const_logic_1;
        else 
            weights3_m_weights_V_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    weights3_m_weights_V_address0 <= tmp_87_fu_513_p1(10 - 1 downto 0);

    weights3_m_weights_V_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            weights3_m_weights_V_ce0 <= ap_const_logic_1;
        else 
            weights3_m_weights_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

end behav;
