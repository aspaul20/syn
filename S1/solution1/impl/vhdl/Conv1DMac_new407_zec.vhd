-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.2
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ==============================================================

library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity Conv1DMac_new407_zec_rom is 
    generic(
             DWIDTH     : integer := 8; 
             AWIDTH     : integer := 10; 
             MEM_SIZE    : integer := 1024
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of Conv1DMac_new407_zec_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 to 127=> "00000000", 128 => "10001110", 129 => "00000000", 130 => "11100001", 
    131 => "01110010", 132 to 133=> "00000000", 134 => "10001100", 135 => "00000000", 
    136 => "00001010", 137 to 138=> "00000000", 139 => "11110111", 140 => "01110011", 
    141 to 145=> "00000000", 146 => "00100100", 147 => "00000000", 148 => "10010001", 
    149 => "00000000", 150 => "10001010", 151 to 152=> "00000000", 153 => "11110000", 
    154 to 156=> "00000000", 157 => "11100110", 158 => "00001110", 159 => "00000000", 
    160 => "01111100", 161 => "00000000", 162 => "00011100", 163 => "01111110", 
    164 to 165=> "00000000", 166 => "10000101", 167 => "00000000", 168 => "11101011", 
    169 to 170=> "00000000", 171 => "11111101", 172 => "10000110", 173 to 177=> "00000000", 
    178 => "11100000", 179 => "00000000", 180 => "10000000", 181 => "00000000", 
    182 => "10000100", 183 to 184=> "00000000", 185 => "00010100", 186 to 188=> "00000000", 
    189 => "00010101", 190 => "11101110", 191 to 319=> "00000000", 320 => "00111011", 
    321 => "00000000", 322 => "00010011", 323 => "11001011", 324 to 325=> "00000000", 
    326 => "00110001", 327 => "00000000", 328 => "00000111", 329 to 330=> "00000000", 
    331 => "00001100", 332 => "11000010", 333 to 337=> "00000000", 338 => "11110111", 
    339 => "00000000", 340 => "00111011", 341 => "00000000", 342 => "00110101", 
    343 to 344=> "00000000", 345 => "11111010", 346 to 348=> "00000000", 349 => "00011100", 
    350 => "00000001", 351 => "00000000", 352 => "10101011", 353 => "00000000", 
    354 => "11110001", 355 => "01001010", 356 to 357=> "00000000", 358 => "10110111", 
    359 => "00000000", 360 => "11110011", 361 to 362=> "00000000", 363 => "11101011", 
    364 => "01010010", 365 to 369=> "00000000", 370 => "00001100", 371 => "00000000", 
    372 => "10101111", 373 => "00000000", 374 => "10111001", 375 to 376=> "00000000", 
    377 => "00001101", 378 to 380=> "00000000", 381 => "11101011", 382 => "11110101", 
    383 => "00000000", 384 => "11111011", 385 => "00000000", 386 => "11111111", 
    387 => "00000110", 388 to 389=> "00000000", 390 => "11111010", 391 => "00000000", 
    392 => "11111111", 393 to 394=> "00000000", 395 => "11111111", 396 => "00000101", 
    397 to 401=> "00000000", 402 => "00000001", 403 => "00000000", 404 => "11111011", 
    405 => "00000000", 406 => "11111010", 407 to 408=> "00000000", 409 => "00000001", 
    410 to 412=> "00000000", 413 to 414=> "11111111", 415 => "00000000", 416 => "11111010", 
    417 => "00000000", 418 => "00000001", 419 => "00000111", 420 to 421=> "00000000", 
    422 => "11111010", 423 to 427=> "00000000", 428 => "00000110", 429 to 433=> "00000000", 
    434 => "11111111", 435 => "00000000", 436 => "11111010", 437 => "00000000", 
    438 => "11111001", 439 to 444=> "00000000", 445 => "00000001", 446 to 511=> "00000000", 
    512 => "11111111", 513 to 514=> "00000000", 515 => "00000001", 516 to 517=> "00000000", 
    518 => "11111111", 519 => "00000000", 520 => "00010010", 521 to 522=> "00000000", 
    523 => "00001110", 524 => "11111111", 525 to 529=> "00000000", 530 => "11111111", 
    531 => "00000000", 532 => "11111111", 533 => "00000000", 534 => "11111111", 
    535 to 536=> "00000000", 537 => "11101111", 538 to 541=> "00000000", 542 => "00010001", 
    543 => "00000000", 544 => "11111111", 545 to 546=> "00000000", 547 => "00000001", 
    548 to 549=> "00000000", 550 => "11111111", 551 => "00000000", 552 => "00010100", 
    553 to 554=> "00000000", 555 => "00001111", 556 to 561=> "00000000", 562 => "11111111", 
    563 => "00000000", 564 => "11111111", 565 => "00000000", 566 => "11111111", 
    567 to 568=> "00000000", 569 => "11101110", 570 to 573=> "00000000", 574 => "00010011", 
    575 => "00000000", 576 => "00000111", 577 => "00000000", 578 => "11111110", 
    579 => "11111001", 580 to 581=> "00000000", 582 => "00001000", 583 => "00000000", 
    584 => "11111101", 585 to 586=> "00000000", 587 => "11111100", 588 => "11111001", 
    589 to 593=> "00000000", 594 => "00000010", 595 => "00000000", 596 => "00000111", 
    597 => "00000000", 598 => "00000111", 599 to 600=> "00000000", 601 => "00000100", 
    602 to 604=> "00000000", 605 => "11111101", 606 => "11111100", 607 => "00000000", 
    608 => "00001001", 609 => "00000000", 610 => "11111011", 611 => "11110111", 
    612 to 613=> "00000000", 614 => "00001001", 615 => "00000000", 616 => "00000001", 
    617 to 618=> "00000000", 619 => "11111110", 620 => "11110111", 621 to 625=> "00000000", 
    626 => "00000101", 627 => "00000000", 628 => "00001001", 629 => "00000000", 
    630 => "00001001", 631 to 636=> "00000000", 637 => "11111011", 638 to 639=> "00000000", 
    640 => "00000100", 641 => "00000000", 642 => "10101010", 643 => "11111010", 
    644 to 645=> "00000000", 646 => "11111101", 647 => "00000000", 648 => "00011010", 
    649 to 650=> "00000000", 651 => "10111100", 652 => "11111000", 653 to 657=> "00000000", 
    658 => "00110111", 659 => "00000000", 660 => "00000111", 661 => "00000000", 
    662 => "11111111", 663 to 664=> "00000000", 665 => "11101110", 666 to 668=> "00000000", 
    669 => "10111110", 670 => "00011110", 671 to 673=> "00000000", 674 => "01010010", 
    675 => "00001000", 676 to 677=> "00000000", 678 => "11110100", 679 => "00000000", 
    680 => "11110111", 681 to 682=> "00000000", 683 => "01001001", 684 => "00000010", 
    685 to 689=> "00000000", 690 => "11010001", 691 => "00000000", 692 => "11111011", 
    693 => "00000000", 694 => "11110111", 695 to 696=> "00000000", 697 => "00001101", 
    698 to 700=> "00000000", 701 => "00111011", 702 => "11101010", 703 => "00000000", 
    704 => "00000001", 705 => "00000000", 706 => "11110000", 707 => "11111111", 
    708 to 709=> "00000000", 710 => "00000001", 711 => "00000000", 712 => "11110110", 
    713 to 714=> "00000000", 715 => "11100111", 716 to 721=> "00000000", 722 => "00010100", 
    723 to 725=> "00000000", 726 => "00000001", 727 to 728=> "00000000", 729 => "00000111", 
    730 to 732=> "00000000", 733 => "11101101", 734 => "11111000", 735 to 737=> "00000000", 
    738 => "11111010", 739 => "11111111", 740 to 741=> "00000000", 742 => "00000001", 
    743 => "00000000", 744 => "11110100", 745 to 746=> "00000000", 747 => "11101011", 
    748 to 753=> "00000000", 754 => "00001010", 755 to 757=> "00000000", 758 => "00000001", 
    759 to 760=> "00000000", 761 => "00001010", 762 to 764=> "00000000", 765 => "11110111", 
    766 => "11110110", 767 => "00000000", 768 => "11111011", 769 => "00000000", 
    770 => "00010001", 771 => "00000110", 772 to 773=> "00000000", 774 => "11111001", 
    775 => "00000000", 776 => "00001010", 777 to 778=> "00000000", 779 => "00010100", 
    780 => "00001000", 781 to 785=> "00000000", 786 => "11101010", 787 => "00000000", 
    788 => "11111001", 789 => "00000000", 790 => "11111001", 791 to 792=> "00000000", 
    793 => "11110110", 794 to 796=> "00000000", 797 => "00010110", 798 => "00001001", 
    799 => "00000000", 800 => "11111100", 801 => "00000000", 802 => "00011010", 
    803 => "00000110", 804 to 805=> "00000000", 806 => "11111001", 807 => "00000000", 
    808 => "00000111", 809 to 810=> "00000000", 811 => "00010110", 812 => "00000111", 
    813 to 817=> "00000000", 818 => "11100010", 819 => "00000000", 820 => "11111010", 
    821 => "00000000", 822 => "11111001", 823 to 824=> "00000000", 825 => "11111010", 
    826 to 828=> "00000000", 829 => "00011110", 830 => "00000101", 831 to 895=> "00000000", 
    896 => "11111010", 897 => "00000000", 898 => "00000010", 899 => "00000110", 
    900 to 901=> "00000000", 902 => "11111010", 903 to 907=> "00000000", 908 => "00000110", 
    909 to 913=> "00000000", 914 => "11111110", 915 => "00000000", 916 => "11111010", 
    917 => "00000000", 918 => "11111010", 919 to 924=> "00000000", 925 => "00000010", 
    926 to 927=> "00000000", 928 => "11111001", 929 => "00000000", 930 => "00000011", 
    931 => "00001000", 932 to 933=> "00000000", 934 => "11111001", 935 to 938=> "00000000", 
    939 => "00000001", 940 => "00000111", 941 to 945=> "00000000", 946 => "11111101", 
    947 => "00000000", 948 => "11111001", 949 => "00000000", 950 => "11111000", 
    951 to 956=> "00000000", 957 => "00000100", 958 to 1023=> "00000000" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;


Library IEEE;
use IEEE.std_logic_1164.all;

entity Conv1DMac_new407_zec is
    generic (
        DataWidth : INTEGER := 8;
        AddressRange : INTEGER := 1024;
        AddressWidth : INTEGER := 10);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of Conv1DMac_new407_zec is
    component Conv1DMac_new407_zec_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    Conv1DMac_new407_zec_rom_U :  component Conv1DMac_new407_zec_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


