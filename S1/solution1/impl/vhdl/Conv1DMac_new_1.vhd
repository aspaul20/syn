-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.2
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity Conv1DMac_new_1 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    start_full_n : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    start_out : OUT STD_LOGIC;
    start_write : OUT STD_LOGIC;
    in_V_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
    in_V_V_empty_n : IN STD_LOGIC;
    in_V_V_read : OUT STD_LOGIC;
    out_V_V_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    out_V_V_full_n : IN STD_LOGIC;
    out_V_V_write : OUT STD_LOGIC );
end;


architecture behav of Conv1DMac_new_1 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv19_0 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000000000";
    constant ap_const_lv12_0 : STD_LOGIC_VECTOR (11 downto 0) := "000000000000";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv19_40000 : STD_LOGIC_VECTOR (18 downto 0) := "1000000000000000000";
    constant ap_const_lv19_1 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000000001";
    constant ap_const_lv12_400 : STD_LOGIC_VECTOR (11 downto 0) := "010000000000";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv7_40 : STD_LOGIC_VECTOR (6 downto 0) := "1000000";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv7_3F : STD_LOGIC_VECTOR (6 downto 0) := "0111111";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv12_1 : STD_LOGIC_VECTOR (11 downto 0) := "000000000001";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv8_F : STD_LOGIC_VECTOR (7 downto 0) := "00001111";
    constant ap_const_lv8_7 : STD_LOGIC_VECTOR (7 downto 0) := "00000111";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv8_8 : STD_LOGIC_VECTOR (7 downto 0) := "00001000";
    constant ap_const_lv8_FD : STD_LOGIC_VECTOR (7 downto 0) := "11111101";
    constant ap_const_lv8_6 : STD_LOGIC_VECTOR (7 downto 0) := "00000110";
    constant ap_const_lv8_2 : STD_LOGIC_VECTOR (7 downto 0) := "00000010";
    constant ap_const_lv8_A : STD_LOGIC_VECTOR (7 downto 0) := "00001010";
    constant ap_const_lv8_9 : STD_LOGIC_VECTOR (7 downto 0) := "00001001";
    constant ap_const_lv8_11 : STD_LOGIC_VECTOR (7 downto 0) := "00010001";
    constant ap_const_lv8_B : STD_LOGIC_VECTOR (7 downto 0) := "00001011";
    constant ap_const_lv8_4 : STD_LOGIC_VECTOR (7 downto 0) := "00000100";
    constant ap_const_lv8_5 : STD_LOGIC_VECTOR (7 downto 0) := "00000101";
    constant ap_const_lv8_3 : STD_LOGIC_VECTOR (7 downto 0) := "00000011";
    constant ap_const_lv8_FB : STD_LOGIC_VECTOR (7 downto 0) := "11111011";
    constant ap_const_lv8_F7 : STD_LOGIC_VECTOR (7 downto 0) := "11110111";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";

    signal real_start : STD_LOGIC;
    signal start_once_reg : STD_LOGIC := '0';
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (2 downto 0) := "001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal internal_ap_ready : STD_LOGIC;
    signal weights5_m_weights_V_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal weights5_m_weights_V_ce0 : STD_LOGIC;
    signal weights5_m_weights_V_q0 : STD_LOGIC_VECTOR (4 downto 0);
    signal weights5_m_weights_V_1_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal weights5_m_weights_V_1_ce0 : STD_LOGIC;
    signal weights5_m_weights_V_1_q0 : STD_LOGIC_VECTOR (4 downto 0);
    signal weights5_m_weights_V_2_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal weights5_m_weights_V_2_ce0 : STD_LOGIC;
    signal weights5_m_weights_V_2_q0 : STD_LOGIC_VECTOR (4 downto 0);
    signal weights5_m_weights_V_3_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal weights5_m_weights_V_3_ce0 : STD_LOGIC;
    signal weights5_m_weights_V_3_q0 : STD_LOGIC_VECTOR (5 downto 0);
    signal in_V_V_blk_n : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal exitcond_flatten7_reg_1121 : STD_LOGIC_VECTOR (0 downto 0);
    signal out_V_V_blk_n : STD_LOGIC;
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal tmp_100_reg_1163 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_100_reg_1163_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal indvar_flatten7_reg_247 : STD_LOGIC_VECTOR (18 downto 0);
    signal indvar_flatten_reg_258 : STD_LOGIC_VECTOR (11 downto 0);
    signal nm_reg_269 : STD_LOGIC_VECTOR (4 downto 0);
    signal sf_reg_280 : STD_LOGIC_VECTOR (6 downto 0);
    signal exitcond_flatten7_fu_323_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state2_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal exitcond_flatten7_reg_1121_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal indvar_flatten_next7_fu_329_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal nm_t_mid2_fu_423_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal nm_t_mid2_reg_1130 : STD_LOGIC_VECTOR (3 downto 0);
    signal nm_t_mid2_reg_1130_pp0_iter1_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal nm_t_mid2_reg_1130_pp0_iter2_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal nm_mid2_fu_431_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_100_fu_457_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_100_reg_1163_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal sf_2_fu_463_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal indvar_flatten_next_fu_475_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_V_reg_1177 : STD_LOGIC_VECTOR (7 downto 0);
    signal weights5_m_weights_V_5_reg_1183 : STD_LOGIC_VECTOR (4 downto 0);
    signal weights5_m_weights_V_7_reg_1188 : STD_LOGIC_VECTOR (4 downto 0);
    signal weights5_m_weights_V_9_reg_1193 : STD_LOGIC_VECTOR (4 downto 0);
    signal weights5_m_weights_V_11_reg_1198 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp1_fu_572_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp1_reg_1203 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp2_fu_661_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp2_reg_1208 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp3_fu_750_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp3_reg_1213 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_161_reg_1218 : STD_LOGIC_VECTOR (6 downto 0);
    signal qb_assign_2_3_fu_825_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal qb_assign_2_3_reg_1223 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state2 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal tmp_99_fu_449_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal macRegisters_0_V_5_fu_166 : STD_LOGIC_VECTOR (7 downto 0);
    signal macRegisters_0_V_fu_846_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal macRegisters_1_V_5_fu_170 : STD_LOGIC_VECTOR (7 downto 0);
    signal macRegisters_1_V_fu_855_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal macRegisters_2_V_5_fu_174 : STD_LOGIC_VECTOR (7 downto 0);
    signal macRegisters_2_V_fu_864_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal macRegisters_3_V_5_fu_178 : STD_LOGIC_VECTOR (7 downto 0);
    signal macRegisters_3_V_fu_882_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_fu_311_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal exitcond_flatten_fu_335_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_96_fu_315_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_s_fu_371_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal not_exitcond_flatten_fu_365_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal nm_mid_fu_341_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_97_mid_fu_377_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_359_fu_389_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal nm_2_fu_383_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_647_fu_403_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_96_mid1_fu_407_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_96_mid_fu_349_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal nm_t_mid_fu_357_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal sf_mid2_fu_395_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_96_mid2_fu_415_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal sf_cast2_fu_439_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_98_fu_443_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal indvar_flatten_op_fu_469_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal p_Val2_s_fu_492_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_08_cast1_cast_fu_483_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal p_Val2_s_fu_492_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal p_Val2_s_fu_492_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_649_fu_506_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_651_fu_528_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_648_fu_498_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_143_fu_538_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_142_fu_532_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_144_fu_548_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_145_fu_556_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_650_fu_520_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal qb_assign_2_fu_562_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Val2_cast_fu_516_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_146_cast_fu_568_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal p_Val2_1_fu_581_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Val2_1_fu_581_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal p_Val2_1_fu_581_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_653_fu_595_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_655_fu_617_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_652_fu_587_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_149_fu_627_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_148_fu_621_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_150_fu_637_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_227_1_fu_645_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_654_fu_609_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal qb_assign_2_1_fu_651_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Val2_81_1_cast_fu_605_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_228_1_cast_fu_657_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal p_Val2_2_fu_670_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Val2_2_fu_670_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal p_Val2_2_fu_670_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_657_fu_684_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_659_fu_706_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_656_fu_676_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_153_fu_716_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_152_fu_710_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_154_fu_726_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_227_2_fu_734_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_658_fu_698_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal qb_assign_2_2_fu_740_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Val2_81_2_cast_fu_694_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_228_2_cast_fu_746_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal p_Val2_3_fu_759_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Val2_3_fu_759_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal p_Val2_3_fu_759_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_662_fu_791_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_660_fu_765_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_157_fu_801_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_156_fu_795_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_158_fu_811_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_227_3_fu_819_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_661_fu_783_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp1_cast_fu_843_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp2_cast_fu_852_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp3_cast_fu_861_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_228_3_fu_873_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp4_fu_876_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_162_fu_870_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_163_fu_908_p18 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_164_fu_951_p18 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_165_fu_994_p18 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_166_fu_1037_p18 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Val2_22_3_fu_1074_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Val2_22_2_fu_1031_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Val2_22_1_fu_988_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Val2_5_fu_945_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;

    component computeS1_mux_164DeQ_x_x_x_x IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        din5_WIDTH : INTEGER;
        din6_WIDTH : INTEGER;
        din7_WIDTH : INTEGER;
        din8_WIDTH : INTEGER;
        din9_WIDTH : INTEGER;
        din10_WIDTH : INTEGER;
        din11_WIDTH : INTEGER;
        din12_WIDTH : INTEGER;
        din13_WIDTH : INTEGER;
        din14_WIDTH : INTEGER;
        din15_WIDTH : INTEGER;
        din16_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        din2 : IN STD_LOGIC_VECTOR (7 downto 0);
        din3 : IN STD_LOGIC_VECTOR (7 downto 0);
        din4 : IN STD_LOGIC_VECTOR (7 downto 0);
        din5 : IN STD_LOGIC_VECTOR (7 downto 0);
        din6 : IN STD_LOGIC_VECTOR (7 downto 0);
        din7 : IN STD_LOGIC_VECTOR (7 downto 0);
        din8 : IN STD_LOGIC_VECTOR (7 downto 0);
        din9 : IN STD_LOGIC_VECTOR (7 downto 0);
        din10 : IN STD_LOGIC_VECTOR (7 downto 0);
        din11 : IN STD_LOGIC_VECTOR (7 downto 0);
        din12 : IN STD_LOGIC_VECTOR (7 downto 0);
        din13 : IN STD_LOGIC_VECTOR (7 downto 0);
        din14 : IN STD_LOGIC_VECTOR (7 downto 0);
        din15 : IN STD_LOGIC_VECTOR (7 downto 0);
        din16 : IN STD_LOGIC_VECTOR (3 downto 0);
        dout : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component computeS1_mux_164DeQ IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        din5_WIDTH : INTEGER;
        din6_WIDTH : INTEGER;
        din7_WIDTH : INTEGER;
        din8_WIDTH : INTEGER;
        din9_WIDTH : INTEGER;
        din10_WIDTH : INTEGER;
        din11_WIDTH : INTEGER;
        din12_WIDTH : INTEGER;
        din13_WIDTH : INTEGER;
        din14_WIDTH : INTEGER;
        din15_WIDTH : INTEGER;
        din16_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        din2 : IN STD_LOGIC_VECTOR (7 downto 0);
        din3 : IN STD_LOGIC_VECTOR (7 downto 0);
        din4 : IN STD_LOGIC_VECTOR (7 downto 0);
        din5 : IN STD_LOGIC_VECTOR (7 downto 0);
        din6 : IN STD_LOGIC_VECTOR (7 downto 0);
        din7 : IN STD_LOGIC_VECTOR (7 downto 0);
        din8 : IN STD_LOGIC_VECTOR (7 downto 0);
        din9 : IN STD_LOGIC_VECTOR (7 downto 0);
        din10 : IN STD_LOGIC_VECTOR (7 downto 0);
        din11 : IN STD_LOGIC_VECTOR (7 downto 0);
        din12 : IN STD_LOGIC_VECTOR (7 downto 0);
        din13 : IN STD_LOGIC_VECTOR (7 downto 0);
        din14 : IN STD_LOGIC_VECTOR (7 downto 0);
        din15 : IN STD_LOGIC_VECTOR (7 downto 0);
        din16 : IN STD_LOGIC_VECTOR (3 downto 0);
        dout : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component Conv1DMac_new_1_wVhK IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (4 downto 0) );
    end component;


    component Conv1DMac_new_1_wWhU IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (4 downto 0) );
    end component;


    component Conv1DMac_new_1_wXh4 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (4 downto 0) );
    end component;


    component Conv1DMac_new_1_wYie IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (5 downto 0) );
    end component;



begin
    weights5_m_weights_V_U : component Conv1DMac_new_1_wVhK
    generic map (
        DataWidth => 5,
        AddressRange => 1024,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => weights5_m_weights_V_address0,
        ce0 => weights5_m_weights_V_ce0,
        q0 => weights5_m_weights_V_q0);

    weights5_m_weights_V_1_U : component Conv1DMac_new_1_wWhU
    generic map (
        DataWidth => 5,
        AddressRange => 1024,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => weights5_m_weights_V_1_address0,
        ce0 => weights5_m_weights_V_1_ce0,
        q0 => weights5_m_weights_V_1_q0);

    weights5_m_weights_V_2_U : component Conv1DMac_new_1_wXh4
    generic map (
        DataWidth => 5,
        AddressRange => 1024,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => weights5_m_weights_V_2_address0,
        ce0 => weights5_m_weights_V_2_ce0,
        q0 => weights5_m_weights_V_2_q0);

    weights5_m_weights_V_3_U : component Conv1DMac_new_1_wYie
    generic map (
        DataWidth => 6,
        AddressRange => 1024,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => weights5_m_weights_V_3_address0,
        ce0 => weights5_m_weights_V_3_ce0,
        q0 => weights5_m_weights_V_3_q0);

    computeS1_mux_164DeQ_x_x_x_x_U127 : component computeS1_mux_164DeQ_x_x_x_x
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 8,
        din3_WIDTH => 8,
        din4_WIDTH => 8,
        din5_WIDTH => 8,
        din6_WIDTH => 8,
        din7_WIDTH => 8,
        din8_WIDTH => 8,
        din9_WIDTH => 8,
        din10_WIDTH => 8,
        din11_WIDTH => 8,
        din12_WIDTH => 8,
        din13_WIDTH => 8,
        din14_WIDTH => 8,
        din15_WIDTH => 8,
        din16_WIDTH => 4,
        dout_WIDTH => 8)
    port map (
        din0 => ap_const_lv8_0,
        din1 => ap_const_lv8_0,
        din2 => ap_const_lv8_0,
        din3 => ap_const_lv8_F,
        din4 => ap_const_lv8_0,
        din5 => ap_const_lv8_0,
        din6 => ap_const_lv8_7,
        din7 => ap_const_lv8_0,
        din8 => ap_const_lv8_0,
        din9 => ap_const_lv8_1,
        din10 => ap_const_lv8_0,
        din11 => ap_const_lv8_8,
        din12 => ap_const_lv8_0,
        din13 => ap_const_lv8_0,
        din14 => ap_const_lv8_FD,
        din15 => ap_const_lv8_FD,
        din16 => nm_t_mid2_reg_1130_pp0_iter2_reg,
        dout => tmp_163_fu_908_p18);

    computeS1_mux_164DeQ_U128 : component computeS1_mux_164DeQ
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 8,
        din3_WIDTH => 8,
        din4_WIDTH => 8,
        din5_WIDTH => 8,
        din6_WIDTH => 8,
        din7_WIDTH => 8,
        din8_WIDTH => 8,
        din9_WIDTH => 8,
        din10_WIDTH => 8,
        din11_WIDTH => 8,
        din12_WIDTH => 8,
        din13_WIDTH => 8,
        din14_WIDTH => 8,
        din15_WIDTH => 8,
        din16_WIDTH => 4,
        dout_WIDTH => 8)
    port map (
        din0 => ap_const_lv8_6,
        din1 => ap_const_lv8_2,
        din2 => ap_const_lv8_0,
        din3 => ap_const_lv8_0,
        din4 => ap_const_lv8_A,
        din5 => ap_const_lv8_0,
        din6 => ap_const_lv8_2,
        din7 => ap_const_lv8_0,
        din8 => ap_const_lv8_F,
        din9 => ap_const_lv8_0,
        din10 => ap_const_lv8_0,
        din11 => ap_const_lv8_0,
        din12 => ap_const_lv8_0,
        din13 => ap_const_lv8_9,
        din14 => ap_const_lv8_11,
        din15 => ap_const_lv8_0,
        din16 => nm_t_mid2_reg_1130_pp0_iter2_reg,
        dout => tmp_164_fu_951_p18);

    computeS1_mux_164DeQ_x_x_x_x_U129 : component computeS1_mux_164DeQ_x_x_x_x
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 8,
        din3_WIDTH => 8,
        din4_WIDTH => 8,
        din5_WIDTH => 8,
        din6_WIDTH => 8,
        din7_WIDTH => 8,
        din8_WIDTH => 8,
        din9_WIDTH => 8,
        din10_WIDTH => 8,
        din11_WIDTH => 8,
        din12_WIDTH => 8,
        din13_WIDTH => 8,
        din14_WIDTH => 8,
        din15_WIDTH => 8,
        din16_WIDTH => 4,
        dout_WIDTH => 8)
    port map (
        din0 => ap_const_lv8_2,
        din1 => ap_const_lv8_0,
        din2 => ap_const_lv8_0,
        din3 => ap_const_lv8_6,
        din4 => ap_const_lv8_6,
        din5 => ap_const_lv8_0,
        din6 => ap_const_lv8_0,
        din7 => ap_const_lv8_0,
        din8 => ap_const_lv8_B,
        din9 => ap_const_lv8_0,
        din10 => ap_const_lv8_0,
        din11 => ap_const_lv8_4,
        din12 => ap_const_lv8_5,
        din13 => ap_const_lv8_0,
        din14 => ap_const_lv8_3,
        din15 => ap_const_lv8_FB,
        din16 => nm_t_mid2_reg_1130_pp0_iter2_reg,
        dout => tmp_165_fu_994_p18);

    computeS1_mux_164DeQ_x_x_x_x_U130 : component computeS1_mux_164DeQ_x_x_x_x
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 8,
        din3_WIDTH => 8,
        din4_WIDTH => 8,
        din5_WIDTH => 8,
        din6_WIDTH => 8,
        din7_WIDTH => 8,
        din8_WIDTH => 8,
        din9_WIDTH => 8,
        din10_WIDTH => 8,
        din11_WIDTH => 8,
        din12_WIDTH => 8,
        din13_WIDTH => 8,
        din14_WIDTH => 8,
        din15_WIDTH => 8,
        din16_WIDTH => 4,
        dout_WIDTH => 8)
    port map (
        din0 => ap_const_lv8_0,
        din1 => ap_const_lv8_0,
        din2 => ap_const_lv8_F7,
        din3 => ap_const_lv8_0,
        din4 => ap_const_lv8_0,
        din5 => ap_const_lv8_9,
        din6 => ap_const_lv8_8,
        din7 => ap_const_lv8_0,
        din8 => ap_const_lv8_0,
        din9 => ap_const_lv8_0,
        din10 => ap_const_lv8_2,
        din11 => ap_const_lv8_0,
        din12 => ap_const_lv8_B,
        din13 => ap_const_lv8_0,
        din14 => ap_const_lv8_0,
        din15 => ap_const_lv8_0,
        din16 => nm_t_mid2_reg_1130_pp0_iter2_reg,
        dout => tmp_166_fu_1037_p18);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2)) then 
                        ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state2);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                elsif ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    start_once_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                start_once_reg <= ap_const_logic_0;
            else
                if (((internal_ap_ready = ap_const_logic_0) and (real_start = ap_const_logic_1))) then 
                    start_once_reg <= ap_const_logic_1;
                elsif ((internal_ap_ready = ap_const_logic_1)) then 
                    start_once_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    indvar_flatten7_reg_247_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_flatten7_fu_323_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                indvar_flatten7_reg_247 <= indvar_flatten_next7_fu_329_p2;
            elsif ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                indvar_flatten7_reg_247 <= ap_const_lv19_0;
            end if; 
        end if;
    end process;

    indvar_flatten_reg_258_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_flatten7_fu_323_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                indvar_flatten_reg_258 <= indvar_flatten_next_fu_475_p3;
            elsif ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                indvar_flatten_reg_258 <= ap_const_lv12_0;
            end if; 
        end if;
    end process;

    macRegisters_0_V_5_fu_166_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_100_reg_1163_pp0_iter2_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                macRegisters_0_V_5_fu_166 <= macRegisters_0_V_fu_846_p2;
            elsif ((((tmp_100_reg_1163_pp0_iter2_reg = ap_const_lv1_1) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or (not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
                macRegisters_0_V_5_fu_166 <= ap_const_lv8_0;
            end if; 
        end if;
    end process;

    macRegisters_1_V_5_fu_170_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_100_reg_1163_pp0_iter2_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                macRegisters_1_V_5_fu_170 <= macRegisters_1_V_fu_855_p2;
            elsif ((((tmp_100_reg_1163_pp0_iter2_reg = ap_const_lv1_1) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or (not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
                macRegisters_1_V_5_fu_170 <= ap_const_lv8_0;
            end if; 
        end if;
    end process;

    macRegisters_2_V_5_fu_174_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_100_reg_1163_pp0_iter2_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                macRegisters_2_V_5_fu_174 <= macRegisters_2_V_fu_864_p2;
            elsif ((((tmp_100_reg_1163_pp0_iter2_reg = ap_const_lv1_1) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or (not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
                macRegisters_2_V_5_fu_174 <= ap_const_lv8_0;
            end if; 
        end if;
    end process;

    macRegisters_3_V_5_fu_178_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_100_reg_1163_pp0_iter2_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                macRegisters_3_V_5_fu_178 <= macRegisters_3_V_fu_882_p2;
            elsif ((((tmp_100_reg_1163_pp0_iter2_reg = ap_const_lv1_1) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or (not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
                macRegisters_3_V_5_fu_178 <= ap_const_lv8_0;
            end if; 
        end if;
    end process;

    nm_reg_269_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_flatten7_fu_323_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                nm_reg_269 <= nm_mid2_fu_431_p3;
            elsif ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                nm_reg_269 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    sf_reg_280_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_flatten7_fu_323_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                sf_reg_280 <= sf_2_fu_463_p2;
            elsif ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                sf_reg_280 <= ap_const_lv7_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                exitcond_flatten7_reg_1121 <= exitcond_flatten7_fu_323_p2;
                exitcond_flatten7_reg_1121_pp0_iter1_reg <= exitcond_flatten7_reg_1121;
                nm_t_mid2_reg_1130_pp0_iter1_reg <= nm_t_mid2_reg_1130;
                tmp_100_reg_1163_pp0_iter1_reg <= tmp_100_reg_1163;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_flatten7_fu_323_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                nm_t_mid2_reg_1130 <= nm_t_mid2_fu_423_p3;
                tmp_100_reg_1163 <= tmp_100_fu_457_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                nm_t_mid2_reg_1130_pp0_iter2_reg <= nm_t_mid2_reg_1130_pp0_iter1_reg;
                tmp_100_reg_1163_pp0_iter2_reg <= tmp_100_reg_1163_pp0_iter1_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_flatten7_reg_1121_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                qb_assign_2_3_reg_1223 <= qb_assign_2_3_fu_825_p2;
                tmp1_reg_1203 <= tmp1_fu_572_p2;
                tmp2_reg_1208 <= tmp2_fu_661_p2;
                tmp3_reg_1213 <= tmp3_fu_750_p2;
                tmp_161_reg_1218 <= p_Val2_3_fu_759_p2(13 downto 7);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_flatten7_reg_1121 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                tmp_V_reg_1177 <= in_V_V_dout;
                weights5_m_weights_V_11_reg_1198 <= weights5_m_weights_V_3_q0;
                weights5_m_weights_V_5_reg_1183 <= weights5_m_weights_V_q0;
                weights5_m_weights_V_7_reg_1188 <= weights5_m_weights_V_1_q0;
                weights5_m_weights_V_9_reg_1193 <= weights5_m_weights_V_2_q0;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (real_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter3, exitcond_flatten7_fu_323_p2, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, ap_enable_reg_pp0_iter2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((exitcond_flatten7_fu_323_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) and not(((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) or ((exitcond_flatten7_fu_323_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone)))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXX";
        end case;
    end process;
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(1);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state6 <= ap_CS_fsm(2);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(in_V_V_empty_n, out_V_V_full_n, ap_enable_reg_pp0_iter1, exitcond_flatten7_reg_1121, ap_enable_reg_pp0_iter3, tmp_100_reg_1163_pp0_iter2_reg)
    begin
                ap_block_pp0_stage0_01001 <= (((tmp_100_reg_1163_pp0_iter2_reg = ap_const_lv1_1) and (out_V_V_full_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1)) or ((exitcond_flatten7_reg_1121 = ap_const_lv1_0) and (in_V_V_empty_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(in_V_V_empty_n, out_V_V_full_n, ap_enable_reg_pp0_iter1, exitcond_flatten7_reg_1121, ap_enable_reg_pp0_iter3, tmp_100_reg_1163_pp0_iter2_reg)
    begin
                ap_block_pp0_stage0_11001 <= (((tmp_100_reg_1163_pp0_iter2_reg = ap_const_lv1_1) and (out_V_V_full_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1)) or ((exitcond_flatten7_reg_1121 = ap_const_lv1_0) and (in_V_V_empty_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(in_V_V_empty_n, out_V_V_full_n, ap_enable_reg_pp0_iter1, exitcond_flatten7_reg_1121, ap_enable_reg_pp0_iter3, tmp_100_reg_1163_pp0_iter2_reg)
    begin
                ap_block_pp0_stage0_subdone <= (((tmp_100_reg_1163_pp0_iter2_reg = ap_const_lv1_1) and (out_V_V_full_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1)) or ((exitcond_flatten7_reg_1121 = ap_const_lv1_0) and (in_V_V_empty_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)));
    end process;


    ap_block_state1_assign_proc : process(real_start, ap_done_reg)
    begin
                ap_block_state1 <= ((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;

        ap_block_state2_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state3_pp0_stage0_iter1_assign_proc : process(in_V_V_empty_n, exitcond_flatten7_reg_1121)
    begin
                ap_block_state3_pp0_stage0_iter1 <= ((exitcond_flatten7_reg_1121 = ap_const_lv1_0) and (in_V_V_empty_n = ap_const_logic_0));
    end process;

        ap_block_state4_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state5_pp0_stage0_iter3_assign_proc : process(out_V_V_full_n, tmp_100_reg_1163_pp0_iter2_reg)
    begin
                ap_block_state5_pp0_stage0_iter3 <= ((tmp_100_reg_1163_pp0_iter2_reg = ap_const_lv1_1) and (out_V_V_full_n = ap_const_logic_0));
    end process;


    ap_condition_pp0_exit_iter0_state2_assign_proc : process(exitcond_flatten7_fu_323_p2)
    begin
        if ((exitcond_flatten7_fu_323_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_done_reg, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(real_start, ap_CS_fsm_state1)
    begin
        if (((real_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_ready <= internal_ap_ready;
    exitcond_flatten7_fu_323_p2 <= "1" when (indvar_flatten7_reg_247 = ap_const_lv19_40000) else "0";
    exitcond_flatten_fu_335_p2 <= "1" when (indvar_flatten_reg_258 = ap_const_lv12_400) else "0";

    in_V_V_blk_n_assign_proc : process(in_V_V_empty_n, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, exitcond_flatten7_reg_1121)
    begin
        if (((exitcond_flatten7_reg_1121 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            in_V_V_blk_n <= in_V_V_empty_n;
        else 
            in_V_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    in_V_V_read_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, exitcond_flatten7_reg_1121, ap_block_pp0_stage0_11001)
    begin
        if (((exitcond_flatten7_reg_1121 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            in_V_V_read <= ap_const_logic_1;
        else 
            in_V_V_read <= ap_const_logic_0;
        end if; 
    end process;

    indvar_flatten_next7_fu_329_p2 <= std_logic_vector(unsigned(ap_const_lv19_1) + unsigned(indvar_flatten7_reg_247));
    indvar_flatten_next_fu_475_p3 <= 
        ap_const_lv12_1 when (exitcond_flatten_fu_335_p2(0) = '1') else 
        indvar_flatten_op_fu_469_p2;
    indvar_flatten_op_fu_469_p2 <= std_logic_vector(unsigned(indvar_flatten_reg_258) + unsigned(ap_const_lv12_1));

    internal_ap_ready_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            internal_ap_ready <= ap_const_logic_1;
        else 
            internal_ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    macRegisters_0_V_fu_846_p2 <= std_logic_vector(signed(tmp1_cast_fu_843_p1) + signed(macRegisters_0_V_5_fu_166));
    macRegisters_1_V_fu_855_p2 <= std_logic_vector(signed(tmp2_cast_fu_852_p1) + signed(macRegisters_1_V_5_fu_170));
    macRegisters_2_V_fu_864_p2 <= std_logic_vector(signed(tmp3_cast_fu_861_p1) + signed(macRegisters_2_V_5_fu_174));
    macRegisters_3_V_fu_882_p2 <= std_logic_vector(unsigned(tmp4_fu_876_p2) + unsigned(tmp_162_fu_870_p1));
    nm_2_fu_383_p2 <= std_logic_vector(unsigned(ap_const_lv5_1) + unsigned(nm_mid_fu_341_p3));
    nm_mid2_fu_431_p3 <= 
        nm_2_fu_383_p2 when (tmp_97_mid_fu_377_p2(0) = '1') else 
        nm_mid_fu_341_p3;
    nm_mid_fu_341_p3 <= 
        ap_const_lv5_0 when (exitcond_flatten_fu_335_p2(0) = '1') else 
        nm_reg_269;
    nm_t_mid2_fu_423_p3 <= 
        tmp_647_fu_403_p1 when (tmp_97_mid_fu_377_p2(0) = '1') else 
        nm_t_mid_fu_357_p3;
    nm_t_mid_fu_357_p3 <= 
        ap_const_lv4_0 when (exitcond_flatten_fu_335_p2(0) = '1') else 
        tmp_fu_311_p1;
    not_exitcond_flatten_fu_365_p2 <= (exitcond_flatten_fu_335_p2 xor ap_const_lv1_1);

    out_V_V_blk_n_assign_proc : process(out_V_V_full_n, ap_block_pp0_stage0, ap_enable_reg_pp0_iter3, tmp_100_reg_1163_pp0_iter2_reg)
    begin
        if (((tmp_100_reg_1163_pp0_iter2_reg = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            out_V_V_blk_n <= out_V_V_full_n;
        else 
            out_V_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    out_V_V_din <= (((p_Val2_22_3_fu_1074_p2 & p_Val2_22_2_fu_1031_p2) & p_Val2_22_1_fu_988_p2) & p_Val2_5_fu_945_p2);

    out_V_V_write_assign_proc : process(ap_enable_reg_pp0_iter3, tmp_100_reg_1163_pp0_iter2_reg, ap_block_pp0_stage0_11001)
    begin
        if (((tmp_100_reg_1163_pp0_iter2_reg = ap_const_lv1_1) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            out_V_V_write <= ap_const_logic_1;
        else 
            out_V_V_write <= ap_const_logic_0;
        end if; 
    end process;

        p_08_cast1_cast_fu_483_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_V_reg_1177),13));

    p_Val2_1_fu_581_p0 <= p_08_cast1_cast_fu_483_p1(8 - 1 downto 0);
    p_Val2_1_fu_581_p1 <= weights5_m_weights_V_7_reg_1188;
    p_Val2_1_fu_581_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(p_Val2_1_fu_581_p0) * signed(p_Val2_1_fu_581_p1))), 13));
    p_Val2_22_1_fu_988_p2 <= std_logic_vector(unsigned(macRegisters_1_V_fu_855_p2) + unsigned(tmp_164_fu_951_p18));
    p_Val2_22_2_fu_1031_p2 <= std_logic_vector(unsigned(macRegisters_2_V_fu_864_p2) + unsigned(tmp_165_fu_994_p18));
    p_Val2_22_3_fu_1074_p2 <= std_logic_vector(unsigned(macRegisters_3_V_fu_882_p2) + unsigned(tmp_166_fu_1037_p18));
    p_Val2_2_fu_670_p0 <= p_08_cast1_cast_fu_483_p1(8 - 1 downto 0);
    p_Val2_2_fu_670_p1 <= weights5_m_weights_V_9_reg_1193;
    p_Val2_2_fu_670_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(p_Val2_2_fu_670_p0) * signed(p_Val2_2_fu_670_p1))), 13));
    p_Val2_3_fu_759_p0 <= tmp_V_reg_1177;
    p_Val2_3_fu_759_p1 <= weights5_m_weights_V_11_reg_1198;
    p_Val2_3_fu_759_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(p_Val2_3_fu_759_p0) * signed(p_Val2_3_fu_759_p1))), 14));
    p_Val2_5_fu_945_p2 <= std_logic_vector(unsigned(macRegisters_0_V_fu_846_p2) + unsigned(tmp_163_fu_908_p18));
        p_Val2_81_1_cast_fu_605_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_653_fu_595_p4),7));

        p_Val2_81_2_cast_fu_694_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_657_fu_684_p4),7));

        p_Val2_cast_fu_516_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_649_fu_506_p4),7));

    p_Val2_s_fu_492_p0 <= p_08_cast1_cast_fu_483_p1(8 - 1 downto 0);
    p_Val2_s_fu_492_p1 <= weights5_m_weights_V_5_reg_1183;
    p_Val2_s_fu_492_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(p_Val2_s_fu_492_p0) * signed(p_Val2_s_fu_492_p1))), 13));
    qb_assign_2_1_fu_651_p2 <= (tmp_654_fu_609_p3 and tmp_227_1_fu_645_p2);
    qb_assign_2_2_fu_740_p2 <= (tmp_658_fu_698_p3 and tmp_227_2_fu_734_p2);
    qb_assign_2_3_fu_825_p2 <= (tmp_661_fu_783_p3 and tmp_227_3_fu_819_p2);
    qb_assign_2_fu_562_p2 <= (tmp_650_fu_520_p3 and tmp_145_fu_556_p2);

    real_start_assign_proc : process(ap_start, start_full_n, start_once_reg)
    begin
        if (((start_once_reg = ap_const_logic_0) and (start_full_n = ap_const_logic_0))) then 
            real_start <= ap_const_logic_0;
        else 
            real_start <= ap_start;
        end if; 
    end process;

    sf_2_fu_463_p2 <= std_logic_vector(unsigned(sf_mid2_fu_395_p3) + unsigned(ap_const_lv7_1));
    sf_cast2_fu_439_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sf_mid2_fu_395_p3),10));
    sf_mid2_fu_395_p3 <= 
        ap_const_lv7_0 when (tmp_359_fu_389_p2(0) = '1') else 
        sf_reg_280;
    start_out <= real_start;

    start_write_assign_proc : process(real_start, start_once_reg)
    begin
        if (((start_once_reg = ap_const_logic_0) and (real_start = ap_const_logic_1))) then 
            start_write <= ap_const_logic_1;
        else 
            start_write <= ap_const_logic_0;
        end if; 
    end process;

        tmp1_cast_fu_843_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp1_reg_1203),8));

    tmp1_fu_572_p2 <= std_logic_vector(signed(p_Val2_cast_fu_516_p1) + signed(tmp_146_cast_fu_568_p1));
        tmp2_cast_fu_852_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp2_reg_1208),8));

    tmp2_fu_661_p2 <= std_logic_vector(signed(p_Val2_81_1_cast_fu_605_p1) + signed(tmp_228_1_cast_fu_657_p1));
        tmp3_cast_fu_861_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp3_reg_1213),8));

    tmp3_fu_750_p2 <= std_logic_vector(signed(p_Val2_81_2_cast_fu_694_p1) + signed(tmp_228_2_cast_fu_746_p1));
    tmp4_fu_876_p2 <= std_logic_vector(unsigned(macRegisters_3_V_5_fu_178) + unsigned(tmp_228_3_fu_873_p1));
    tmp_100_fu_457_p2 <= "1" when (sf_mid2_fu_395_p3 = ap_const_lv7_3F) else "0";
    tmp_142_fu_532_p2 <= (tmp_651_fu_528_p1 or tmp_648_fu_498_p3);
    tmp_143_fu_538_p4 <= p_Val2_s_fu_492_p2(5 downto 1);
    tmp_144_fu_548_p3 <= (tmp_143_fu_538_p4 & tmp_142_fu_532_p2);
    tmp_145_fu_556_p2 <= "0" when (tmp_144_fu_548_p3 = ap_const_lv6_0) else "1";
    tmp_146_cast_fu_568_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(qb_assign_2_fu_562_p2),7));
    tmp_148_fu_621_p2 <= (tmp_655_fu_617_p1 or tmp_652_fu_587_p3);
    tmp_149_fu_627_p4 <= p_Val2_1_fu_581_p2(5 downto 1);
    tmp_150_fu_637_p3 <= (tmp_149_fu_627_p4 & tmp_148_fu_621_p2);
    tmp_152_fu_710_p2 <= (tmp_659_fu_706_p1 or tmp_656_fu_676_p3);
    tmp_153_fu_716_p4 <= p_Val2_2_fu_670_p2(5 downto 1);
    tmp_154_fu_726_p3 <= (tmp_153_fu_716_p4 & tmp_152_fu_710_p2);
    tmp_156_fu_795_p2 <= (tmp_662_fu_791_p1 or tmp_660_fu_765_p3);
    tmp_157_fu_801_p4 <= p_Val2_3_fu_759_p2(5 downto 1);
    tmp_158_fu_811_p3 <= (tmp_157_fu_801_p4 & tmp_156_fu_795_p2);
        tmp_162_fu_870_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_161_reg_1218),8));

    tmp_227_1_fu_645_p2 <= "0" when (tmp_150_fu_637_p3 = ap_const_lv6_0) else "1";
    tmp_227_2_fu_734_p2 <= "0" when (tmp_154_fu_726_p3 = ap_const_lv6_0) else "1";
    tmp_227_3_fu_819_p2 <= "0" when (tmp_158_fu_811_p3 = ap_const_lv6_0) else "1";
    tmp_228_1_cast_fu_657_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(qb_assign_2_1_fu_651_p2),7));
    tmp_228_2_cast_fu_746_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(qb_assign_2_2_fu_740_p2),7));
    tmp_228_3_fu_873_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(qb_assign_2_3_reg_1223),8));
    tmp_359_fu_389_p2 <= (tmp_97_mid_fu_377_p2 or exitcond_flatten_fu_335_p2);
    tmp_647_fu_403_p1 <= nm_2_fu_383_p2(4 - 1 downto 0);
    tmp_648_fu_498_p3 <= p_Val2_s_fu_492_p2(12 downto 12);
    tmp_649_fu_506_p4 <= p_Val2_s_fu_492_p2(12 downto 7);
    tmp_650_fu_520_p3 <= p_Val2_s_fu_492_p2(6 downto 6);
    tmp_651_fu_528_p1 <= p_Val2_s_fu_492_p2(1 - 1 downto 0);
    tmp_652_fu_587_p3 <= p_Val2_1_fu_581_p2(12 downto 12);
    tmp_653_fu_595_p4 <= p_Val2_1_fu_581_p2(12 downto 7);
    tmp_654_fu_609_p3 <= p_Val2_1_fu_581_p2(6 downto 6);
    tmp_655_fu_617_p1 <= p_Val2_1_fu_581_p2(1 - 1 downto 0);
    tmp_656_fu_676_p3 <= p_Val2_2_fu_670_p2(12 downto 12);
    tmp_657_fu_684_p4 <= p_Val2_2_fu_670_p2(12 downto 7);
    tmp_658_fu_698_p3 <= p_Val2_2_fu_670_p2(6 downto 6);
    tmp_659_fu_706_p1 <= p_Val2_2_fu_670_p2(1 - 1 downto 0);
    tmp_660_fu_765_p3 <= p_Val2_3_fu_759_p2(13 downto 13);
    tmp_661_fu_783_p3 <= p_Val2_3_fu_759_p2(6 downto 6);
    tmp_662_fu_791_p1 <= p_Val2_3_fu_759_p2(1 - 1 downto 0);
    tmp_96_fu_315_p3 <= (tmp_fu_311_p1 & ap_const_lv6_0);
    tmp_96_mid1_fu_407_p3 <= (tmp_647_fu_403_p1 & ap_const_lv6_0);
    tmp_96_mid2_fu_415_p3 <= 
        tmp_96_mid1_fu_407_p3 when (tmp_97_mid_fu_377_p2(0) = '1') else 
        tmp_96_mid_fu_349_p3;
    tmp_96_mid_fu_349_p3 <= 
        ap_const_lv10_0 when (exitcond_flatten_fu_335_p2(0) = '1') else 
        tmp_96_fu_315_p3;
    tmp_97_mid_fu_377_p2 <= (tmp_s_fu_371_p2 and not_exitcond_flatten_fu_365_p2);
    tmp_98_fu_443_p2 <= std_logic_vector(unsigned(tmp_96_mid2_fu_415_p3) + unsigned(sf_cast2_fu_439_p1));
    tmp_99_fu_449_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_98_fu_443_p2),64));
    tmp_fu_311_p1 <= nm_reg_269(4 - 1 downto 0);
    tmp_s_fu_371_p2 <= "1" when (sf_reg_280 = ap_const_lv7_40) else "0";
    weights5_m_weights_V_1_address0 <= tmp_99_fu_449_p1(10 - 1 downto 0);

    weights5_m_weights_V_1_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            weights5_m_weights_V_1_ce0 <= ap_const_logic_1;
        else 
            weights5_m_weights_V_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    weights5_m_weights_V_2_address0 <= tmp_99_fu_449_p1(10 - 1 downto 0);

    weights5_m_weights_V_2_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            weights5_m_weights_V_2_ce0 <= ap_const_logic_1;
        else 
            weights5_m_weights_V_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    weights5_m_weights_V_3_address0 <= tmp_99_fu_449_p1(10 - 1 downto 0);

    weights5_m_weights_V_3_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            weights5_m_weights_V_3_ce0 <= ap_const_logic_1;
        else 
            weights5_m_weights_V_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    weights5_m_weights_V_address0 <= tmp_99_fu_449_p1(10 - 1 downto 0);

    weights5_m_weights_V_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            weights5_m_weights_V_ce0 <= ap_const_logic_1;
        else 
            weights5_m_weights_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

end behav;
