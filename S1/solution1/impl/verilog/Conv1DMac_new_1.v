// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module Conv1DMac_new_1 (
        ap_clk,
        ap_rst,
        ap_start,
        start_full_n,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        start_out,
        start_write,
        in_V_V_dout,
        in_V_V_empty_n,
        in_V_V_read,
        out_V_V_din,
        out_V_V_full_n,
        out_V_V_write
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_pp0_stage0 = 3'd2;
parameter    ap_ST_fsm_state6 = 3'd4;

input   ap_clk;
input   ap_rst;
input   ap_start;
input   start_full_n;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output   start_out;
output   start_write;
input  [7:0] in_V_V_dout;
input   in_V_V_empty_n;
output   in_V_V_read;
output  [31:0] out_V_V_din;
input   out_V_V_full_n;
output   out_V_V_write;

reg ap_done;
reg ap_idle;
reg start_write;
reg in_V_V_read;
reg out_V_V_write;

reg    real_start;
reg    start_once_reg;
reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    internal_ap_ready;
wire   [9:0] weights5_m_weights_V_address0;
reg    weights5_m_weights_V_ce0;
wire   [4:0] weights5_m_weights_V_q0;
wire   [9:0] weights5_m_weights_V_1_address0;
reg    weights5_m_weights_V_1_ce0;
wire   [4:0] weights5_m_weights_V_1_q0;
wire   [9:0] weights5_m_weights_V_2_address0;
reg    weights5_m_weights_V_2_ce0;
wire   [4:0] weights5_m_weights_V_2_q0;
wire   [9:0] weights5_m_weights_V_3_address0;
reg    weights5_m_weights_V_3_ce0;
wire   [5:0] weights5_m_weights_V_3_q0;
reg    in_V_V_blk_n;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
reg   [0:0] exitcond_flatten7_reg_1121;
reg    out_V_V_blk_n;
reg    ap_enable_reg_pp0_iter3;
reg   [0:0] tmp_100_reg_1163;
reg   [0:0] tmp_100_reg_1163_pp0_iter2_reg;
reg   [18:0] indvar_flatten7_reg_247;
reg   [11:0] indvar_flatten_reg_258;
reg   [4:0] nm_reg_269;
reg   [6:0] sf_reg_280;
wire   [0:0] exitcond_flatten7_fu_323_p2;
wire    ap_block_state2_pp0_stage0_iter0;
reg    ap_block_state3_pp0_stage0_iter1;
wire    ap_block_state4_pp0_stage0_iter2;
reg    ap_block_state5_pp0_stage0_iter3;
reg    ap_block_pp0_stage0_11001;
reg   [0:0] exitcond_flatten7_reg_1121_pp0_iter1_reg;
wire   [18:0] indvar_flatten_next7_fu_329_p2;
reg    ap_enable_reg_pp0_iter0;
wire   [3:0] nm_t_mid2_fu_423_p3;
reg   [3:0] nm_t_mid2_reg_1130;
reg   [3:0] nm_t_mid2_reg_1130_pp0_iter1_reg;
reg   [3:0] nm_t_mid2_reg_1130_pp0_iter2_reg;
wire   [4:0] nm_mid2_fu_431_p3;
wire   [0:0] tmp_100_fu_457_p2;
reg   [0:0] tmp_100_reg_1163_pp0_iter1_reg;
wire   [6:0] sf_2_fu_463_p2;
wire   [11:0] indvar_flatten_next_fu_475_p3;
reg  signed [7:0] tmp_V_reg_1177;
reg   [4:0] weights5_m_weights_V_5_reg_1183;
reg   [4:0] weights5_m_weights_V_7_reg_1188;
reg   [4:0] weights5_m_weights_V_9_reg_1193;
reg   [5:0] weights5_m_weights_V_11_reg_1198;
wire   [6:0] tmp1_fu_572_p2;
reg   [6:0] tmp1_reg_1203;
wire   [6:0] tmp2_fu_661_p2;
reg   [6:0] tmp2_reg_1208;
wire   [6:0] tmp3_fu_750_p2;
reg   [6:0] tmp3_reg_1213;
reg   [6:0] tmp_161_reg_1218;
wire   [0:0] qb_assign_2_3_fu_825_p2;
reg   [0:0] qb_assign_2_3_reg_1223;
reg    ap_block_state1;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state2;
reg    ap_enable_reg_pp0_iter2;
wire   [63:0] tmp_99_fu_449_p1;
reg    ap_block_pp0_stage0_01001;
reg   [7:0] macRegisters_0_V_5_fu_166;
wire   [7:0] macRegisters_0_V_fu_846_p2;
reg   [7:0] macRegisters_1_V_5_fu_170;
wire   [7:0] macRegisters_1_V_fu_855_p2;
reg   [7:0] macRegisters_2_V_5_fu_174;
wire   [7:0] macRegisters_2_V_fu_864_p2;
reg   [7:0] macRegisters_3_V_5_fu_178;
wire   [7:0] macRegisters_3_V_fu_882_p2;
wire   [3:0] tmp_fu_311_p1;
wire   [0:0] exitcond_flatten_fu_335_p2;
wire   [9:0] tmp_96_fu_315_p3;
wire   [0:0] tmp_s_fu_371_p2;
wire   [0:0] not_exitcond_flatten_fu_365_p2;
wire   [4:0] nm_mid_fu_341_p3;
wire   [0:0] tmp_97_mid_fu_377_p2;
wire   [0:0] tmp_359_fu_389_p2;
wire   [4:0] nm_2_fu_383_p2;
wire   [3:0] tmp_647_fu_403_p1;
wire   [9:0] tmp_96_mid1_fu_407_p3;
wire   [9:0] tmp_96_mid_fu_349_p3;
wire   [3:0] nm_t_mid_fu_357_p3;
wire   [6:0] sf_mid2_fu_395_p3;
wire   [9:0] tmp_96_mid2_fu_415_p3;
wire   [9:0] sf_cast2_fu_439_p1;
wire   [9:0] tmp_98_fu_443_p2;
wire   [11:0] indvar_flatten_op_fu_469_p2;
wire  signed [7:0] p_Val2_s_fu_492_p0;
wire  signed [12:0] p_08_cast1_cast_fu_483_p1;
wire  signed [4:0] p_Val2_s_fu_492_p1;
wire   [12:0] p_Val2_s_fu_492_p2;
wire   [5:0] tmp_649_fu_506_p4;
wire   [0:0] tmp_651_fu_528_p1;
wire   [0:0] tmp_648_fu_498_p3;
wire   [4:0] tmp_143_fu_538_p4;
wire   [0:0] tmp_142_fu_532_p2;
wire   [5:0] tmp_144_fu_548_p3;
wire   [0:0] tmp_145_fu_556_p2;
wire   [0:0] tmp_650_fu_520_p3;
wire   [0:0] qb_assign_2_fu_562_p2;
wire  signed [6:0] p_Val2_cast_fu_516_p1;
wire   [6:0] tmp_146_cast_fu_568_p1;
wire  signed [7:0] p_Val2_1_fu_581_p0;
wire  signed [4:0] p_Val2_1_fu_581_p1;
wire   [12:0] p_Val2_1_fu_581_p2;
wire   [5:0] tmp_653_fu_595_p4;
wire   [0:0] tmp_655_fu_617_p1;
wire   [0:0] tmp_652_fu_587_p3;
wire   [4:0] tmp_149_fu_627_p4;
wire   [0:0] tmp_148_fu_621_p2;
wire   [5:0] tmp_150_fu_637_p3;
wire   [0:0] tmp_227_1_fu_645_p2;
wire   [0:0] tmp_654_fu_609_p3;
wire   [0:0] qb_assign_2_1_fu_651_p2;
wire  signed [6:0] p_Val2_81_1_cast_fu_605_p1;
wire   [6:0] tmp_228_1_cast_fu_657_p1;
wire  signed [7:0] p_Val2_2_fu_670_p0;
wire  signed [4:0] p_Val2_2_fu_670_p1;
wire   [12:0] p_Val2_2_fu_670_p2;
wire   [5:0] tmp_657_fu_684_p4;
wire   [0:0] tmp_659_fu_706_p1;
wire   [0:0] tmp_656_fu_676_p3;
wire   [4:0] tmp_153_fu_716_p4;
wire   [0:0] tmp_152_fu_710_p2;
wire   [5:0] tmp_154_fu_726_p3;
wire   [0:0] tmp_227_2_fu_734_p2;
wire   [0:0] tmp_658_fu_698_p3;
wire   [0:0] qb_assign_2_2_fu_740_p2;
wire  signed [6:0] p_Val2_81_2_cast_fu_694_p1;
wire   [6:0] tmp_228_2_cast_fu_746_p1;
wire  signed [7:0] p_Val2_3_fu_759_p0;
wire  signed [5:0] p_Val2_3_fu_759_p1;
wire   [13:0] p_Val2_3_fu_759_p2;
wire   [0:0] tmp_662_fu_791_p1;
wire   [0:0] tmp_660_fu_765_p3;
wire   [4:0] tmp_157_fu_801_p4;
wire   [0:0] tmp_156_fu_795_p2;
wire   [5:0] tmp_158_fu_811_p3;
wire   [0:0] tmp_227_3_fu_819_p2;
wire   [0:0] tmp_661_fu_783_p3;
wire  signed [7:0] tmp1_cast_fu_843_p1;
wire  signed [7:0] tmp2_cast_fu_852_p1;
wire  signed [7:0] tmp3_cast_fu_861_p1;
wire   [7:0] tmp_228_3_fu_873_p1;
wire   [7:0] tmp4_fu_876_p2;
wire  signed [7:0] tmp_162_fu_870_p1;
wire   [7:0] tmp_163_fu_908_p18;
wire   [7:0] tmp_164_fu_951_p18;
wire   [7:0] tmp_165_fu_994_p18;
wire   [7:0] tmp_166_fu_1037_p18;
wire   [7:0] p_Val2_22_3_fu_1074_p2;
wire   [7:0] p_Val2_22_2_fu_1031_p2;
wire   [7:0] p_Val2_22_1_fu_988_p2;
wire   [7:0] p_Val2_5_fu_945_p2;
wire    ap_CS_fsm_state6;
reg   [2:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;

// power-on initialization
initial begin
#0 start_once_reg = 1'b0;
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 3'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
end

Conv1DMac_new_1_wVhK #(
    .DataWidth( 5 ),
    .AddressRange( 1024 ),
    .AddressWidth( 10 ))
weights5_m_weights_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(weights5_m_weights_V_address0),
    .ce0(weights5_m_weights_V_ce0),
    .q0(weights5_m_weights_V_q0)
);

Conv1DMac_new_1_wWhU #(
    .DataWidth( 5 ),
    .AddressRange( 1024 ),
    .AddressWidth( 10 ))
weights5_m_weights_V_1_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(weights5_m_weights_V_1_address0),
    .ce0(weights5_m_weights_V_1_ce0),
    .q0(weights5_m_weights_V_1_q0)
);

Conv1DMac_new_1_wXh4 #(
    .DataWidth( 5 ),
    .AddressRange( 1024 ),
    .AddressWidth( 10 ))
weights5_m_weights_V_2_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(weights5_m_weights_V_2_address0),
    .ce0(weights5_m_weights_V_2_ce0),
    .q0(weights5_m_weights_V_2_q0)
);

Conv1DMac_new_1_wYie #(
    .DataWidth( 6 ),
    .AddressRange( 1024 ),
    .AddressWidth( 10 ))
weights5_m_weights_V_3_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(weights5_m_weights_V_3_address0),
    .ce0(weights5_m_weights_V_3_ce0),
    .q0(weights5_m_weights_V_3_q0)
);

computeS1_mux_164DeQ_x_x_x_x #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 8 ),
    .din3_WIDTH( 8 ),
    .din4_WIDTH( 8 ),
    .din5_WIDTH( 8 ),
    .din6_WIDTH( 8 ),
    .din7_WIDTH( 8 ),
    .din8_WIDTH( 8 ),
    .din9_WIDTH( 8 ),
    .din10_WIDTH( 8 ),
    .din11_WIDTH( 8 ),
    .din12_WIDTH( 8 ),
    .din13_WIDTH( 8 ),
    .din14_WIDTH( 8 ),
    .din15_WIDTH( 8 ),
    .din16_WIDTH( 4 ),
    .dout_WIDTH( 8 ))
computeS1_mux_164DeQ_x_x_x_x_U127(
    .din0(8'd0),
    .din1(8'd0),
    .din2(8'd0),
    .din3(8'd15),
    .din4(8'd0),
    .din5(8'd0),
    .din6(8'd7),
    .din7(8'd0),
    .din8(8'd0),
    .din9(8'd1),
    .din10(8'd0),
    .din11(8'd8),
    .din12(8'd0),
    .din13(8'd0),
    .din14(8'd253),
    .din15(8'd253),
    .din16(nm_t_mid2_reg_1130_pp0_iter2_reg),
    .dout(tmp_163_fu_908_p18)
);

computeS1_mux_164DeQ #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 8 ),
    .din3_WIDTH( 8 ),
    .din4_WIDTH( 8 ),
    .din5_WIDTH( 8 ),
    .din6_WIDTH( 8 ),
    .din7_WIDTH( 8 ),
    .din8_WIDTH( 8 ),
    .din9_WIDTH( 8 ),
    .din10_WIDTH( 8 ),
    .din11_WIDTH( 8 ),
    .din12_WIDTH( 8 ),
    .din13_WIDTH( 8 ),
    .din14_WIDTH( 8 ),
    .din15_WIDTH( 8 ),
    .din16_WIDTH( 4 ),
    .dout_WIDTH( 8 ))
computeS1_mux_164DeQ_U128(
    .din0(8'd6),
    .din1(8'd2),
    .din2(8'd0),
    .din3(8'd0),
    .din4(8'd10),
    .din5(8'd0),
    .din6(8'd2),
    .din7(8'd0),
    .din8(8'd15),
    .din9(8'd0),
    .din10(8'd0),
    .din11(8'd0),
    .din12(8'd0),
    .din13(8'd9),
    .din14(8'd17),
    .din15(8'd0),
    .din16(nm_t_mid2_reg_1130_pp0_iter2_reg),
    .dout(tmp_164_fu_951_p18)
);

computeS1_mux_164DeQ_x_x_x_x #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 8 ),
    .din3_WIDTH( 8 ),
    .din4_WIDTH( 8 ),
    .din5_WIDTH( 8 ),
    .din6_WIDTH( 8 ),
    .din7_WIDTH( 8 ),
    .din8_WIDTH( 8 ),
    .din9_WIDTH( 8 ),
    .din10_WIDTH( 8 ),
    .din11_WIDTH( 8 ),
    .din12_WIDTH( 8 ),
    .din13_WIDTH( 8 ),
    .din14_WIDTH( 8 ),
    .din15_WIDTH( 8 ),
    .din16_WIDTH( 4 ),
    .dout_WIDTH( 8 ))
computeS1_mux_164DeQ_x_x_x_x_U129(
    .din0(8'd2),
    .din1(8'd0),
    .din2(8'd0),
    .din3(8'd6),
    .din4(8'd6),
    .din5(8'd0),
    .din6(8'd0),
    .din7(8'd0),
    .din8(8'd11),
    .din9(8'd0),
    .din10(8'd0),
    .din11(8'd4),
    .din12(8'd5),
    .din13(8'd0),
    .din14(8'd3),
    .din15(8'd251),
    .din16(nm_t_mid2_reg_1130_pp0_iter2_reg),
    .dout(tmp_165_fu_994_p18)
);

computeS1_mux_164DeQ_x_x_x_x #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 8 ),
    .din3_WIDTH( 8 ),
    .din4_WIDTH( 8 ),
    .din5_WIDTH( 8 ),
    .din6_WIDTH( 8 ),
    .din7_WIDTH( 8 ),
    .din8_WIDTH( 8 ),
    .din9_WIDTH( 8 ),
    .din10_WIDTH( 8 ),
    .din11_WIDTH( 8 ),
    .din12_WIDTH( 8 ),
    .din13_WIDTH( 8 ),
    .din14_WIDTH( 8 ),
    .din15_WIDTH( 8 ),
    .din16_WIDTH( 4 ),
    .dout_WIDTH( 8 ))
computeS1_mux_164DeQ_x_x_x_x_U130(
    .din0(8'd0),
    .din1(8'd0),
    .din2(8'd247),
    .din3(8'd0),
    .din4(8'd0),
    .din5(8'd9),
    .din6(8'd8),
    .din7(8'd0),
    .din8(8'd0),
    .din9(8'd0),
    .din10(8'd2),
    .din11(8'd0),
    .din12(8'd11),
    .din13(8'd0),
    .din14(8'd0),
    .din15(8'd0),
    .din16(nm_t_mid2_reg_1130_pp0_iter2_reg),
    .dout(tmp_166_fu_1037_p18)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state6)) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_condition_pp0_exit_iter0_state2) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state2)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state2);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter3 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((internal_ap_ready == 1'b0) & (real_start == 1'b1))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_flatten7_fu_323_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        indvar_flatten7_reg_247 <= indvar_flatten_next7_fu_329_p2;
    end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        indvar_flatten7_reg_247 <= 19'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_flatten7_fu_323_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        indvar_flatten_reg_258 <= indvar_flatten_next_fu_475_p3;
    end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        indvar_flatten_reg_258 <= 12'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_100_reg_1163_pp0_iter2_reg == 1'd0) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        macRegisters_0_V_5_fu_166 <= macRegisters_0_V_fu_846_p2;
    end else if ((((tmp_100_reg_1163_pp0_iter2_reg == 1'd1) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001)) | (~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1)))) begin
        macRegisters_0_V_5_fu_166 <= 8'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_100_reg_1163_pp0_iter2_reg == 1'd0) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        macRegisters_1_V_5_fu_170 <= macRegisters_1_V_fu_855_p2;
    end else if ((((tmp_100_reg_1163_pp0_iter2_reg == 1'd1) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001)) | (~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1)))) begin
        macRegisters_1_V_5_fu_170 <= 8'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_100_reg_1163_pp0_iter2_reg == 1'd0) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        macRegisters_2_V_5_fu_174 <= macRegisters_2_V_fu_864_p2;
    end else if ((((tmp_100_reg_1163_pp0_iter2_reg == 1'd1) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001)) | (~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1)))) begin
        macRegisters_2_V_5_fu_174 <= 8'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_100_reg_1163_pp0_iter2_reg == 1'd0) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        macRegisters_3_V_5_fu_178 <= macRegisters_3_V_fu_882_p2;
    end else if ((((tmp_100_reg_1163_pp0_iter2_reg == 1'd1) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001)) | (~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1)))) begin
        macRegisters_3_V_5_fu_178 <= 8'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_flatten7_fu_323_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        nm_reg_269 <= nm_mid2_fu_431_p3;
    end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        nm_reg_269 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_flatten7_fu_323_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        sf_reg_280 <= sf_2_fu_463_p2;
    end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        sf_reg_280 <= 7'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        exitcond_flatten7_reg_1121 <= exitcond_flatten7_fu_323_p2;
        exitcond_flatten7_reg_1121_pp0_iter1_reg <= exitcond_flatten7_reg_1121;
        nm_t_mid2_reg_1130_pp0_iter1_reg <= nm_t_mid2_reg_1130;
        tmp_100_reg_1163_pp0_iter1_reg <= tmp_100_reg_1163;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_flatten7_fu_323_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        nm_t_mid2_reg_1130 <= nm_t_mid2_fu_423_p3;
        tmp_100_reg_1163 <= tmp_100_fu_457_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        nm_t_mid2_reg_1130_pp0_iter2_reg <= nm_t_mid2_reg_1130_pp0_iter1_reg;
        tmp_100_reg_1163_pp0_iter2_reg <= tmp_100_reg_1163_pp0_iter1_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_flatten7_reg_1121_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        qb_assign_2_3_reg_1223 <= qb_assign_2_3_fu_825_p2;
        tmp1_reg_1203 <= tmp1_fu_572_p2;
        tmp2_reg_1208 <= tmp2_fu_661_p2;
        tmp3_reg_1213 <= tmp3_fu_750_p2;
        tmp_161_reg_1218 <= {{p_Val2_3_fu_759_p2[13:7]}};
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_flatten7_reg_1121 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        tmp_V_reg_1177 <= in_V_V_dout;
        weights5_m_weights_V_11_reg_1198 <= weights5_m_weights_V_3_q0;
        weights5_m_weights_V_5_reg_1183 <= weights5_m_weights_V_q0;
        weights5_m_weights_V_7_reg_1188 <= weights5_m_weights_V_1_q0;
        weights5_m_weights_V_9_reg_1193 <= weights5_m_weights_V_2_q0;
    end
end

always @ (*) begin
    if ((exitcond_flatten7_fu_323_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((real_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond_flatten7_reg_1121 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        in_V_V_blk_n = in_V_V_empty_n;
    end else begin
        in_V_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((exitcond_flatten7_reg_1121 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        in_V_V_read = 1'b1;
    end else begin
        in_V_V_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        internal_ap_ready = 1'b1;
    end else begin
        internal_ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_100_reg_1163_pp0_iter2_reg == 1'd1) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        out_V_V_blk_n = out_V_V_full_n;
    end else begin
        out_V_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((tmp_100_reg_1163_pp0_iter2_reg == 1'd1) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        out_V_V_write = 1'b1;
    end else begin
        out_V_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (start_full_n == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (real_start == 1'b1))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        weights5_m_weights_V_1_ce0 = 1'b1;
    end else begin
        weights5_m_weights_V_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        weights5_m_weights_V_2_ce0 = 1'b1;
    end else begin
        weights5_m_weights_V_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        weights5_m_weights_V_3_ce0 = 1'b1;
    end else begin
        weights5_m_weights_V_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        weights5_m_weights_V_ce0 = 1'b1;
    end else begin
        weights5_m_weights_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((exitcond_flatten7_fu_323_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone)) & ~((ap_enable_reg_pp0_iter3 == 1'b1) & (ap_enable_reg_pp0_iter2 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((ap_enable_reg_pp0_iter3 == 1'b1) & (ap_enable_reg_pp0_iter2 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone)) | ((exitcond_flatten7_fu_323_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd2];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = (((tmp_100_reg_1163_pp0_iter2_reg == 1'd1) & (out_V_V_full_n == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b1)) | ((exitcond_flatten7_reg_1121 == 1'd0) & (in_V_V_empty_n == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((tmp_100_reg_1163_pp0_iter2_reg == 1'd1) & (out_V_V_full_n == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b1)) | ((exitcond_flatten7_reg_1121 == 1'd0) & (in_V_V_empty_n == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((tmp_100_reg_1163_pp0_iter2_reg == 1'd1) & (out_V_V_full_n == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b1)) | ((exitcond_flatten7_reg_1121 == 1'd0) & (in_V_V_empty_n == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1)));
end

always @ (*) begin
    ap_block_state1 = ((real_start == 1'b0) | (ap_done_reg == 1'b1));
end

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state3_pp0_stage0_iter1 = ((exitcond_flatten7_reg_1121 == 1'd0) & (in_V_V_empty_n == 1'b0));
end

assign ap_block_state4_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state5_pp0_stage0_iter3 = ((tmp_100_reg_1163_pp0_iter2_reg == 1'd1) & (out_V_V_full_n == 1'b0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_ready = internal_ap_ready;

assign exitcond_flatten7_fu_323_p2 = ((indvar_flatten7_reg_247 == 19'd262144) ? 1'b1 : 1'b0);

assign exitcond_flatten_fu_335_p2 = ((indvar_flatten_reg_258 == 12'd1024) ? 1'b1 : 1'b0);

assign indvar_flatten_next7_fu_329_p2 = (19'd1 + indvar_flatten7_reg_247);

assign indvar_flatten_next_fu_475_p3 = ((exitcond_flatten_fu_335_p2[0:0] === 1'b1) ? 12'd1 : indvar_flatten_op_fu_469_p2);

assign indvar_flatten_op_fu_469_p2 = (indvar_flatten_reg_258 + 12'd1);

assign macRegisters_0_V_fu_846_p2 = ($signed(tmp1_cast_fu_843_p1) + $signed(macRegisters_0_V_5_fu_166));

assign macRegisters_1_V_fu_855_p2 = ($signed(tmp2_cast_fu_852_p1) + $signed(macRegisters_1_V_5_fu_170));

assign macRegisters_2_V_fu_864_p2 = ($signed(tmp3_cast_fu_861_p1) + $signed(macRegisters_2_V_5_fu_174));

assign macRegisters_3_V_fu_882_p2 = ($signed(tmp4_fu_876_p2) + $signed(tmp_162_fu_870_p1));

assign nm_2_fu_383_p2 = (5'd1 + nm_mid_fu_341_p3);

assign nm_mid2_fu_431_p3 = ((tmp_97_mid_fu_377_p2[0:0] === 1'b1) ? nm_2_fu_383_p2 : nm_mid_fu_341_p3);

assign nm_mid_fu_341_p3 = ((exitcond_flatten_fu_335_p2[0:0] === 1'b1) ? 5'd0 : nm_reg_269);

assign nm_t_mid2_fu_423_p3 = ((tmp_97_mid_fu_377_p2[0:0] === 1'b1) ? tmp_647_fu_403_p1 : nm_t_mid_fu_357_p3);

assign nm_t_mid_fu_357_p3 = ((exitcond_flatten_fu_335_p2[0:0] === 1'b1) ? 4'd0 : tmp_fu_311_p1);

assign not_exitcond_flatten_fu_365_p2 = (exitcond_flatten_fu_335_p2 ^ 1'd1);

assign out_V_V_din = {{{{p_Val2_22_3_fu_1074_p2}, {p_Val2_22_2_fu_1031_p2}}, {p_Val2_22_1_fu_988_p2}}, {p_Val2_5_fu_945_p2}};

assign p_08_cast1_cast_fu_483_p1 = tmp_V_reg_1177;

assign p_Val2_1_fu_581_p0 = p_08_cast1_cast_fu_483_p1;

assign p_Val2_1_fu_581_p1 = weights5_m_weights_V_7_reg_1188;

assign p_Val2_1_fu_581_p2 = ($signed(p_Val2_1_fu_581_p0) * $signed(p_Val2_1_fu_581_p1));

assign p_Val2_22_1_fu_988_p2 = (macRegisters_1_V_fu_855_p2 + tmp_164_fu_951_p18);

assign p_Val2_22_2_fu_1031_p2 = (macRegisters_2_V_fu_864_p2 + tmp_165_fu_994_p18);

assign p_Val2_22_3_fu_1074_p2 = (macRegisters_3_V_fu_882_p2 + tmp_166_fu_1037_p18);

assign p_Val2_2_fu_670_p0 = p_08_cast1_cast_fu_483_p1;

assign p_Val2_2_fu_670_p1 = weights5_m_weights_V_9_reg_1193;

assign p_Val2_2_fu_670_p2 = ($signed(p_Val2_2_fu_670_p0) * $signed(p_Val2_2_fu_670_p1));

assign p_Val2_3_fu_759_p0 = tmp_V_reg_1177;

assign p_Val2_3_fu_759_p1 = weights5_m_weights_V_11_reg_1198;

assign p_Val2_3_fu_759_p2 = ($signed(p_Val2_3_fu_759_p0) * $signed(p_Val2_3_fu_759_p1));

assign p_Val2_5_fu_945_p2 = (macRegisters_0_V_fu_846_p2 + tmp_163_fu_908_p18);

assign p_Val2_81_1_cast_fu_605_p1 = $signed(tmp_653_fu_595_p4);

assign p_Val2_81_2_cast_fu_694_p1 = $signed(tmp_657_fu_684_p4);

assign p_Val2_cast_fu_516_p1 = $signed(tmp_649_fu_506_p4);

assign p_Val2_s_fu_492_p0 = p_08_cast1_cast_fu_483_p1;

assign p_Val2_s_fu_492_p1 = weights5_m_weights_V_5_reg_1183;

assign p_Val2_s_fu_492_p2 = ($signed(p_Val2_s_fu_492_p0) * $signed(p_Val2_s_fu_492_p1));

assign qb_assign_2_1_fu_651_p2 = (tmp_654_fu_609_p3 & tmp_227_1_fu_645_p2);

assign qb_assign_2_2_fu_740_p2 = (tmp_658_fu_698_p3 & tmp_227_2_fu_734_p2);

assign qb_assign_2_3_fu_825_p2 = (tmp_661_fu_783_p3 & tmp_227_3_fu_819_p2);

assign qb_assign_2_fu_562_p2 = (tmp_650_fu_520_p3 & tmp_145_fu_556_p2);

assign sf_2_fu_463_p2 = (sf_mid2_fu_395_p3 + 7'd1);

assign sf_cast2_fu_439_p1 = sf_mid2_fu_395_p3;

assign sf_mid2_fu_395_p3 = ((tmp_359_fu_389_p2[0:0] === 1'b1) ? 7'd0 : sf_reg_280);

assign start_out = real_start;

assign tmp1_cast_fu_843_p1 = $signed(tmp1_reg_1203);

assign tmp1_fu_572_p2 = ($signed(p_Val2_cast_fu_516_p1) + $signed(tmp_146_cast_fu_568_p1));

assign tmp2_cast_fu_852_p1 = $signed(tmp2_reg_1208);

assign tmp2_fu_661_p2 = ($signed(p_Val2_81_1_cast_fu_605_p1) + $signed(tmp_228_1_cast_fu_657_p1));

assign tmp3_cast_fu_861_p1 = $signed(tmp3_reg_1213);

assign tmp3_fu_750_p2 = ($signed(p_Val2_81_2_cast_fu_694_p1) + $signed(tmp_228_2_cast_fu_746_p1));

assign tmp4_fu_876_p2 = (macRegisters_3_V_5_fu_178 + tmp_228_3_fu_873_p1);

assign tmp_100_fu_457_p2 = ((sf_mid2_fu_395_p3 == 7'd63) ? 1'b1 : 1'b0);

assign tmp_142_fu_532_p2 = (tmp_651_fu_528_p1 | tmp_648_fu_498_p3);

assign tmp_143_fu_538_p4 = {{p_Val2_s_fu_492_p2[5:1]}};

assign tmp_144_fu_548_p3 = {{tmp_143_fu_538_p4}, {tmp_142_fu_532_p2}};

assign tmp_145_fu_556_p2 = ((tmp_144_fu_548_p3 != 6'd0) ? 1'b1 : 1'b0);

assign tmp_146_cast_fu_568_p1 = qb_assign_2_fu_562_p2;

assign tmp_148_fu_621_p2 = (tmp_655_fu_617_p1 | tmp_652_fu_587_p3);

assign tmp_149_fu_627_p4 = {{p_Val2_1_fu_581_p2[5:1]}};

assign tmp_150_fu_637_p3 = {{tmp_149_fu_627_p4}, {tmp_148_fu_621_p2}};

assign tmp_152_fu_710_p2 = (tmp_659_fu_706_p1 | tmp_656_fu_676_p3);

assign tmp_153_fu_716_p4 = {{p_Val2_2_fu_670_p2[5:1]}};

assign tmp_154_fu_726_p3 = {{tmp_153_fu_716_p4}, {tmp_152_fu_710_p2}};

assign tmp_156_fu_795_p2 = (tmp_662_fu_791_p1 | tmp_660_fu_765_p3);

assign tmp_157_fu_801_p4 = {{p_Val2_3_fu_759_p2[5:1]}};

assign tmp_158_fu_811_p3 = {{tmp_157_fu_801_p4}, {tmp_156_fu_795_p2}};

assign tmp_162_fu_870_p1 = $signed(tmp_161_reg_1218);

assign tmp_227_1_fu_645_p2 = ((tmp_150_fu_637_p3 != 6'd0) ? 1'b1 : 1'b0);

assign tmp_227_2_fu_734_p2 = ((tmp_154_fu_726_p3 != 6'd0) ? 1'b1 : 1'b0);

assign tmp_227_3_fu_819_p2 = ((tmp_158_fu_811_p3 != 6'd0) ? 1'b1 : 1'b0);

assign tmp_228_1_cast_fu_657_p1 = qb_assign_2_1_fu_651_p2;

assign tmp_228_2_cast_fu_746_p1 = qb_assign_2_2_fu_740_p2;

assign tmp_228_3_fu_873_p1 = qb_assign_2_3_reg_1223;

assign tmp_359_fu_389_p2 = (tmp_97_mid_fu_377_p2 | exitcond_flatten_fu_335_p2);

assign tmp_647_fu_403_p1 = nm_2_fu_383_p2[3:0];

assign tmp_648_fu_498_p3 = p_Val2_s_fu_492_p2[32'd12];

assign tmp_649_fu_506_p4 = {{p_Val2_s_fu_492_p2[12:7]}};

assign tmp_650_fu_520_p3 = p_Val2_s_fu_492_p2[32'd6];

assign tmp_651_fu_528_p1 = p_Val2_s_fu_492_p2[0:0];

assign tmp_652_fu_587_p3 = p_Val2_1_fu_581_p2[32'd12];

assign tmp_653_fu_595_p4 = {{p_Val2_1_fu_581_p2[12:7]}};

assign tmp_654_fu_609_p3 = p_Val2_1_fu_581_p2[32'd6];

assign tmp_655_fu_617_p1 = p_Val2_1_fu_581_p2[0:0];

assign tmp_656_fu_676_p3 = p_Val2_2_fu_670_p2[32'd12];

assign tmp_657_fu_684_p4 = {{p_Val2_2_fu_670_p2[12:7]}};

assign tmp_658_fu_698_p3 = p_Val2_2_fu_670_p2[32'd6];

assign tmp_659_fu_706_p1 = p_Val2_2_fu_670_p2[0:0];

assign tmp_660_fu_765_p3 = p_Val2_3_fu_759_p2[32'd13];

assign tmp_661_fu_783_p3 = p_Val2_3_fu_759_p2[32'd6];

assign tmp_662_fu_791_p1 = p_Val2_3_fu_759_p2[0:0];

assign tmp_96_fu_315_p3 = {{tmp_fu_311_p1}, {6'd0}};

assign tmp_96_mid1_fu_407_p3 = {{tmp_647_fu_403_p1}, {6'd0}};

assign tmp_96_mid2_fu_415_p3 = ((tmp_97_mid_fu_377_p2[0:0] === 1'b1) ? tmp_96_mid1_fu_407_p3 : tmp_96_mid_fu_349_p3);

assign tmp_96_mid_fu_349_p3 = ((exitcond_flatten_fu_335_p2[0:0] === 1'b1) ? 10'd0 : tmp_96_fu_315_p3);

assign tmp_97_mid_fu_377_p2 = (tmp_s_fu_371_p2 & not_exitcond_flatten_fu_365_p2);

assign tmp_98_fu_443_p2 = (tmp_96_mid2_fu_415_p3 + sf_cast2_fu_439_p1);

assign tmp_99_fu_449_p1 = tmp_98_fu_443_p2;

assign tmp_fu_311_p1 = nm_reg_269[3:0];

assign tmp_s_fu_371_p2 = ((sf_reg_280 == 7'd64) ? 1'b1 : 1'b0);

assign weights5_m_weights_V_1_address0 = tmp_99_fu_449_p1;

assign weights5_m_weights_V_2_address0 = tmp_99_fu_449_p1;

assign weights5_m_weights_V_3_address0 = tmp_99_fu_449_p1;

assign weights5_m_weights_V_address0 = tmp_99_fu_449_p1;

endmodule //Conv1DMac_new_1
