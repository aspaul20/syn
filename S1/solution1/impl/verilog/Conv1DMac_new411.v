// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module Conv1DMac_new411 (
        ap_clk,
        ap_rst,
        ap_start,
        start_full_n,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        start_out,
        start_write,
        in_V_V_dout,
        in_V_V_empty_n,
        in_V_V_read,
        out_V_V_din,
        out_V_V_full_n,
        out_V_V_write
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_pp0_stage0 = 3'd2;
parameter    ap_ST_fsm_state6 = 3'd4;

input   ap_clk;
input   ap_rst;
input   ap_start;
input   start_full_n;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output   start_out;
output   start_write;
input  [7:0] in_V_V_dout;
input   in_V_V_empty_n;
output   in_V_V_read;
output  [31:0] out_V_V_din;
input   out_V_V_full_n;
output   out_V_V_write;

reg ap_done;
reg ap_idle;
reg start_write;
reg in_V_V_read;
reg out_V_V_write;

reg    real_start;
reg    start_once_reg;
reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    internal_ap_ready;
wire   [9:0] weights2_m_weights_V_address0;
reg    weights2_m_weights_V_ce0;
wire   [7:0] weights2_m_weights_V_q0;
wire   [9:0] weights2_m_weights_V_1_address0;
reg    weights2_m_weights_V_1_ce0;
wire   [7:0] weights2_m_weights_V_1_q0;
wire   [9:0] weights2_m_weights_V_2_address0;
reg    weights2_m_weights_V_2_ce0;
wire   [7:0] weights2_m_weights_V_2_q0;
wire   [9:0] weights2_m_weights_V_3_address0;
reg    weights2_m_weights_V_3_ce0;
wire   [7:0] weights2_m_weights_V_3_q0;
reg    in_V_V_blk_n;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
reg   [0:0] exitcond_flatten4_reg_1126;
reg    out_V_V_blk_n;
reg    ap_enable_reg_pp0_iter3;
reg   [0:0] tmp_68_reg_1153;
reg   [0:0] tmp_68_reg_1153_pp0_iter2_reg;
reg   [22:0] indvar_flatten4_reg_283;
reg   [11:0] indvar_flatten_reg_294;
reg   [4:0] nm_reg_305;
reg   [6:0] sf_reg_316;
wire   [0:0] exitcond_flatten4_fu_359_p2;
wire    ap_block_state2_pp0_stage0_iter0;
reg    ap_block_state3_pp0_stage0_iter1;
wire    ap_block_state4_pp0_stage0_iter2;
reg    ap_block_state5_pp0_stage0_iter3;
reg    ap_block_pp0_stage0_11001;
reg   [0:0] exitcond_flatten4_reg_1126_pp0_iter1_reg;
wire   [22:0] indvar_flatten_next4_fu_365_p2;
reg    ap_enable_reg_pp0_iter0;
wire   [3:0] nm_t_mid2_fu_459_p3;
reg   [3:0] nm_t_mid2_reg_1135;
reg   [3:0] nm_t_mid2_reg_1135_pp0_iter1_reg;
reg   [3:0] nm_t_mid2_reg_1135_pp0_iter2_reg;
wire   [4:0] nm_mid2_fu_467_p3;
wire   [9:0] tmp_48_fu_479_p2;
reg   [9:0] tmp_48_reg_1148;
wire   [0:0] tmp_68_fu_485_p2;
reg   [0:0] tmp_68_reg_1153_pp0_iter1_reg;
wire   [6:0] sf_1_fu_491_p2;
wire   [11:0] indvar_flatten_next_fu_503_p3;
reg   [7:0] tmp_V_reg_1167;
reg   [7:0] p_Val2_s_140_reg_1192;
wire   [0:0] qb_assign_1_fu_591_p2;
reg   [0:0] qb_assign_1_reg_1197;
reg   [7:0] p_Val2_75_1_reg_1202;
wire   [0:0] qb_assign_1_1_fu_667_p2;
reg   [0:0] qb_assign_1_1_reg_1207;
reg   [7:0] p_Val2_75_2_reg_1212;
wire   [0:0] qb_assign_1_2_fu_743_p2;
reg   [0:0] qb_assign_1_2_reg_1217;
reg   [7:0] p_Val2_75_3_reg_1222;
wire   [0:0] qb_assign_1_3_fu_819_p2;
reg   [0:0] qb_assign_1_3_reg_1227;
reg    ap_block_state1;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state2;
reg    ap_enable_reg_pp0_iter2;
wire   [63:0] tmp_49_fu_511_p1;
reg    ap_block_pp0_stage0_01001;
reg   [7:0] macRegisters_0_V_2_fu_202;
wire   [7:0] macRegisters_0_V_fu_846_p2;
reg   [7:0] macRegisters_1_V_2_fu_206;
wire   [7:0] macRegisters_1_V_fu_860_p2;
reg   [7:0] macRegisters_2_V_2_fu_210;
wire   [7:0] macRegisters_2_V_fu_874_p2;
reg   [7:0] macRegisters_3_V_2_fu_214;
wire   [7:0] macRegisters_3_V_fu_888_p2;
wire   [3:0] tmp_fu_347_p1;
wire   [0:0] exitcond_flatten_fu_371_p2;
wire   [9:0] tmp_45_fu_351_p3;
wire   [0:0] tmp_355_fu_407_p2;
wire   [0:0] not_exitcond_flatten_fu_401_p2;
wire   [4:0] nm_mid_fu_377_p3;
wire   [0:0] tmp_46_mid_fu_413_p2;
wire   [0:0] tmp_356_fu_425_p2;
wire   [4:0] nm_1_fu_419_p2;
wire   [3:0] tmp_607_fu_439_p1;
wire   [9:0] tmp_45_mid1_fu_443_p3;
wire   [9:0] tmp_45_mid_fu_385_p3;
wire   [3:0] nm_t_mid_fu_393_p3;
wire   [6:0] sf_mid2_fu_431_p3;
wire   [9:0] sf_cast1_fu_475_p1;
wire   [9:0] tmp_45_mid2_fu_451_p3;
wire   [11:0] indvar_flatten_op_fu_497_p2;
wire  signed [7:0] p_Val2_s_fu_525_p0;
wire  signed [15:0] p_s_fu_518_p1;
wire  signed [7:0] p_Val2_s_fu_525_p1;
wire   [15:0] p_Val2_s_fu_525_p2;
wire   [0:0] tmp_610_fu_557_p1;
wire   [0:0] tmp_608_fu_531_p3;
wire   [4:0] tmp_53_fu_567_p4;
wire   [0:0] tmp_52_fu_561_p2;
wire   [5:0] tmp_54_fu_577_p3;
wire   [0:0] tmp_55_fu_585_p2;
wire   [0:0] tmp_609_fu_549_p3;
wire  signed [7:0] p_Val2_1_fu_601_p0;
wire  signed [7:0] p_Val2_1_fu_601_p1;
wire   [15:0] p_Val2_1_fu_601_p2;
wire   [0:0] tmp_613_fu_633_p1;
wire   [0:0] tmp_611_fu_607_p3;
wire   [4:0] tmp_59_fu_643_p4;
wire   [0:0] tmp_58_fu_637_p2;
wire   [5:0] tmp_60_fu_653_p3;
wire   [0:0] tmp_203_1_fu_661_p2;
wire   [0:0] tmp_612_fu_625_p3;
wire  signed [7:0] p_Val2_2_fu_677_p0;
wire  signed [7:0] p_Val2_2_fu_677_p1;
wire   [15:0] p_Val2_2_fu_677_p2;
wire   [0:0] tmp_616_fu_709_p1;
wire   [0:0] tmp_614_fu_683_p3;
wire   [4:0] tmp_63_fu_719_p4;
wire   [0:0] tmp_62_fu_713_p2;
wire   [5:0] tmp_64_fu_729_p3;
wire   [0:0] tmp_203_2_fu_737_p2;
wire   [0:0] tmp_615_fu_701_p3;
wire  signed [7:0] p_Val2_3_fu_753_p0;
wire  signed [7:0] p_Val2_3_fu_753_p1;
wire   [15:0] p_Val2_3_fu_753_p2;
wire   [0:0] tmp_619_fu_785_p1;
wire   [0:0] tmp_617_fu_759_p3;
wire   [4:0] tmp_s_fu_795_p4;
wire   [0:0] tmp_66_fu_789_p2;
wire   [5:0] tmp_67_fu_805_p3;
wire   [0:0] tmp_203_3_fu_813_p2;
wire   [0:0] tmp_618_fu_777_p3;
wire   [7:0] tmp_56_fu_837_p1;
wire   [7:0] tmp1_fu_840_p2;
wire   [7:0] tmp_204_1_fu_851_p1;
wire   [7:0] tmp2_fu_854_p2;
wire   [7:0] tmp_204_2_fu_865_p1;
wire   [7:0] tmp3_fu_868_p2;
wire   [7:0] tmp_204_3_fu_879_p1;
wire   [7:0] tmp4_fu_882_p2;
wire   [7:0] tmp_69_fu_913_p18;
wire   [7:0] tmp_70_fu_956_p18;
wire   [7:0] tmp_71_fu_999_p18;
wire   [7:0] tmp_72_fu_1042_p18;
wire   [7:0] p_Val2_20_3_fu_1079_p2;
wire   [7:0] p_Val2_20_2_fu_1036_p2;
wire   [7:0] p_Val2_20_1_fu_993_p2;
wire   [7:0] p_Val2_5_fu_950_p2;
wire    ap_CS_fsm_state6;
reg   [2:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;

// power-on initialization
initial begin
#0 start_once_reg = 1'b0;
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 3'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
end

Conv1DMac_new411_Ffa #(
    .DataWidth( 8 ),
    .AddressRange( 1024 ),
    .AddressWidth( 10 ))
weights2_m_weights_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(weights2_m_weights_V_address0),
    .ce0(weights2_m_weights_V_ce0),
    .q0(weights2_m_weights_V_q0)
);

Conv1DMac_new411_Gfk #(
    .DataWidth( 8 ),
    .AddressRange( 1024 ),
    .AddressWidth( 10 ))
weights2_m_weights_V_1_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(weights2_m_weights_V_1_address0),
    .ce0(weights2_m_weights_V_1_ce0),
    .q0(weights2_m_weights_V_1_q0)
);

Conv1DMac_new411_Hfu #(
    .DataWidth( 8 ),
    .AddressRange( 1024 ),
    .AddressWidth( 10 ))
weights2_m_weights_V_2_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(weights2_m_weights_V_2_address0),
    .ce0(weights2_m_weights_V_2_ce0),
    .q0(weights2_m_weights_V_2_q0)
);

Conv1DMac_new411_IfE #(
    .DataWidth( 8 ),
    .AddressRange( 1024 ),
    .AddressWidth( 10 ))
weights2_m_weights_V_3_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(weights2_m_weights_V_3_address0),
    .ce0(weights2_m_weights_V_3_ce0),
    .q0(weights2_m_weights_V_3_q0)
);

computeS1_mux_164DeQ_x #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 8 ),
    .din3_WIDTH( 8 ),
    .din4_WIDTH( 8 ),
    .din5_WIDTH( 8 ),
    .din6_WIDTH( 8 ),
    .din7_WIDTH( 8 ),
    .din8_WIDTH( 8 ),
    .din9_WIDTH( 8 ),
    .din10_WIDTH( 8 ),
    .din11_WIDTH( 8 ),
    .din12_WIDTH( 8 ),
    .din13_WIDTH( 8 ),
    .din14_WIDTH( 8 ),
    .din15_WIDTH( 8 ),
    .din16_WIDTH( 4 ),
    .dout_WIDTH( 8 ))
computeS1_mux_164DeQ_x_U64(
    .din0(8'd4),
    .din1(8'd0),
    .din2(8'd233),
    .din3(8'd246),
    .din4(8'd4),
    .din5(8'd250),
    .din6(8'd31),
    .din7(8'd6),
    .din8(8'd254),
    .din9(8'd29),
    .din10(8'd243),
    .din11(8'd13),
    .din12(8'd11),
    .din13(8'd7),
    .din14(8'd248),
    .din15(8'd233),
    .din16(nm_t_mid2_reg_1135_pp0_iter2_reg),
    .dout(tmp_69_fu_913_p18)
);

computeS1_mux_164DeQ_x #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 8 ),
    .din3_WIDTH( 8 ),
    .din4_WIDTH( 8 ),
    .din5_WIDTH( 8 ),
    .din6_WIDTH( 8 ),
    .din7_WIDTH( 8 ),
    .din8_WIDTH( 8 ),
    .din9_WIDTH( 8 ),
    .din10_WIDTH( 8 ),
    .din11_WIDTH( 8 ),
    .din12_WIDTH( 8 ),
    .din13_WIDTH( 8 ),
    .din14_WIDTH( 8 ),
    .din15_WIDTH( 8 ),
    .din16_WIDTH( 4 ),
    .dout_WIDTH( 8 ))
computeS1_mux_164DeQ_x_U65(
    .din0(8'd253),
    .din1(8'd4),
    .din2(8'd244),
    .din3(8'd234),
    .din4(8'd14),
    .din5(8'd13),
    .din6(8'd21),
    .din7(8'd88),
    .din8(8'd249),
    .din9(8'd251),
    .din10(8'd35),
    .din11(8'd6),
    .din12(8'd5),
    .din13(8'd253),
    .din14(8'd37),
    .din15(8'd244),
    .din16(nm_t_mid2_reg_1135_pp0_iter2_reg),
    .dout(tmp_70_fu_956_p18)
);

computeS1_mux_164DeQ_x #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 8 ),
    .din3_WIDTH( 8 ),
    .din4_WIDTH( 8 ),
    .din5_WIDTH( 8 ),
    .din6_WIDTH( 8 ),
    .din7_WIDTH( 8 ),
    .din8_WIDTH( 8 ),
    .din9_WIDTH( 8 ),
    .din10_WIDTH( 8 ),
    .din11_WIDTH( 8 ),
    .din12_WIDTH( 8 ),
    .din13_WIDTH( 8 ),
    .din14_WIDTH( 8 ),
    .din15_WIDTH( 8 ),
    .din16_WIDTH( 4 ),
    .dout_WIDTH( 8 ))
computeS1_mux_164DeQ_x_U66(
    .din0(8'd226),
    .din1(8'd1),
    .din2(8'd0),
    .din3(8'd8),
    .din4(8'd12),
    .din5(8'd0),
    .din6(8'd246),
    .din7(8'd248),
    .din8(8'd234),
    .din9(8'd24),
    .din10(8'd3),
    .din11(8'd0),
    .din12(8'd0),
    .din13(8'd17),
    .din14(8'd236),
    .din15(8'd5),
    .din16(nm_t_mid2_reg_1135_pp0_iter2_reg),
    .dout(tmp_71_fu_999_p18)
);

computeS1_mux_164DeQ_x #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 8 ),
    .din3_WIDTH( 8 ),
    .din4_WIDTH( 8 ),
    .din5_WIDTH( 8 ),
    .din6_WIDTH( 8 ),
    .din7_WIDTH( 8 ),
    .din8_WIDTH( 8 ),
    .din9_WIDTH( 8 ),
    .din10_WIDTH( 8 ),
    .din11_WIDTH( 8 ),
    .din12_WIDTH( 8 ),
    .din13_WIDTH( 8 ),
    .din14_WIDTH( 8 ),
    .din15_WIDTH( 8 ),
    .din16_WIDTH( 4 ),
    .dout_WIDTH( 8 ))
computeS1_mux_164DeQ_x_U67(
    .din0(8'd25),
    .din1(8'd12),
    .din2(8'd249),
    .din3(8'd37),
    .din4(8'd232),
    .din5(8'd255),
    .din6(8'd231),
    .din7(8'd6),
    .din8(8'd246),
    .din9(8'd17),
    .din10(8'd0),
    .din11(8'd7),
    .din12(8'd7),
    .din13(8'd0),
    .din14(8'd3),
    .din15(8'd32),
    .din16(nm_t_mid2_reg_1135_pp0_iter2_reg),
    .dout(tmp_72_fu_1042_p18)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state6)) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_condition_pp0_exit_iter0_state2) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state2)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state2);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter3 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((internal_ap_ready == 1'b0) & (real_start == 1'b1))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_flatten4_fu_359_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        indvar_flatten4_reg_283 <= indvar_flatten_next4_fu_365_p2;
    end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        indvar_flatten4_reg_283 <= 23'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_flatten4_fu_359_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        indvar_flatten_reg_294 <= indvar_flatten_next_fu_503_p3;
    end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        indvar_flatten_reg_294 <= 12'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_68_reg_1153_pp0_iter2_reg == 1'd0) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        macRegisters_0_V_2_fu_202 <= macRegisters_0_V_fu_846_p2;
    end else if ((((tmp_68_reg_1153_pp0_iter2_reg == 1'd1) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001)) | (~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1)))) begin
        macRegisters_0_V_2_fu_202 <= 8'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_68_reg_1153_pp0_iter2_reg == 1'd0) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        macRegisters_1_V_2_fu_206 <= macRegisters_1_V_fu_860_p2;
    end else if ((((tmp_68_reg_1153_pp0_iter2_reg == 1'd1) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001)) | (~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1)))) begin
        macRegisters_1_V_2_fu_206 <= 8'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_68_reg_1153_pp0_iter2_reg == 1'd0) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        macRegisters_2_V_2_fu_210 <= macRegisters_2_V_fu_874_p2;
    end else if ((((tmp_68_reg_1153_pp0_iter2_reg == 1'd1) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001)) | (~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1)))) begin
        macRegisters_2_V_2_fu_210 <= 8'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_68_reg_1153_pp0_iter2_reg == 1'd0) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        macRegisters_3_V_2_fu_214 <= macRegisters_3_V_fu_888_p2;
    end else if ((((tmp_68_reg_1153_pp0_iter2_reg == 1'd1) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001)) | (~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1)))) begin
        macRegisters_3_V_2_fu_214 <= 8'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_flatten4_fu_359_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        nm_reg_305 <= nm_mid2_fu_467_p3;
    end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        nm_reg_305 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_flatten4_fu_359_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        sf_reg_316 <= sf_1_fu_491_p2;
    end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        sf_reg_316 <= 7'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        exitcond_flatten4_reg_1126 <= exitcond_flatten4_fu_359_p2;
        exitcond_flatten4_reg_1126_pp0_iter1_reg <= exitcond_flatten4_reg_1126;
        nm_t_mid2_reg_1135_pp0_iter1_reg <= nm_t_mid2_reg_1135;
        tmp_68_reg_1153_pp0_iter1_reg <= tmp_68_reg_1153;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_flatten4_fu_359_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        nm_t_mid2_reg_1135 <= nm_t_mid2_fu_459_p3;
        tmp_48_reg_1148 <= tmp_48_fu_479_p2;
        tmp_68_reg_1153 <= tmp_68_fu_485_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        nm_t_mid2_reg_1135_pp0_iter2_reg <= nm_t_mid2_reg_1135_pp0_iter1_reg;
        tmp_68_reg_1153_pp0_iter2_reg <= tmp_68_reg_1153_pp0_iter1_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_flatten4_reg_1126_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        p_Val2_75_1_reg_1202 <= {{p_Val2_1_fu_601_p2[14:7]}};
        p_Val2_75_2_reg_1212 <= {{p_Val2_2_fu_677_p2[14:7]}};
        p_Val2_75_3_reg_1222 <= {{p_Val2_3_fu_753_p2[14:7]}};
        p_Val2_s_140_reg_1192 <= {{p_Val2_s_fu_525_p2[14:7]}};
        qb_assign_1_1_reg_1207 <= qb_assign_1_1_fu_667_p2;
        qb_assign_1_2_reg_1217 <= qb_assign_1_2_fu_743_p2;
        qb_assign_1_3_reg_1227 <= qb_assign_1_3_fu_819_p2;
        qb_assign_1_reg_1197 <= qb_assign_1_fu_591_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_flatten4_reg_1126 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        tmp_V_reg_1167 <= in_V_V_dout;
    end
end

always @ (*) begin
    if ((exitcond_flatten4_fu_359_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((real_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond_flatten4_reg_1126 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        in_V_V_blk_n = in_V_V_empty_n;
    end else begin
        in_V_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((exitcond_flatten4_reg_1126 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        in_V_V_read = 1'b1;
    end else begin
        in_V_V_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        internal_ap_ready = 1'b1;
    end else begin
        internal_ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_68_reg_1153_pp0_iter2_reg == 1'd1) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        out_V_V_blk_n = out_V_V_full_n;
    end else begin
        out_V_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((tmp_68_reg_1153_pp0_iter2_reg == 1'd1) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        out_V_V_write = 1'b1;
    end else begin
        out_V_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (start_full_n == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (real_start == 1'b1))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        weights2_m_weights_V_1_ce0 = 1'b1;
    end else begin
        weights2_m_weights_V_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        weights2_m_weights_V_2_ce0 = 1'b1;
    end else begin
        weights2_m_weights_V_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        weights2_m_weights_V_3_ce0 = 1'b1;
    end else begin
        weights2_m_weights_V_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        weights2_m_weights_V_ce0 = 1'b1;
    end else begin
        weights2_m_weights_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((exitcond_flatten4_fu_359_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone)) & ~((ap_enable_reg_pp0_iter3 == 1'b1) & (ap_enable_reg_pp0_iter2 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((ap_enable_reg_pp0_iter3 == 1'b1) & (ap_enable_reg_pp0_iter2 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone)) | ((exitcond_flatten4_fu_359_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd2];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = (((tmp_68_reg_1153_pp0_iter2_reg == 1'd1) & (out_V_V_full_n == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b1)) | ((exitcond_flatten4_reg_1126 == 1'd0) & (in_V_V_empty_n == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((tmp_68_reg_1153_pp0_iter2_reg == 1'd1) & (out_V_V_full_n == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b1)) | ((exitcond_flatten4_reg_1126 == 1'd0) & (in_V_V_empty_n == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((tmp_68_reg_1153_pp0_iter2_reg == 1'd1) & (out_V_V_full_n == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b1)) | ((exitcond_flatten4_reg_1126 == 1'd0) & (in_V_V_empty_n == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1)));
end

always @ (*) begin
    ap_block_state1 = ((real_start == 1'b0) | (ap_done_reg == 1'b1));
end

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state3_pp0_stage0_iter1 = ((exitcond_flatten4_reg_1126 == 1'd0) & (in_V_V_empty_n == 1'b0));
end

assign ap_block_state4_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state5_pp0_stage0_iter3 = ((tmp_68_reg_1153_pp0_iter2_reg == 1'd1) & (out_V_V_full_n == 1'b0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_ready = internal_ap_ready;

assign exitcond_flatten4_fu_359_p2 = ((indvar_flatten4_reg_283 == 23'd4194304) ? 1'b1 : 1'b0);

assign exitcond_flatten_fu_371_p2 = ((indvar_flatten_reg_294 == 12'd1024) ? 1'b1 : 1'b0);

assign indvar_flatten_next4_fu_365_p2 = (23'd1 + indvar_flatten4_reg_283);

assign indvar_flatten_next_fu_503_p3 = ((exitcond_flatten_fu_371_p2[0:0] === 1'b1) ? 12'd1 : indvar_flatten_op_fu_497_p2);

assign indvar_flatten_op_fu_497_p2 = (indvar_flatten_reg_294 + 12'd1);

assign macRegisters_0_V_fu_846_p2 = (p_Val2_s_140_reg_1192 + tmp1_fu_840_p2);

assign macRegisters_1_V_fu_860_p2 = (p_Val2_75_1_reg_1202 + tmp2_fu_854_p2);

assign macRegisters_2_V_fu_874_p2 = (p_Val2_75_2_reg_1212 + tmp3_fu_868_p2);

assign macRegisters_3_V_fu_888_p2 = (p_Val2_75_3_reg_1222 + tmp4_fu_882_p2);

assign nm_1_fu_419_p2 = (5'd1 + nm_mid_fu_377_p3);

assign nm_mid2_fu_467_p3 = ((tmp_46_mid_fu_413_p2[0:0] === 1'b1) ? nm_1_fu_419_p2 : nm_mid_fu_377_p3);

assign nm_mid_fu_377_p3 = ((exitcond_flatten_fu_371_p2[0:0] === 1'b1) ? 5'd0 : nm_reg_305);

assign nm_t_mid2_fu_459_p3 = ((tmp_46_mid_fu_413_p2[0:0] === 1'b1) ? tmp_607_fu_439_p1 : nm_t_mid_fu_393_p3);

assign nm_t_mid_fu_393_p3 = ((exitcond_flatten_fu_371_p2[0:0] === 1'b1) ? 4'd0 : tmp_fu_347_p1);

assign not_exitcond_flatten_fu_401_p2 = (exitcond_flatten_fu_371_p2 ^ 1'd1);

assign out_V_V_din = {{{{p_Val2_20_3_fu_1079_p2}, {p_Val2_20_2_fu_1036_p2}}, {p_Val2_20_1_fu_993_p2}}, {p_Val2_5_fu_950_p2}};

assign p_Val2_1_fu_601_p0 = p_s_fu_518_p1;

assign p_Val2_1_fu_601_p1 = weights2_m_weights_V_1_q0;

assign p_Val2_1_fu_601_p2 = ($signed(p_Val2_1_fu_601_p0) * $signed(p_Val2_1_fu_601_p1));

assign p_Val2_20_1_fu_993_p2 = (macRegisters_1_V_fu_860_p2 + tmp_70_fu_956_p18);

assign p_Val2_20_2_fu_1036_p2 = (macRegisters_2_V_fu_874_p2 + tmp_71_fu_999_p18);

assign p_Val2_20_3_fu_1079_p2 = (macRegisters_3_V_fu_888_p2 + tmp_72_fu_1042_p18);

assign p_Val2_2_fu_677_p0 = p_s_fu_518_p1;

assign p_Val2_2_fu_677_p1 = weights2_m_weights_V_2_q0;

assign p_Val2_2_fu_677_p2 = ($signed(p_Val2_2_fu_677_p0) * $signed(p_Val2_2_fu_677_p1));

assign p_Val2_3_fu_753_p0 = p_s_fu_518_p1;

assign p_Val2_3_fu_753_p1 = weights2_m_weights_V_3_q0;

assign p_Val2_3_fu_753_p2 = ($signed(p_Val2_3_fu_753_p0) * $signed(p_Val2_3_fu_753_p1));

assign p_Val2_5_fu_950_p2 = (macRegisters_0_V_fu_846_p2 + tmp_69_fu_913_p18);

assign p_Val2_s_fu_525_p0 = p_s_fu_518_p1;

assign p_Val2_s_fu_525_p1 = weights2_m_weights_V_q0;

assign p_Val2_s_fu_525_p2 = ($signed(p_Val2_s_fu_525_p0) * $signed(p_Val2_s_fu_525_p1));

assign p_s_fu_518_p1 = $signed(tmp_V_reg_1167);

assign qb_assign_1_1_fu_667_p2 = (tmp_612_fu_625_p3 & tmp_203_1_fu_661_p2);

assign qb_assign_1_2_fu_743_p2 = (tmp_615_fu_701_p3 & tmp_203_2_fu_737_p2);

assign qb_assign_1_3_fu_819_p2 = (tmp_618_fu_777_p3 & tmp_203_3_fu_813_p2);

assign qb_assign_1_fu_591_p2 = (tmp_609_fu_549_p3 & tmp_55_fu_585_p2);

assign sf_1_fu_491_p2 = (sf_mid2_fu_431_p3 + 7'd1);

assign sf_cast1_fu_475_p1 = sf_mid2_fu_431_p3;

assign sf_mid2_fu_431_p3 = ((tmp_356_fu_425_p2[0:0] === 1'b1) ? 7'd0 : sf_reg_316);

assign start_out = real_start;

assign tmp1_fu_840_p2 = (tmp_56_fu_837_p1 + macRegisters_0_V_2_fu_202);

assign tmp2_fu_854_p2 = (tmp_204_1_fu_851_p1 + macRegisters_1_V_2_fu_206);

assign tmp3_fu_868_p2 = (tmp_204_2_fu_865_p1 + macRegisters_2_V_2_fu_210);

assign tmp4_fu_882_p2 = (tmp_204_3_fu_879_p1 + macRegisters_3_V_2_fu_214);

assign tmp_203_1_fu_661_p2 = ((tmp_60_fu_653_p3 != 6'd0) ? 1'b1 : 1'b0);

assign tmp_203_2_fu_737_p2 = ((tmp_64_fu_729_p3 != 6'd0) ? 1'b1 : 1'b0);

assign tmp_203_3_fu_813_p2 = ((tmp_67_fu_805_p3 != 6'd0) ? 1'b1 : 1'b0);

assign tmp_204_1_fu_851_p1 = qb_assign_1_1_reg_1207;

assign tmp_204_2_fu_865_p1 = qb_assign_1_2_reg_1217;

assign tmp_204_3_fu_879_p1 = qb_assign_1_3_reg_1227;

assign tmp_355_fu_407_p2 = ((sf_reg_316 == 7'd64) ? 1'b1 : 1'b0);

assign tmp_356_fu_425_p2 = (tmp_46_mid_fu_413_p2 | exitcond_flatten_fu_371_p2);

assign tmp_45_fu_351_p3 = {{tmp_fu_347_p1}, {6'd0}};

assign tmp_45_mid1_fu_443_p3 = {{tmp_607_fu_439_p1}, {6'd0}};

assign tmp_45_mid2_fu_451_p3 = ((tmp_46_mid_fu_413_p2[0:0] === 1'b1) ? tmp_45_mid1_fu_443_p3 : tmp_45_mid_fu_385_p3);

assign tmp_45_mid_fu_385_p3 = ((exitcond_flatten_fu_371_p2[0:0] === 1'b1) ? 10'd0 : tmp_45_fu_351_p3);

assign tmp_46_mid_fu_413_p2 = (tmp_355_fu_407_p2 & not_exitcond_flatten_fu_401_p2);

assign tmp_48_fu_479_p2 = (sf_cast1_fu_475_p1 + tmp_45_mid2_fu_451_p3);

assign tmp_49_fu_511_p1 = tmp_48_reg_1148;

assign tmp_52_fu_561_p2 = (tmp_610_fu_557_p1 | tmp_608_fu_531_p3);

assign tmp_53_fu_567_p4 = {{p_Val2_s_fu_525_p2[5:1]}};

assign tmp_54_fu_577_p3 = {{tmp_53_fu_567_p4}, {tmp_52_fu_561_p2}};

assign tmp_55_fu_585_p2 = ((tmp_54_fu_577_p3 != 6'd0) ? 1'b1 : 1'b0);

assign tmp_56_fu_837_p1 = qb_assign_1_reg_1197;

assign tmp_58_fu_637_p2 = (tmp_613_fu_633_p1 | tmp_611_fu_607_p3);

assign tmp_59_fu_643_p4 = {{p_Val2_1_fu_601_p2[5:1]}};

assign tmp_607_fu_439_p1 = nm_1_fu_419_p2[3:0];

assign tmp_608_fu_531_p3 = p_Val2_s_fu_525_p2[32'd15];

assign tmp_609_fu_549_p3 = p_Val2_s_fu_525_p2[32'd6];

assign tmp_60_fu_653_p3 = {{tmp_59_fu_643_p4}, {tmp_58_fu_637_p2}};

assign tmp_610_fu_557_p1 = p_Val2_s_fu_525_p2[0:0];

assign tmp_611_fu_607_p3 = p_Val2_1_fu_601_p2[32'd15];

assign tmp_612_fu_625_p3 = p_Val2_1_fu_601_p2[32'd6];

assign tmp_613_fu_633_p1 = p_Val2_1_fu_601_p2[0:0];

assign tmp_614_fu_683_p3 = p_Val2_2_fu_677_p2[32'd15];

assign tmp_615_fu_701_p3 = p_Val2_2_fu_677_p2[32'd6];

assign tmp_616_fu_709_p1 = p_Val2_2_fu_677_p2[0:0];

assign tmp_617_fu_759_p3 = p_Val2_3_fu_753_p2[32'd15];

assign tmp_618_fu_777_p3 = p_Val2_3_fu_753_p2[32'd6];

assign tmp_619_fu_785_p1 = p_Val2_3_fu_753_p2[0:0];

assign tmp_62_fu_713_p2 = (tmp_616_fu_709_p1 | tmp_614_fu_683_p3);

assign tmp_63_fu_719_p4 = {{p_Val2_2_fu_677_p2[5:1]}};

assign tmp_64_fu_729_p3 = {{tmp_63_fu_719_p4}, {tmp_62_fu_713_p2}};

assign tmp_66_fu_789_p2 = (tmp_619_fu_785_p1 | tmp_617_fu_759_p3);

assign tmp_67_fu_805_p3 = {{tmp_s_fu_795_p4}, {tmp_66_fu_789_p2}};

assign tmp_68_fu_485_p2 = ((sf_mid2_fu_431_p3 == 7'd63) ? 1'b1 : 1'b0);

assign tmp_fu_347_p1 = nm_reg_305[3:0];

assign tmp_s_fu_795_p4 = {{p_Val2_3_fu_753_p2[5:1]}};

assign weights2_m_weights_V_1_address0 = tmp_49_fu_511_p1;

assign weights2_m_weights_V_2_address0 = tmp_49_fu_511_p1;

assign weights2_m_weights_V_3_address0 = tmp_49_fu_511_p1;

assign weights2_m_weights_V_address0 = tmp_49_fu_511_p1;

endmodule //Conv1DMac_new411
